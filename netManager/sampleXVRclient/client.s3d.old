/* Include s3d symbols */
#include <Script3d.h>
//#define DQUAT_TRANSF_XVRSHADER
//#define VA_TRANS
#define TM_TRANSF_XVRSHADER
#include "Common.s3d"
#include "avatars.s3d"

// Function declarations
extern function NewLight;
//extern function GetTrackerPos;
//extern function GetTrackerRot;
//extern function GetTrackerJoy;
//extern function GetTrackerButtons;
function CameraMouseMove();
function CameraMoveWand();
function KeyStatus(keycode);
function KeyBoardManager();
function AxisAngleToQuat(a1,q1);
function matrixToAngles(m, a);
function DrawBoneAxes(avId,boneId);
function CheckAndFetch();
function updateRemoteClients(i);
function updateModel(i,j);
function avatarLookAt(av_id,bone_id,target);
function shortestArc(from, to);
function slerp(qa, qb, t);

// Scene parameters (Field of view, near clipping plane, far clipping plane)
SET SCENE_FOV = 60;
SET SCENE_NEAR = 0.1;
SET SCENE_FAR = 500;

#define DEGTORAD (3.141596/180)
#define RADTODEG (180/3.141596)
#define CLIENT ("WOLE") //define your client name here e.g. UCL, UB, etc
#define CLIENTTYPE ("AVATAR") //define your client type here e.g. AVATAR, ROOM, etc
var viewer_mode = 0; //change to 1 if running in viewer-only mode - no avatar will be created
#define ATTENTIONMODEL
//#define CAVEMODE	//comment this line if running on desktop with just mouse control

static var cave_half_width = 1.5;
static var cave_half_height = 1.1;
// Variables to manage camera
var CamPos = [0,1.7,2];			//camera position
// Variables to manage light
var Luce1;
var PosL1 = [0.0,10.0,0.0]	;	//default light position  
// Variables for 3d geometry
var m_mesh1;	// Variables for meshes 
var m_obj1;	// Variables for objects
var m_avatar;	// Variables for objects
var m_cam; //variable for camera
var m_mesh;
var index = 0;
var avatarArray = {};
var angolo = 0.0;
var sens = 0.01;
var key_offset = 0.1;
var prev_key = "";
var morphval=vector(10);
var normalinfl=0.0;
var translation=vector(2);
var clientdll;
var attentionmodeldll;
var my_avatarId;
var my_avatar = "CMan0023";
var y_pos = 0;
var righteye_look_ahead = [0,0,0,0];
var lefteye_look_ahead = [0,0,0,0];
var head_look_ahead = [0,0,0,0];
var rightarm_quat = [0,0,0,0];
var leftarm_quat = [0,0,0,0];
var rightleg_quat = [0,0,0,0];
var leftleg_quat = [0,0,0,0];
var root_quat = [0,0,0,0];
var head_quat = [0,0,0,0];
var rotSwitch = true;
var angleX = 0;


function OnDownload(params)
{
    //FileDownload("..\\netClient\\Release\\netClient.dll");
/*    FileDownload("misc\\dtg_model.AAM");
    FileDownload("misc\\dummy.AAM");
	FileDownload("misc\\backwall.uvw");
	FileDownload("misc\\back_wall.png");
	FileDownload("misc\\carpet_tile.png");        
	FileDownload("misc\\ceiling.png");
	FileDownload("misc\\ceiling_corridor.png");   
	FileDownload("misc\\door.png");
	FileDownload("misc\\dtg_model.AAM");
	FileDownload("misc\\dummy.AAM");    
	FileDownload("misc\\front_wall.png");    
	FileDownload("misc\\leftcorridor.uvw");
	FileDownload("misc\\left_corridor.png");
	FileDownload("misc\\left_wall.png");
	FileDownload("misc\\posters0001.png");
	FileDownload("misc\\posters0002.png");   
	FileDownload("misc\\posters0003.png");   
	FileDownload("misc\\posters0004.png");
	FileDownload("misc\\posters0005.png");   
	FileDownload("misc\\posters0006.png");   
	FileDownload("misc\\posters0007.png");
	FileDownload("misc\\posters0008.png");   
	FileDownload("misc\\posters0009.png");   
	FileDownload("misc\\posters0010.png");
	FileDownload("misc\\posters0011.png");   
	FileDownload("misc\\posters0012.png");   
	FileDownload("misc\\posters0013.png");
	FileDownload("misc\\posters0014.png");   
	FileDownload("misc\\posters0015.png");   
	FileDownload("misc\\right_corridor.png");
	FileDownload("misc\\right_wall.png");*/
}

function OnInit(params)
{
 	//Font settings
	ConsoleFont("Lucida Console",20);
	ConsoleColor(0,1,0);

	SetLocalDir();
    clientdll = CVmExternDll("..\\netClient\\Release\\netClient.dll");
    clientdll.__AddFunction(C_VOID, "startclient", C_PCHAR, C_INT, C_PCHAR, C_PCHAR, C_PCHAR, C_INT, C_INT, C_INT, C_INT);
    clientdll.__AddFunction(C_VOID, "check");
    clientdll.__AddFunction(C_VOID, "addNode", C_PCHAR,C_PSTR);
    clientdll.__AddFunction(C_VOID, "updateAvatarNodes", C_PCHAR, C_FLOAT, C_FLOAT, C_FLOAT, C_FLOAT, C_FLOAT, C_FLOAT, C_FLOAT);
    clientdll.__AddFunction(C_VOID, "removeAllNodes");
    clientdll.__AddFunction(C_VOID, "stop");
    clientdll.__AddFunction(C_INT, "fetch", C_PSTR, C_PFLOAT);
    clientdll.__AddFunction(C_INT, "checkStatus", C_PSTR,C_PSTR,C_PSTR,C_PSTR);
    clientdll.startclient("127.0.0.1"/*"193.205.82.196"*/, 12050, CLIENT, CLIENTTYPE, my_avatar+".cfg", viewer_mode, 2, 1, 30); 
    
	//initialise avatars
	SetLocalDir();
	initAvatars();
	
    // Setup Camera
	//CameraSetPosition(CamPos);	

	// Setup First Light
	Luce1 = CVmLight();
	Luce1.SetDiffuse(1,1,1);
	Luce1.Enable();		
	//Setup Initial Position
	Luce1.SetPosition(PosL1);

    SetLocalDir(".\\misc");
    
	m_mesh1 = CVmNewMesh("dtg_model.AAM");
	m_obj1 = CVmObj();
	m_obj1.LinkToMesh(m_mesh1);	
	m_obj1.SetPosition(0,0,0);
	
	m_mesh = CVmNewMesh("dummy.AAM");
	m_mesh.Normalize(0.1);
	//m_mesh.HideAll();
	m_cam = CVmObj();
	m_cam.LinkToMesh(m_mesh);
	m_cam.SetPosition(0,0,0);

    SetLocalDir("");

	if (viewer_mode == 0)
	{
		//initialise a dummy/invisible avatar for my client locally
		my_avatarId = Avatars.addCharacter(my_avatar,my_avatar+".cfg");
		Avatars.IdleOne(my_avatarId);
		
		#ifdef ATTENTIONMODEL
			//TO DO: store the following information into an array/map
			//store default positions/orientations so that we simply add the resulting orientation
			//default root position
			var translate[3];
			Avatars.getTranslationAbs(my_avatarId,0,&translate); 
			y_pos = translate[1]; //store away the default y-position (feet) of the avatar for later use
			output("avatar origin, y = ", y_pos, "\n");
			//default head
			Avatars.getRotation(my_avatarId,8,&head_look_ahead); //store away the default look-ahead rotation of the avatar's head for later use
			//default left eye
			Avatars.getRotation(my_avatarId,10,&lefteye_look_ahead); //store away the default look-ahead vector of the avatar's eye for later use
			//default right eye
			Avatars.getRotation(my_avatarId,12,&righteye_look_ahead); //store away the default look-ahead vector of the avatar's eye for later use
			//store default orientations
			Avatars.getRotation(my_avatarId,15,&leftarm_quat);
			Avatars.getRotation(my_avatarId,39,&rightarm_quat);
			Avatars.getRotation(my_avatarId,62,&leftleg_quat);
			Avatars.getRotation(my_avatarId,67,&rightleg_quat);
		#endif
				
/*		clientdll.createNode("0"); //create raknet node/object for root position
		clientdll.createNode("8"); //create raknet node/object for head position
		clientdll.createNode("10"); //create raknet node/object for left eye position
		clientdll.createNode("12"); //create raknet node/object for right eye position
		clientdll.createNode("15"); //create raknet node/object for the Left UpperArm
		clientdll.createNode("39"); //create raknet node/object for the Right UpperArm
		clientdll.createNode("62"); //create raknet node/object for the Left Thigh
		clientdll.createNode("67"); //create raknet node/object for the Left Thigh
*/		for (var i=0; i<=71; i++)
		{
			clientdll.addNode(str(i),"AVATAR");
		}
		#ifdef ATTENTIONMODEL
			SetLocalDir("");
		    attentionmodeldll = CVmExternDll("attentionmodel.dll");
		    attentionmodeldll.__AddFunction(C_VOID, "start");
		    attentionmodeldll.__AddFunction(C_VOID, "setAvatarCoords", C_INT, C_FLOAT, C_FLOAT, C_FLOAT, C_FLOAT, C_FLOAT, C_FLOAT, C_FLOAT);
		    attentionmodeldll.__AddFunction(C_VOID, "getEyeModelTarget", C_PSTR,C_PFLOAT, C_PFLOAT, C_PFLOAT, C_PFLOAT, C_PFLOAT, C_PFLOAT, C_PFLOAT);
		    attentionmodeldll.__AddFunction(C_VOID, "getHeadModelTarget", C_PSTR,C_PFLOAT, C_PFLOAT, C_PFLOAT, C_PFLOAT, C_PFLOAT, C_PFLOAT, C_PFLOAT);
		    attentionmodeldll.__AddFunction(C_VOID, "updateNode", C_PCHAR, C_FLOAT, C_FLOAT, C_FLOAT, C_FLOAT, C_FLOAT, C_FLOAT, C_FLOAT);
		    attentionmodeldll.__AddFunction(C_VOID, "removeNode", C_PCHAR);
		    attentionmodeldll.__AddFunction(C_INT, "printOutput");
		    attentionmodeldll.__AddFunction(C_VOID, "quatDifference", C_PFLOAT, C_FLOAT, C_FLOAT, C_FLOAT, C_FLOAT, C_FLOAT, C_FLOAT, C_FLOAT, C_FLOAT);
		    attentionmodeldll.__AddFunction(C_VOID, "stop");
		    attentionmodeldll.start();
			
			//first update of in-world items' positions in attention-model database
			//note: update should also be called when item position changes in-world
			var rad = 0;
			var bb_center[3];
			//obtain positions of all subsets in mesh - safe to assume rotation is fixed
			for (var i=0; i<m_mesh1.GetSubsetNumber(); i++)
			{
				if (!m_mesh1.IsHidden(i))
				{
					m_mesh1.SubsetGetBoundingSphere(i,&rad,&bb_center);
					attentionmodeldll.updateNode("poster_room"+str(i),bb_center[0],bb_center[1],bb_center[2],0,1,0,0);
					//output(m_mesh1.SubsetGetDescription(i), " ", bb_center, "\n");
				}
			}
		#endif
	}
	//CameraSetBounds(m_mesh1.GetBoundingBox());
	
	/*	
	Avatars.setLocalDir ("", "data\\", "data\\data\\");
	var tempid = Avatars.addCharacter("m016","m016.cfg");
	Avatars.IdleOne(tempid);
	var translate[3];
	var rotate[4];
	//getAllBoneState only gives rotation of joints only (no translation values)
	var allbones = vector(3+4*Avatars.getNumBone(tempid));
	Avatars.getAllBoneState(tempid, &allbones);
	output(len(allbones), " ", Avatars.getNumBone(tempid), " ", allbones, "\n");
	//loop to get translation and rotation values of animated avatar 
	for (var i=0; i<Avatars.getNumBone(tempid); i++)
	{
		Avatars.getTranslation(tempid,i,&translate); //local translation - relative to parent bone
		Avatars.getRotation(tempid,i,&rotate); //local rotation values - relative to parent bone
		var ind = 3+4*i;
		//if (i==0)
		//{
			output("sprintf(id1,\"%s",i,"\",id); sprintf(id2,\"%s",Avatars.getBoneParentId(tempid,i),"\",id); addChildNode(id1,id2,\"AVATAR\"); updateAvatarNodes(id1,",translate[0],",",translate[1],",",translate[2],",", rotate[0],",", rotate[1],",", rotate[2],",", rotate[3], ");\n");
			//output(i, " ", translate, " ", allbones[ind], " ",allbones[ind+1], " ",allbones[ind+2], " ",allbones[ind+3], "\n");
		//}
	}
	*/
				
#ifdef CAVEMODE
	SceneSetParam(VR_HEADTRACKER,1);
#endif
}

function OnFrame()
{
	#ifdef CAVEMODE
		CameraMoveWand();	// Manage camera movement with wand
	#else
		CameraMouseMove();	// Manage camera movement with mouse
		CameraSetPosition(CamPos);	
	#endif
	KeyboardManager();
	Luce1.SetPosition(CameraGetPosition(0).x,CameraGetPosition(0).y,CameraGetPosition(0).z);
	//get camera rotation matrix
	var rot_mat4 = CameraGetRotationMatrix();
	//extract rotation matrix as 3x3 matrix
	var rot_mat3 = [rot_mat4[0], rot_mat4[1], rot_mat4[2], rot_mat4[4], rot_mat4[5], rot_mat4[6], rot_mat4[8], rot_mat4[9], rot_mat4[10]];
	var rot_euler = [0,0,0];
	matrixToAngles(rot_mat3, &rot_euler);
	var rot_aa = [0,0,0,0];
	//output yaw, taking both head orientation and world orientation into account
#ifdef CAVEMODE //cave w is doubled - issue with glRotate rotating by 360 when w=180
	rot_aa = [0,1,0,DEGTORAD*((2*(RADTODEG*rot_euler[1]))-GetTrackerRot(0).y)];
	//AxisAngleToQuat([0,1,0,DEGTORAD*(GetTrackerRot(0).y-(2*(RADTODEG*rot_euler[1])))],&rot_quat);
#else
	rot_aa = [0,1,0,DEGTORAD*((RADTODEG*rot_euler[1])-GetTrackerRot(0).y)];
	//AxisAngleToQuat([0,1,0,DEGTORAD*(GetTrackerRot(0).y-(RADTODEG*rot_euler[1]))],&rot_quat);
#endif
	ConsoleText(0.04,0.50, str(GetTrackerRot(0).y+(/*2**/(RADTODEG*rot_euler[1]))));
	
	if (viewer_mode == 0)
	{
		//update root's position and orientation locally
		AxisAngleToQuat(rot_aa,&root_quat);
		Avatars.setRotation(my_avatarId,0,root_quat); //set local-coord orientation of local avatar
		Avatars.setTranslation(my_avatarId,0,[CameraGetPosition(0).x, y_pos, CameraGetPosition(0).z]);//set local-coord position of local avatar
		var tmpquat = [0,0,0,0];
		AxisAngleToQuat([0,1,0,DEGTORAD*-90],&tmpquat);
		Avatars.addRotation(my_avatarId,0,tmpquat);
		
		Avatars.setRotation(my_avatarId,15,leftarm_quat);
		Avatars.addRotation(my_avatarId,15,AxisAngleToQuaternion([0,0,1,DEGTORAD*70]));
		Avatars.addRotation(my_avatarId,15,AxisAngleToQuaternion([0,1,0,DEGTORAD*-angleX]));
		Avatars.setRotation(my_avatarId,39,rightarm_quat);
		Avatars.addRotation(my_avatarId,39,AxisAngleToQuaternion([0,0,1,DEGTORAD*-75]));
		Avatars.addRotation(my_avatarId,39,AxisAngleToQuaternion([0,1,0,DEGTORAD*angleX]));
		Avatars.setRotation(my_avatarId,62,leftleg_quat);
		Avatars.addRotation(my_avatarId,62,AxisAngleToQuaternion([0,0,1,DEGTORAD*-7.5]));
		Avatars.addRotation(my_avatarId,62,AxisAngleToQuaternion([0,1,0,DEGTORAD*angleX]));
		Avatars.setRotation(my_avatarId,67,rightleg_quat);
		Avatars.addRotation(my_avatarId,15,AxisAngleToQuaternion([0,0,1,DEGTORAD*7.5]));
		Avatars.addRotation(my_avatarId,67,AxisAngleToQuaternion([0,1,0,DEGTORAD*-angleX]));
		//output(angleX," ");
		
		//remoteAndModelUpdates - reads local position and orientation and updates remote clients and model(if enabled)
		//for remote updates, root(i=0), head(i=8), left-eye(i=10) and right-eye(i=12)
	   	//for attention-model updates: right_eye(j=1) and head(j=2)
		/*updateRemoteClients(0); //root
		updateRemoteClients(8); //head
		updateRemoteClients(10); //left eye
		updateRemoteClients(12); //right eye
		updateRemoteClients(15); //left arm
		updateRemoteClients(39); //right arm
		updateRemoteClients(62); //left leg
		updateRemoteClients(67); //right leg
*/		for (var i=0; i<=71; i++)
		{
			updateRemoteClients(i);
		}
	    #ifdef ATTENTIONMODEL
			updateModel(8,2);	//update head
			updateModel(12,1);	//update eyes
	    #endif
	}
	clientdll.check(); //checks for incoming connections
	
    SceneBegin(VR_STEREO_LEFT);
	glPushMatrix();
	glDisable(GL_CULL_FACE);

	DrawGrid([0.5, 0.5, 0.5], 100);

	CheckAndFetch(); //check for updates to remote avatars/objects

	// put drawing code here
	m_cam.Draw();

#ifdef CAVEMODE
	//var direzione=GetTrackerPos(0);
	var posizione = CameraGetPosition();
/*	glTranslate(posizione + [0, 0, 1.5]);
	glRotate(angolo, 0, 1, 0);
	glTranslate(-posizione - [0, 0, 1.5]);*/
	glRotate(angolo, 0, 1, 0);
	glTranslate(-posizione - [cave_half_width, cave_half_height,0]);
#endif	
	m_cam.Draw();
	m_obj1.Draw();
	glPopMatrix();
    SceneEnd();
	
}

function updateRemoteClients(i)
{
	var tmpquat = [0,0,0,0];
	var translate[3], rotate[4];
	//get current position/orientation
	Avatars.getTranslation(my_avatarId,i,&translate); //local-coord position
	Avatars.getRotation(my_avatarId,i,&rotate); //local-coord orientation
	//inform remote clients 
   	clientdll.updateAvatarNodes(str(i), translate[0], translate[1], translate[2],rotate[1],rotate[2],rotate[3],rotate[0]); 
}

function updateModel(i,j)
{
	var tmpstr = space(128);
	var tmpquat = [0,0,0,0];
	var translate[3], rotate[4], tmprotate[4], rotate2[4];
	var tx=0,ty=0,tz=0,ax=0,ay=0,az=0,aw=0;
	switch (j)
	{
		//firstly, set orientation that will be used in setAvatarCoords 
		case 1:
			//get the stored orientation of the parents (root and head)
			rotate = QuaternionToAxisAngle(QuaternionProduct(QuaternionProduct(root_quat,AxisAngleToQuaternion([0,1,0,DEGTORAD*-90])),head_quat));
			//rotate = QuaternionToAxisAngle(QuaternionProduct(root_quat,head_quat));
			break;
		case 2:
			//get the stored orientation of the head-parent, root
			rotate = QuaternionToAxisAngle(QuaternionProduct(root_quat,AxisAngleToQuaternion([0,1,0,DEGTORAD*-90])));
			//rotate = QuaternionToAxisAngle(root_quat);
			break;
	}
	//for attention-model, update right_eye(j=1), head(j=2), 
	Avatars.getTranslationAbs(my_avatarId,i,&translate);  
	//we would normally get the rotation of the parent bone but HALCA has issues (serious issues!!!!!!!)
	//Avatars.getRotationAAAbs(my_avatarId,Avatars.getBoneParentId(my_avatarId,i),&rotate); 
	//output(i, " ", rotate2, "\n");
	//send world-coord position and orientation of its parent in this default look straight-ahead state
	//add y_pos to compensate for the root-render position adjustment
	attentionmodeldll.setAvatarCoords(j,translate[0],translate[1]+y_pos,translate[2],rotate[0],rotate[1],rotate[2],rotate[3]);
	switch (j)
	{
		case 1:
			attentionmodeldll.getEyeModelTarget(&tmpstr,&tx,&ty,&tz,&ax,&ay,&az,&aw);
			break;
		case 2:
			attentionmodeldll.getHeadModelTarget(&tmpstr,&tx,&ty,&tz,&ax,&ay,&az,&aw);
			ConsoleText(0.04,0.30,str([tx,ty,tz])+tmpstr);
			ConsoleText(0.04,0.40,str(translate));
			break;
	}
//	avatarLookAt(my_avatarId,i,translate);
//	Avatars.getRotationAbs(my_avatarId,Avatars.getBoneParentId(my_avatarId,i),&rotate2); 
	ConsoleText(0.04,0.60,str(aw));
	AxisAngleToQuat([ay,ax,az,aw],&tmpquat);
//	tmpquat = QuaternionProduct(tmpquat,[rotate2[0],rotate2[1],rotate2[2],-rotate2[3]]);
	//Avatars.getTranslation(my_avatarId,i,&translate);
	switch (j)
	{
		//firstly, set avatar back to default look-ahead position/orientation 
		//then add the new rotation to the default position
		case 1:
			Avatars.setRotation(my_avatarId,10,lefteye_look_ahead); //set to initial rotation for left eye
			Avatars.addRotation(my_avatarId,10,tmpquat); //set local-coord orientation of local avatar's left eye
			//Avatars.addRotation(my_avatarId,10,shortestArc(norm(translate), norm([tx,ty,tz])));
			//Avatars.lookAt(my_avatarId,10,translate,[tx,ty,tz]);
			//Avatars.PointAt(my_avatarId,10,[tx,ty,tz]);
			Avatars.setRotation(my_avatarId,i,righteye_look_ahead); //right eye
			Avatars.addRotation(my_avatarId,i,tmpquat);
			//Avatars.addRotation(my_avatarId,i,shortestArc(norm(translate), norm([tx,ty,tz])));
			//Avatars.lookAt(my_avatarId,i,translate,[tx,ty,tz]);
			//Avatars.PointAt(my_avatarId,i,[tx,ty,tz]);
			break;
		case 2:
			Avatars.setRotation(my_avatarId,i,head_look_ahead); //head
			Avatars.addRotation(my_avatarId,i,tmpquat); //set local-coord orientation
			head_quat = tmpquat; //store for next loop
			//Avatars.addRotation(my_avatarId,i,shortestArc(norm(translate), norm([tx,ty,tz])));
			//Avatars.lookAt(my_avatarId,i,translate,[tx,ty,tz]);
			//Avatars.PointAt(my_avatarId,i,[tx,ty,tz]);
			break;
	}
}

function shortestArc(from, to)
{ //not sure if this is correct - hint: normalise axis part of the result
	var cross = from ^ to ; //Compute vector cross product
	var dot   = from * to ; //Compute dot product
    
    dot = sqrt( 2*(dot+1) ) ; //We will use this equation twice
    cross /= dot ; //Get the x, y, z components

	//Return with the w component (Note that w is inverted because Cal3D has left-handed rotations
	return [cross[0], cross[1], cross[2], dot/2];
}

//call this function to draw the axes of one bone
function DrawBoneAxes(avId,boneId)
{
	Var bTrans=Vector(3);
	Var xAx=Vector(3);
	Var yAx=Vector(3);
	Var zAx=Vector(3);
	Var bMat=Vector(9);

	Avatars.getTranslationAbs(avId,boneId,&bTrans);
	Avatars.getRotationMatrixAbs(avId,boneId,&bMat);
	xAx[0]=bMat[0];xAx[1]=bMat[3];xAx[2]=bMat[6];
	yAx[0]=bMat[1];yAx[1]=bMat[4];yAx[2]=bMat[7];
	zAx[0]=bMat[2];zAx[1]=bMat[5];zAx[2]=bMat[8];
	DrawAxes(bTrans,xAx,yAx,zAx);
}

function slerp(qa, qb, t) 
{
	// quaternion to return
	var qm = Vector(4);
	// Calculate angle between them.
	var  cosHalfTheta = qa.w * qb.w + qa.x * qb.x + qa.y * qb.y + qa.z * qb.z;
	// if qa=qb or qa=-qb then theta = 0 and we can return qa
	if (abs(cosHalfTheta) >= 1.0){
		qm.w = qa.w;qm.x = qa.x;qm.y = qa.y;qm.z = qa.z;
		return qm;
	}
	// Calculate temporary values.
	var halfTheta = acos(cosHalfTheta);
	var sinHalfTheta = sqrt(1.0 - cosHalfTheta*cosHalfTheta);
	// if theta = 180 degrees then result is not fully defined
	// we could rotate around any axis normal to qa or qb
	if (abs(sinHalfTheta) < 0.001){ // fabs is floating point absolute
		qm.w = (qa.w * 0.5 + qb.w * 0.5);
		qm.x = (qa.x * 0.5 + qb.x * 0.5);
		qm.y = (qa.y * 0.5 + qb.y * 0.5);
		qm.z = (qa.z * 0.5 + qb.z * 0.5);
		return qm;
	}
	var ratioA = sin((1 - t) * halfTheta) / sinHalfTheta;
	var ratioB = sin(t * halfTheta) / sinHalfTheta; 
	//calculate Quaternion.
	qm.w = (qa.w * ratioA + qb.w * ratioB);
	qm.x = (qa.x * ratioA + qb.x * ratioB);
	qm.y = (qa.y * ratioA + qb.y * ratioB);
	qm.z = (qa.z * ratioA + qb.z * ratioB);
	return qm;
}

function CheckAndFetch()
{
    var new_avatar = space(128);
    var client_type = space(128);
    var client_name = space(128);
    var avatar_name = space(128);
    //get newly added client avatars
    var avatar_count = clientdll.checkStatus(&new_avatar,&client_type, &client_name, &avatar_name);
	var avatar_info = Vector(800); //node_id,position[3],orientation[4] - stores up to 60 joints 8*60=480
	var avatarId;
	var translate[3];
	var rotate[4];
	
    ConsoleText(0.04,0.10,str(index));
	//load avatars for new clients
	if (client_type == "AVATAR")
	{
		if (avatar_count > 0)
		{
			Avatars.setLocalDir ("", "data\\", "data\\data\\");
			//chooses which avatar to load
			if (avatar_name == "CMan0023.cfg")
				avatarId = Avatars.addCharacter("CMan0023","CMan0023.cfg");
			else if (avatar_name == "Hero.cfg")
				avatarId = Avatars.addCharacter("Hero","Hero.cfg");
			else if (avatar_name == "simon.cfg")
			{
				//Avatars.setLocalDir ("C:\\Wole\\Beaming\\avatarViewers\\xvr\\", "data\\", "data\\data\\");
				avatarId = Avatars.addCharacter("simon","simon.cfg"); 
			} else
				avatarId = Avatars.addCharacter("CMan0023","CMan0023.cfg");			
			aadd(avatarArray,{new_avatar,avatarId,avatar_name});
			Avatars.IdleOne(avatarId);
			index++;
			output("added = ", avatar_name, "\n");
			//output("c = ", c,"\n");
	    	ConsoleText(0.04,0.20,new_avatar);
		}
	}
	//fetch avatar information to update remote avatars
	for (var i=0; i<len(avatarArray); i++)
	{
		var joint_count = clientdll.fetch(avatarArray[i][0],&avatar_info);
		var this_avatarId = avatarArray[i][1];
	    //output(avatarArray[i][0]," ");
 	    //ConsoleText(0.04,0.40,str(joint_count));
		for (var j=0; j<joint_count; j++)
		{
			//output(avatarId," ",avatar_info[0+j*8]," ",[avatar_info[1+j*8],avatar_info[2+j*8],avatar_info[3+j*8]]," ",[avatar_info[4+j*8],avatar_info[5+j*8],avatar_info[6+j*8],avatar_info[7+j*8]],"\n");
			Avatars.setTranslation(this_avatarId,avatar_info[0+j*8],[avatar_info[1+j*8],avatar_info[2+j*8],avatar_info[3+j*8]]); //local-coord position update
			var my_quat = [avatar_info[7+j*8],avatar_info[4+j*8],avatar_info[5+j*8],avatar_info[6+j*8]];//[0,0,0,0];
			//AxisAngleToQuat([avatar_info[4+j*8],avatar_info[5+j*8],avatar_info[6+j*8],avatar_info[7+j*8]],&my_quat);
			Avatars.setRotation(this_avatarId,avatar_info[0+j*8],my_quat); //local-coord orientation update
			var tmpquat = [0,0,0,0];
			if (avatarArray[i][2] == "simon.cfg")
			{ //add to rotation to correct initial transformation
				AxisAngleToQuat([1,0,0,DEGTORAD*-90],&tmpquat);
				Avatars.addRotation(this_avatarId,avatar_info[0+j*8],tmpquat);
				AxisAngleToQuat([0,0,1,DEGTORAD*180],&tmpquat);
				Avatars.addRotation(this_avatarId,avatar_info[0+j*8],my_quat);
			}
			else if (avatarArray[i][2] == "Hero.cfg")
			{//add to rotation to correct initial transformation
				AxisAngleToQuat([0,1,0,DEGTORAD*-90],&tmpquat);
				Avatars.addRotation(this_avatarId,avatar_info[0+j*8],my_quat);
			}
			#ifdef VA_TRANS
				Avatars.Draw(0);
			#else
				skinshader.start();
				skinshader.setParameter("normalinfl",normalinfl);
				
				Avatars.DrawExtShaderOne(this_avatarId);
				skinshader.stop();
			#endif
		 }//end for
	 	if (viewer_mode == 0)
		{
		    #ifdef ATTENTIONMODEL
				 //remove from attention-model database when avatar no longer exists
				 if (joint_count==0)
				 {
					for (var i=0; i<Avatars.getNumBone(this_avatarId); i++)
					{
						attentionmodeldll.removeNode("avatar"+str(this_avatarId)+"_"+str(i));
						//attentionmodeldll.removeNode("avatar"+str(this_avatarId)+"_"+str(i));
					}		
				 } else
				 {
					//get translation and rotation values of animated avatar and update attention-model database
					for (var i=0; i<Avatars.getNumBone(this_avatarId); i++)
					{
						Avatars.getTranslationAbs(this_avatarId,i,&translate); //translation - world coord
						Avatars.getRotationAA(this_avatarId,i,&rotate); //rotation - local coord
						// first update of remote avatar positions in attention-model database
						//add y_pos to compensate for root-render adjustment
						attentionmodeldll.updateNode("avatar"+str(this_avatarId)+"_"+str(i),translate[0],translate[1]+y_pos,translate[2],rotate[1],rotate[2],rotate[3],rotate[0]);
						//if ( (i==8) || (i==10) || (i==12) )
						//	{ 	DrawBoneAxes(this_avatarId,Avatars.getBoneParentId(this_avatarId,i));	}
					}
				}
			#endif
		}
	}//end for
}


function AxisAngleToQuat(a1, q1) {
  var s = sin(a1[3]/2);
  q1[0] = a1[0] * s;
  q1[1] = a1[1] * s;
  q1[2] = a1[2] * s;
  q1[3] = cos(a1[3]/2);
}

// return euler angles in radians from a rotation matrix
function matrixToAngles(m, a){
	if(abs(m[1]) >= 0.9999)
	{
		a[0] = atan2(-m[4],m[8]);
		a[1] = 0;
		a[2] = PI/2;
		return a;	
	}
	a[0] = atan2(-m[9], m[5]);
	a[1] = atan2(-m[2], m[0]);
	a[2] = asin(m[1]);
	return a;
}

function OnExit()
{
	clientdll.removeAllNodes();
    clientdll.stop();
    if (viewer_mode == 0)
	{
		#ifdef ATTENTIONMODEL
		    attentionmodeldll.stop();
		#endif
	}
}

//-------------------------------------------------------------
// I/O management
//-------------------------------------------------------------
function CameraMoveWand(){
	var wand_xrot, wand_yrot;
	var WandFrontVector[3];
	var cos_wand_xrot;
	var button_mask; //buttonmask: red 1, yellow 2, green 4, blue 8, joystick button 16, trigger 32
	
	static var joystick_move_sensitivity = 0.2;
	static var joystick_rotate_sensitivity = 2.0;
	static var joystick_dead_zone = 0.2;
	
	wand_xrot = GetTrackerRot(1).x;
	wand_yrot = GetTrackerRot(1).y;
	cos_wand_xrot = cos(DEGTORAD*wand_xrot);
	button_mask = GetTrackerButtons(1); 
	var joy_x = GetTrackerJoy(1).x;
	if(abs(joy_x) >joystick_dead_zone){
		angolo += joystick_rotate_sensitivity*joy_x;
	}
	
	var joy_y = GetTrackerJoy(1).y;
	if(abs(joy_y) > joystick_dead_zone){
		CamPos = CameraGetPosition();
		var temp = [0,0,-joy_y];
		norm(temp);
		temp = VectorRotate(-angolo, [0,1,0], temp);
		temp = VectorRotate(wand_xrot, [1,0,0], temp);
		temp = VectorRotate(wand_yrot, [0,1,0], temp);
		CameraSetPosition(CamPos + temp.x0z*joystick_move_sensitivity);
	}
	
	CameraSetRotation(angolo,0,1,0);
}
/*
function CameraMoveWand(){
	
	var WandPos[3];
	var wand_xrot, wand_yrot;
	var WandFrontVector[3];
	var cos_wand_xrot;

	WandPos[0] = GetTrackerPos(1).x;
	WandPos[1] = GetTrackerPos(1).y;
	WandPos[2] = GetTrackerPos(1).z;
	wand_xrot = GetTrackerRot(1).x;
	wand_yrot = GetTrackerRot(1).y;
	cos_wand_xrot = cos(DEGTORAD*wand_xrot);
	
	if(GetTrackerJoy(1).x>0.2){
		angolo += (sens*10)*GetTrackerJoy(1).x;
	}
	
	if(GetTrackerJoy(1).x<-0.2){
		angolo += (sens*10)*GetTrackerJoy(1).x;
	}

	//Compute navigation from joystick valuators
	if(GetTrackerJoy(1).y > 0.2){
		CamPos = CameraGetPosition();
		var temp = [0,0,-1];
		temp = VectorRotate(-angolo, [0,1,0], temp);
		temp = VectorRotate(wand_xrot, [1,0,0], temp);
		temp = VectorRotate(wand_yrot, [0,1,0], temp);
		CameraSetPosition(CamPos + temp.x0z*sens);
	}
	
	if(GetTrackerJoy(1).y < -0.2){
		CamPos = CameraGetPosition();
		var temp = [0,0,1];
		temp =VectorRotate(-angolo,[0,1,0],temp);
		temp = VectorRotate(GetTrackerRot(1).x, [1,0,0], temp);
		temp = VectorRotate(GetTrackerRot(1).y, [0,1,0], temp);
		CameraSetPosition(CamPos + temp.x0z*sens);
	}
	
	CameraSetRotation(angolo,0,1,0);
	//ConsoleText(0.04,0.20, str(CamPos));

	//compose wand front vector
	WandFrontVector[0] = -sin(DEGTORAD*wand_yrot) * cos_wand_xrot;
	WandFrontVector[1] = sin(DEGTORAD*wand_xrot);
	WandFrontVector[2] = -cos_wand_xrot * cos(DEGTORAD*wand_yrot);
}
*/

function KeyboardManager()
{
	if (KeyStatus("S") == 1)
	{
			output("key press \"S\"\n");
	}
	var key = keyboard();
	if (key != ""){
	output("key is *", key, "*\n");
		CamPos = CameraGetPosition();
		if (key == "h"){
			CamPos[0] -= key_offset;
		}
		if (key == "l"){
			CamPos[0] += key_offset;
		}
		if (key == "j"){
			CamPos[1] -= key_offset;
		}
		if (key == "k"){
			CamPos[1] += key_offset;
		}
		if (key == "a"){
			CamPos[2] -= key_offset;
		}
		if (key == "c"){
			clientdll.addNode("0","AVATAR");
		}
		if (key == "d"){
			clientdll.removeAllNodes();
		}
		if (key == "z"){
			//CamPos[2] -= key_offset;
			attentionmodeldll.printOutput();
			//testing - will be used to populate world database for attention model
/*			output(m_mesh1.GetSubsetNumber(),"\n");
			output(m_mesh.GetSubsetsFromName("",false),"\n");
			output(m_mesh1.GetSubsetsFromName("",false),"\n");
			var rad = 0;
			var bb_center[3];
			var translate[3];
			var rotate[4];
			//obtain positions of all subsets in mesh - safe to assume rotation is fixed
			for (var i=0; i<m_mesh1.GetSubsetNumber(); i++)
			{
				if (!m_mesh1.IsHidden(i))
				{
					m_mesh1.SubsetGetBoundingSphere(i,&rad,&bb_center);
					//output(m_mesh1.SubsetGetDescription(i), " ", bb_center, "\n");
				}
			}
			//only gives rotation of joints only (no translation values)
			var allbones = vector(3+4*Avatars.getNumBone(0));
			Avatars.getAllBoneState(0, &allbones);
			//output(len(allbones), " ", allbones);
			//get translation and rotation values of animated avatar 
			for (var i=0; i<Avatars.getNumBone(0); i++)
			{
				Avatars.getTranslationAbs(0,i,&translate); //tested - gets world coord
				Avatars.getRotationAA(0,i,&rotate); //local rotation values
				var ind = 3+4*i;
				if (i==0)
				{
					output(i, " ", translate, " ", rotate, "\n");
					//output(i, " ", translate, " ", QuaternionToAxisAngle([allbones[ind],allbones[ind+1],allbones[ind+2],allbones[ind+3]]), "\n");
				}
			}*/
		}
		CameraSetPosition(CamPos);
	}
	prev_key = key;
}


// Camera manager (using mouse)
// Right button (and not Left) -> Translation on X and Z axis
// Right and Left Button -> Translation on Y axis 
// Left button (and not Right) -> Camera rotation
function CameraMouseMove()
{
	static var InMouseR = false, InMouseL = false;				
	static var PrecX = 0, PrecY = 0;			
	// Change these values to modify the mouse sensitivity
	var TR_SENSITIVITY  = 0.001;
	var ROT_SENSITIVITY = 0.01;
	// Mouse manager

	if(Mouse.ButtonL && !Mouse.ButtonR)
	{
		//====  Left Button: Camera rotation  ====//
		//output("camera rotation\n");
		if (InMouseL )
		{			
			CameraRotate(( Mouse.X-PrecX)*ROT_SENSITIVITY,0,1,0);
			//CameraRotateABS((Mouse.Y-PrecY)*ROT_SENSITIVITY,1,0,0);		
		}
		else
		{
			PrecX = Mouse.X;
			PrecY = Mouse.Y;
		}
		InMouseL = true;
		InMouseR = false;
	}
	else
	if(Mouse.ButtonR)
	{
		//====  Right Button: Camera translation  ====//
		if (InMouseR)
		{
			var CameraMatrix = CameraGetMatrix();
			CamPos = CameraGetPosition();
			if (!Mouse.ButtonL)
			//====  Translation on X and Z axis ====//
			{
				//output("camera translation in X and Z\n");
				CamPos += CameraGetZAxis() * (Mouse.y-PrecY)*TR_SENSITIVITY + CameraGetXAxis() * (Mouse.X- PrecX)*TR_SENSITIVITY;
				if (rotSwitch)
					angleX-=2;
				else if (!rotSwitch)
					angleX+=2;
				if (angleX > 20)
					rotSwitch = true;
				if (angleX < -20)
					rotSwitch = false;
			}
			else
			//====  Right + Left Button: Translation on Y axis ====//
			{
				CamPos -= CameraGetYAxis() * (Mouse.y-PrecY)*TR_SENSITIVITY;
			}
			CameraSetPosition(CamPos);		
		}
		else
		{
			PrecX = Mouse.X;
			PrecY = Mouse.Y;
		}
		InMouseR = true;
		InMouseL = false;
	}	
	else
	{
		InMouseR = false;
		InMouseL = false;
		if ((angleX != 0)&&(angleX > 0))
			angleX-=2;
		if ((angleX != 0)&&(angleX < 0))
			angleX+=2;
	}
}


function KeyStatus(keycode)
{
//	output("Keystatus(", keycode, ")\n");

	if (valtype(keycode) == "S")
	{
		keycode = asc(keycode);
	}
		
	static var keys_stati = vector(255);
	if (KeyPressed(keycode))
	{	
		if (keys_stati[keycode] == 0.0)
		{
			keys_stati[keycode] = 1.0;
			return 1;
		}
	}
	else
	{
		keys_stati[keycode] = 0.0;
		return 0;
	}
	return -1;		
}

function OnTimer()
{
}

function OnEvent()
{
}

function OnError()
{
}
