 <meta http-equiv="Content-Type" content="text/html; charset=windows-1252" /> <title>Beaming Scene Service</title>
 <body><basefont face="arial, verdana, courier">
<p>A key step towards software/hardware integration in Beaming is the data communication between modules. One of the requirements is the interfacing of heterogeneous systems (sensors on Linux/iOS/Windows/OSX). Interfaces range from external services (e.g. SecondLife), embedded systems (e.g. Arduino) to specific hardware (e.g. robots). The Beaming Scene Service aims to create a framework for managing data in a loosely-coupled heterogeneous environment. </p>
<p>A client-server replicated shared object database approach is adopted, supported using a centralised-server model. Every process in a Beaming session (clients) a copy of those shared objects when they connect to the server. Every process can edit a shared object, changes are transparently copied to all other processes. Each process can publish information simply by creating a shared object. All slow, or limited volume data is published in this database (providing single transport, easy logging) while all time-critical, high volume data use native streams (but configuration of those streams is stored in the database). </p>
<h2>How to connect to the Beaming Scene Service</h2>
<p>All client processes are expected to load the netClient library. The following describes the function calls and transmission of data types that occur during a typical session. See client.h for a more detailed description of the parameters. SampleClient VC++ project and SampleXVRClient XVR projects are thin clients you can use as a guide.</p>
<p>1. Start netServer on a fast machine with a fast Internet connection.</p>
<p>2. Using startclient(...) function, client connects to server IP address, server port and specifies a client name, client type(e.g. VISITOR, LOCAL, SPECTATOR, ROBOT, HAPTIC_DEVICE, etc), configuration file, a flag to denote whether it is a unidirectional viewer (read access) or wants to create and update objects (read\write access). You are also able to change the packet priority, reliability and serialization frequency.</p>
<p>3. The check() function was implemented to continually receive incoming packets. Put in a continuous loop (e.g. onTimer for XVR, Idle for glut). The server regularly pings all clients to ensure they are still live. The function also checks for new connections to the server and gets the packet data.</p>
<p>4. If you've started your client with write access, then you would be able to create objects, relating for example to avatar joints using addRocketBoxAvatar(...) function. Clients can add multiple avatars. Clients should also setAvatarName.</p>
<p>5. A client (avatar type) updates each joint with a starting value containing x, y, z position and rx, ry, rz, and rw rotation using updateRocketBoxAvatar(...) function. The RocketBox avatars have 123 joints.</p>
<p> NOTE: Each client type would update nodes using the appropriate function. Client (type emotion) uses updateEmotionNodes.</p>
<p><u>IMPORTANT</u>: All AVATARS adhere to the Rocketbox standard as agreed during the development of the initial theatre application.</p>
<p>6. Other clients connect in the same manner as described above and are able to share data with your client. (i.e. they are engaged in a BEAMING session).</p>
<p>7. To read data from other remotely connected clients(see client.h and the sampleclient C++ and XVR projects for further info):</p>
<p> Using getPeersID/getPeersInfo, getNodesInfo and GetAvatarData/GetAvatarSpecificData functions(preferred method)</p>
<p> NOTE: Each client type would read data using the appropriate function. To read emotion data from a client of emotion type, call GetEmotionData and GetPeerSpecificEmotionData. </p>
<p>8. Your client disconnects by removing all owned objects and publishing the event to the server:</p>
<p> void removeAllNodes(); </p>
<p> void stop(); </p>
<p>9. Other clients are notified of this disconnection, and destroy any locally-stored data structures pertaining to your client. Additionally, if a client process does not respond in a timely manner, eventually the server process will delete the objects that the client created. </p>
<h2>Data Types</h2>
<p>Version 1.0 of the netManager application <a href="#_ftn1" name="_ftnref1">[1]</a> catered for avatar joints data (i.e. transmission of 3D positions and orientations). This worked well for the theatre demo. Version 2.0 supports the Beam-enabling process through a variety of replicated objects and multiple data types. Hence 8 more data types have been created.</p>
<p>Based on the visitor-destination paradigm, the data types fall into two categories: (i) user/visitor (typically represented by an avatar, robot, etc) and a room/destination (typically represented by video, audio, point cloud, etc).</p>
<p></p>
<ul>
  <li>
    <h3>Beaming User</h3></li>
</ul>
<h4 style="text-decoration: underline;">Avatar Skeleton (BeamingAvatarJointReplica)</h4> - Represents a 'Visitor' or 'Local' <br />- Based on Rocketbox avatars: 123 joints <br />- Pelvis joint is relative to world-frame, others are relative to the pelvis/parent joint <br />- Each joint has a unique node in Raknet <br />- 7 floats per node (3 translational, 4 quaternions).
<table cellspacing="0" border="1"> <tbody>
  <tr>
    <td> ID
    </td>
    <td> X
    </td>
    <td> Y
    </td>
    <td> Z
    </td>
    <td> AX
    </td>
    <td> AY
    </td>
    <td> AZ
    </td>
    <td> AW
    </td>
  </tr>
  <tr>
    <td> 1
    </td>
    <td> 0.87
    </td>
    <td> 0.98
    </td>
    <td> 1.2
    </td>
    <td> 0.6
    </td>
    <td> 0.44
    </td>
    <td> 0.32
    </td>
    <td> 0.88
    </td>
  </tr>
  <tr>
    <td> ...
    </td>
    <td> ...
    </td>
    <td> ...
    </td>
    <td> ...
    </td>
    <td> ...
    </td>
    <td> ...
    </td>
    <td> ...
    </td>
    <td> ...
    </td>
  </tr>
  <tr>
    <td> 123
    </td>
    <td> 3.12
    </td>
    <td> -1.38
    </td>
    <td> 9.7
    </td>
    <td> 6.2
    </td>
    <td> -2.24
    </td>
    <td> 5.30
    </td>
    <td> 9.38
    </td>
  </tr> </tbody>
</table>
<h4 style="text-decoration: underline;">Facial Expression (BeamingFacialReplica)</h4> - Requires different data depending on avatar or robot representation. <br />- Therefore needs higher-level abstraction than the joint rotations used for driving the skeleton <br />- Float/boolean attributes, each corresponding to a particular expression or mouth shape
<table cellspacing="0" border="1"> <tbody>
  <tr>
    <td> ID
    </td>
    <td> Blink
    </td>
    <td> Smile
    </td>
    <td> Frown
    </td>
    <td> 'o'
    </td>
    <td> 'e'
    </td>
    <td> 'p'
    </td>
  </tr>
  <tr>
    <td> avatar_face
    </td>
    <td> true
    </td>
    <td> 0.5
    </td>
    <td> 0.1
    </td>
    <td> 0.25
    </td>
    <td> 0.0
    </td>
    <td> 0.75
    </td>
  </tr> </tbody>
</table>
<h4 style="text-decoration: underline;">Affective State (BeamingEmotionReplica)</h4>
<p>Real time affective state recognition from EEG, GSR &amp; HRV:</p> - Valence: [-1.0 - 1.0] <br />- Arousal: [-1.0 - 1.0] <br />- Three double data types
<table cellspacing="0" border="1"> <tbody>
  <tr>
    <td> ID
    </td>
    <td> Valence
    </td>
    <td> Arousal
    </td>
    <td> misc
    </td>
  </tr>
  <tr>
    <td> affect_state
    </td>
    <td> 0.5
    </td>
    <td> -0.5
    </td>
    <td> ...
    </td>
  </tr> </tbody>
</table>
<h4 style="text-decoration: underline;">Tactile Data (BeamingTactileReplica)</h4>
<p>Technion implementation:</p> - Raknet shared object for vibration: <br /> o Duration of vibration: time in milliseconds <br /> o Intensity of vibration: [0(low) - 1(high)] <br />- Raknet shared object for temperature: <br /> o Temperature [0 (low) - 1(high)] <br />- 3 doubles
<table cellspacing="0" border="1"> <tbody>
  <tr>
    <td> ID
    </td>
    <td> Duration
    </td>
    <td> Intensity
    </td>
    <td> Temperature
    </td>
  </tr>
  <tr>
    <td> tactile
    </td>
    <td> 125
    </td>
    <td> 0.5
    </td>
    <td> 0.8
    </td>
  </tr> </tbody>
</table>
<h4 style="text-decoration: underline;">Kali-Type Robot (BeamingRobotReplica)</h4>
<p>Data provided by intention recognition module:</p> - Type of interaction (human-human(=0), human-object (=1)) <br />- Details of interaction, e.g. object type
<p> o Details contained in database (eventually coded by numbers)</p> - Free space/contact <br />- Location of interaction in global coordinate system <br />- Expected remaining time till interaction in seconds <br />- Type of interaction in contact: handshaking, touching, stroking, lifting, etc.
<table cellspacing="0" border="1"> <tbody>
  <tr>
    <td> ID
    </td>
    <td> Type
    </td>
    <td> Details
    </td>
    <td> Free space/contact
    </td>
    <td> X
    </td>
    <td> Y
    </td>
    <td> Z
    </td>
    <td> AX
    </td>
    <td> AY
    </td>
    <td> AZ
    </td>
    <td> AW
    </td>
    <td> Remaining time
    </td>
    <td> Contact interaction
    </td>
  </tr>
  <tr>
    <td> kali1
    </td>
    <td> 1
    </td>
    <td> 35
    </td>
    <td> 1
    </td>
    <td> 0.87
    </td>
    <td> 0.98
    </td>
    <td> 1.2
    </td>
    <td> 0.6
    </td>
    <td> 0.44
    </td>
    <td> 0.32
    </td>
    <td> 0.88
    </td>
    <td> 5.3
    </td>
    <td> 3
    </td>
  </tr> </tbody>
</table>
<h4 style="text-decoration: underline;">Generic Data (BeamingGenericReplica)</h4>
<p>As the needs of different partners might change over time, these data type allows sending of generic data (e.g. pointer to a struct in memory - see sampleClient):</p> - Any data: [sent as void pointer] <br />- size: [1024 Bytes]
<table cellspacing="0" border="1"> <tbody>
  <tr>
    <td> ID
    </td>
    <td> Any data
    </td>
    <td> size (in bytes)
    </td>
  </tr>
  <tr>
    <td> generic_id
    </td>
    <td> e.g. struct, class, etc.
    </td>
    <td> 1024 bytes (limit)
    </td>
   </tr> </tbody>
</table>
<p></p>
<ul>
  <li>
    <h3>Beaming Room</h3></li>
</ul> All replicas in the Room category have a host and port for dynamic scenes and a file_url for static scenes (in addition to the data types specified below).
<h4 style="text-decoration: underline;">3D Objects (BeamingObjectReplica)</h4>
<ul>
</ul> - Represents dynamic objects in the scenes such as meshes, point cloud data, etc. <br />- 7 floats and one string
<table cellspacing="0" border="1"> <tbody>
  <tr>
    <td> ID
    </td>
    <td> X
    </td>
    <td> Y
    </td>
    <td> Z
    </td>
    <td> AX
    </td>
    <td> AY
    </td>
    <td> AZ
    </td>
    <td> host
    </td>
    <td> port
    </td>
    <td> file_url
    </td>
  </tr>
  <tr>
    <td> object1
    </td>
    <td> 0.87
    </td>
    <td> 0.98
    </td>
    <td> 1.2
    </td>
    <td> 0.6
    </td>
    <td> 0.44
    </td>
    <td> 0.32
    </td>
    <td> 127.0.0.1
    </td>
    <td> 80
    </td>
    <td> http://.../
    </td>
  </tr> </tbody>
</table>
<h4 style="text-decoration: underline;">Video Source (BeamingVideoReplica)</h4>
<ul>
</ul> - Although video data is sent through separate network channels, information about the video source is published on the Beaming Scene Service. <br />- This includes a file_url for static scenes <br />- 3 integers, 1 double and 2 strings
<table cellspacing="0" border="1"><tbody>
  <tr>
    <td> ID
    </td>
    <td> width
    </td>
    <td> height
    </td>
    <td> bandwidth
    </td>
    <td> host
    </td>
    <td> port
    </td>
    <td> file_url
    </td>
  </tr>
  <tr>
    <td> video1
    </td>
    <td> 640
    </td>
    <td> 480
    </td>
    <td> 100
    </td>
    <td> 127.0.0.1
    </td>
    <td> 80
    </td>
    <td> http://../
    </td>
  </tr></tbody>
</table>
<h4 style="text-decoration: underline;">Audio Source (BeamingAudioReplica)</h4>
<ul>
</ul> - Although audio data is also sent through separate network channels, information about the audio server is published on the Beaming Scene Service. <br />- 1 integer and 3 strings
<table cellspacing="0" border="1"><tbody>
  <tr>
    <td> ID
    </td>
    <td> host
    </td>
    <td> port
    </td>
    <td> file_url
    </td>
    <td> config
    </td>
  </tr>
  <tr>
    <td> audio1
    </td>
    <td> 127.0.0.1
    </td>
    <td> 80
    </td>
    <td> http://.../
    </td>
    <td> ...
    </td>
  </tr></tbody>
</table>
<h4><span style="text-decoration: underline;">Point Cloud (BeamingPointCloudReplica)</span></h4> - Although point cloud data is sent through separate network channels, information about the source of the point cloud is published on the Beaming Scene Service. <br /> - This includes a file_url for static scenes <br /> - Size represents the number of points <br /> - 2 integers, 1 double, 1 boolean and 2 strings <br />
<table cellspacing="0" border="1"> <tbody>
  <tr>
    <td> ID
    </td>
    <td> size
    </td>
    <td> bandwidth
    </td>
    <td> RGB_flag
    </td>
    <td> host
    </td>
    <td> port
    </td>
    <td> file_url
    </td>
  </tr>
  <tr>
    <td> video1
    </td>
    <td> 10
    </td>
    <td> 100
    </td>
    <td> true/false
    </td>
    <td> 127.0.0.1
    </td>
    <td> 80
    </td>
    <td> http://../
    </td>
  </tr> </tbody>
</table> <br /><br clear="all" /> <hr size="1" width="33%" />
<p><a href="#_ftnref1" name="_ftn1"> [1] </a> See netManager directory on the Beaming svn (http://svn.beaming-eu.org)</p></body>