<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>Beaming Scene Service: netClient/client.cpp Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>

</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  <td id="projectlogo"><img alt="Logo" src="BEAMING_LOGO2.jpg"/></td>
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">Beaming Scene Service
   &#160;<span id="projectnumber">2.0</span>
   </div>
   <div id="projectbrief">RakNet wrapper for managing data communications between multiple Beaming clients</div>
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.html"><span>Related&#160;Pages</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
      <li><a href="globals.html"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('client_8cpp.html','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">netClient/client.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="client_8cpp.html">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">//Client Dll - links to RakNet</span>
<a name="l00002"></a>00002 
<a name="l00003"></a>00003 <span class="preprocessor">#include &quot;<a class="code" href="client_8h.html">client.h</a>&quot;</span>
<a name="l00004"></a>00004 <span class="preprocessor">#include &quot;<a class="code" href="_client_server_8h.html">ClientServer.h</a>&quot;</span>
<a name="l00005"></a>00005 <span class="preprocessor">#include &lt;list&gt;</span>
<a name="l00006"></a>00006 
<a name="l00007"></a>00007 <span class="keyword">class </span><a class="code" href="class_beaming_user.html" title="User Replica.">BeamingUser</a>;
<a name="l00008"></a>00008 <span class="keyword">class </span><a class="code" href="class_beaming_avatar_joint_replica.html" title="Avatar Joint Replica.">BeamingAvatarJointReplica</a>;
<a name="l00009"></a>00009 <span class="keyword">class </span><a class="code" href="class_beaming_emotion_replica.html" title="Emotion Replica - Affective State.">BeamingEmotionReplica</a>;
<a name="l00010"></a>00010 <span class="keyword">class </span><a class="code" href="class_beaming_facial_replica.html" title="Facial Replica.">BeamingFacialReplica</a>;
<a name="l00011"></a>00011 <span class="keyword">class </span><a class="code" href="class_beaming_tactile_replica.html" title="Tactile Replica.">BeamingTactileReplica</a>;
<a name="l00012"></a>00012 <span class="keyword">class </span><a class="code" href="class_beaming_robot_replica.html" title="Kali-Type Robot Replica.">BeamingRobotReplica</a>;
<a name="l00013"></a>00013 <span class="keyword">class </span><a class="code" href="class_beaming_room.html" title="Room Replica (destination)">BeamingRoom</a>;
<a name="l00014"></a>00014 <span class="keyword">class </span><a class="code" href="class_beaming_video_replica.html" title="Video Replica.">BeamingVideoReplica</a>;
<a name="l00015"></a>00015 <span class="keyword">class </span><a class="code" href="class_beaming_object_replica.html" title="Object Replica - 3D Models.">BeamingObjectReplica</a>;
<a name="l00016"></a>00016 <span class="keyword">class </span><a class="code" href="class_beaming_audio_replica.html" title="Audio Replica.">BeamingAudioReplica</a>;
<a name="l00017"></a><a class="code" href="client_8cpp.html#af53f92900705f7de3c139a05b2f9ef16">00017</a> <span class="keyword">class </span><a class="code" href="class_beaming_point_cloud_replica.html" title="Point Cloud Replica.">BeamingPointCloudReplica</a>;
<a name="l00018"></a>00018 
<a name="l00019"></a>00019 <span class="keywordtype">char</span> <a class="code" href="client_8cpp.html#af53f92900705f7de3c139a05b2f9ef16">ch</a>;
<a name="l00020"></a><a class="code" href="client_8cpp.html#ad11eee3825edfb880822f4de9c729463">00020</a> SocketDescriptor <a class="code" href="client_8cpp.html#ad11eee3825edfb880822f4de9c729463">sd</a>;
<a name="l00021"></a><a class="code" href="client_8cpp.html#a16a12de870e4a9f1aa79289cac00e6ca">00021</a> <span class="keywordtype">char</span> <a class="code" href="client_8cpp.html#a16a12de870e4a9f1aa79289cac00e6ca">ip</a>[128];
<a name="l00022"></a>00022 <span class="keyword">static</span> <span class="keywordtype">int</span> SERVER_PORT=12050;
<a name="l00023"></a><a class="code" href="client_8cpp.html#a5fab032fae4f2b00b3edac2656900211">00023</a> Packet *<a class="code" href="client_8cpp.html#a5fab032fae4f2b00b3edac2656900211">packet</a>;
<a name="l00024"></a><a class="code" href="client_8cpp.html#a7ca7752c5a3e9aa7f3cd627120ee5b95">00024</a> <span class="keywordtype">bool</span> <a class="code" href="client_8cpp.html#a7ca7752c5a3e9aa7f3cd627120ee5b95">isconnected</a>=<span class="keyword">false</span>;
<a name="l00025"></a><a class="code" href="client_8cpp.html#ab61040da97e36055a685bea4dbaf4940">00025</a> std::map&lt;std::string, BeamingDataType&gt; <a class="code" href="client_8cpp.html#ab61040da97e36055a685bea4dbaf4940">node_type_map</a>;
<a name="l00026"></a><a class="code" href="client_8cpp.html#a26c04b83680cd97853cb74a368d2d5c0">00026</a> std::map&lt;std::string, BeamingAvatarJointReplica*&gt; <a class="code" href="client_8cpp.html#a26c04b83680cd97853cb74a368d2d5c0">AvatarNodeMap</a>;
<a name="l00027"></a><a class="code" href="client_8cpp.html#a5dc06b71990b58765e14e60a6994fb98">00027</a> std::map&lt;std::string, BeamingEmotionReplica*&gt; <a class="code" href="client_8cpp.html#a5dc06b71990b58765e14e60a6994fb98">EmotionNodeMap</a>;
<a name="l00028"></a><a class="code" href="client_8cpp.html#aaab11e9a75151cb71314b42d51e49ac6">00028</a> std::map&lt;std::string, BeamingFacialReplica*&gt; <a class="code" href="client_8cpp.html#aaab11e9a75151cb71314b42d51e49ac6">FacialNodeMap</a>;
<a name="l00029"></a><a class="code" href="client_8cpp.html#af07664170ba4759be6a2806b386452d3">00029</a> std::map&lt;std::string, BeamingTactileReplica*&gt; <a class="code" href="client_8cpp.html#af07664170ba4759be6a2806b386452d3">TactileNodeMap</a>;
<a name="l00030"></a><a class="code" href="client_8cpp.html#a0b3c5ddc897beafcd9c33ba82edd19f9">00030</a> std::map&lt;std::string, BeamingRobotReplica*&gt; <a class="code" href="client_8cpp.html#a0b3c5ddc897beafcd9c33ba82edd19f9">RobotNodeMap</a>;
<a name="l00031"></a><a class="code" href="client_8cpp.html#a201c9e32dd73926d5bb73860776577a0">00031</a> std::map&lt;std::string, BeamingVideoReplica*&gt; <a class="code" href="client_8cpp.html#a201c9e32dd73926d5bb73860776577a0">VideoNodeMap</a>;
<a name="l00032"></a><a class="code" href="client_8cpp.html#ad94f11f59802daaea66d32d2a3ba2068">00032</a> std::map&lt;std::string, BeamingObjectReplica*&gt; <a class="code" href="client_8cpp.html#ad94f11f59802daaea66d32d2a3ba2068">ObjectNodeMap</a>;
<a name="l00033"></a><a class="code" href="client_8cpp.html#a91ef15fc58d1868c4935e30387a42c9d">00033</a> std::map&lt;std::string, BeamingAudioReplica*&gt; <a class="code" href="client_8cpp.html#a91ef15fc58d1868c4935e30387a42c9d">AudioNodeMap</a>;
<a name="l00034"></a><a class="code" href="client_8cpp.html#ac459c39f2e17124794aa4b2bf93743b8">00034</a> std::map&lt;std::string, BeamingPointCloudReplica*&gt; <a class="code" href="client_8cpp.html#ac459c39f2e17124794aa4b2bf93743b8">PointCloudNodeMap</a>;
<a name="l00035"></a><a class="code" href="client_8cpp.html#a4b7e347fe96bf8cd0552766ab9771a41">00035</a> std::map&lt;std::string, BeamingGenericReplica*&gt; <a class="code" href="client_8cpp.html#a4b7e347fe96bf8cd0552766ab9771a41">GenericNodeMap</a>;
<a name="l00036"></a><a class="code" href="client_8cpp.html#a52fbcee0fb12c6ccf9d042a1ec07d44f">00036</a> std::string <a class="code" href="client_8cpp.html#a52fbcee0fb12c6ccf9d042a1ec07d44f">myid</a>, <a class="code" href="client_8cpp.html#a2c2eb166cc67e18c577471bea6cf78ea">my_config</a>, <a class="code" href="client_8cpp.html#a1948ff2ffc2121aafd1cb7223a17728c">client_type</a>;
<a name="l00037"></a><a class="code" href="client_8cpp.html#a6118d7c546dddc5fa44618f15b1d96db">00037</a> <span class="keywordtype">char</span> <a class="code" href="client_8cpp.html#a6118d7c546dddc5fa44618f15b1d96db">client_name</a>[128];
<a name="l00038"></a><a class="code" href="client_8cpp.html#ab9561565dc809c4fd607d84b43952c5a">00038</a> <span class="keywordtype">bool</span> <a class="code" href="client_8cpp.html#ab9561565dc809c4fd607d84b43952c5a">viewing_only</a> = <span class="keyword">false</span>;
<a name="l00039"></a>00039 
<a name="l00041"></a><a class="code" href="client_8cpp.html#a1c6407685a5f44a533e8e7cd529583b3">00041</a> NetworkIDManager <a class="code" href="client_8cpp.html#a1c6407685a5f44a533e8e7cd529583b3" title="ReplicaManager3 requires NetworkIDManager to lookup pointers from numbers.">networkIdManager</a>;
<a name="l00043"></a><a class="code" href="client_8cpp.html#afc90d01dfaaa56f2484c5746a05c37b8">00043</a> RakPeerInterface *<a class="code" href="client_8cpp.html#afc90d01dfaaa56f2484c5746a05c37b8" title="Each application has one instance of RakPeerInterface.">rakPeer</a>;
<a name="l00045"></a><a class="code" href="client_8cpp.html#a3a150d368e1880d8c7d012ba8299eeaa">00045</a> <a class="code" href="class_replica_manager3_beaming.html" title="Created on intialisation and attached as a plugin.">ReplicaManager3Beaming</a> <a class="code" href="client_8cpp.html#a3a150d368e1880d8c7d012ba8299eeaa" title="The system that performs most of our functionality for this client.">replicaManager</a>;
<a name="l00046"></a>00046 
<a name="l00047"></a>00047 
<a name="l00048"></a>00048 <span class="preprocessor">#ifdef WIN32</span>
<a name="l00049"></a>00049 <span class="preprocessor"></span><a class="code" href="client_8h.html#acfdc053623a87a1a1d4adf03e6b6678d">CLIENT_LIB_EXPORT</a> <span class="keywordtype">int</span> <a class="code" href="client_8cpp.html#a5d8297157b67b5fffaae66ec8f7c90ff">startclient</a>(<span class="keywordtype">char</span> *server_address, <span class="keywordtype">int</span> server_port, <span class="keywordtype">char</span> *client, <span class="keywordtype">char</span> *clienttype, <span class="keywordtype">char</span> *config, <span class="keywordtype">int</span> viewer, <span class="keywordtype">int</span> reliability, <span class="keywordtype">int</span> priority, <span class="keywordtype">int</span> interval_ms )
<a name="l00050"></a>00050 <span class="preprocessor">#else</span>
<a name="l00051"></a><a class="code" href="client_8h.html#a32381ff800acb733fc2af829c6148e26">00051</a> <span class="preprocessor"></span><span class="keywordtype">int</span> <a class="code" href="client_8cpp.html#a5d8297157b67b5fffaae66ec8f7c90ff">startclient</a>(<span class="keywordtype">char</span> *server_address, <span class="keywordtype">int</span> server_port, <span class="keywordtype">char</span> *client, <span class="keywordtype">char</span> *clienttype, <span class="keywordtype">char</span> *config, <span class="keywordtype">int</span> viewer, <span class="keywordtype">int</span> reliability, <span class="keywordtype">int</span> priority, <span class="keywordtype">int</span> interval_ms)
<a name="l00052"></a>00052 <span class="preprocessor">#endif</span>
<a name="l00053"></a>00053 <span class="preprocessor"></span>{
<a name="l00054"></a>00054         strcpy(<a class="code" href="client_8cpp.html#a16a12de870e4a9f1aa79289cac00e6ca">ip</a>,server_address);
<a name="l00055"></a>00055         strcpy(<a class="code" href="client_8cpp.html#a6118d7c546dddc5fa44618f15b1d96db">client_name</a>,client);
<a name="l00056"></a>00056         SERVER_PORT = server_port;
<a name="l00057"></a>00057         <a class="code" href="client_8cpp.html#afc90d01dfaaa56f2484c5746a05c37b8" title="Each application has one instance of RakPeerInterface.">rakPeer</a> = RakNetworkFactory::GetRakPeerInterface();
<a name="l00058"></a>00058         <a class="code" href="_client_server_8h.html#ad9b4d2b6bfe35238ad017f255ce6d0a1">topology</a>=<a class="code" href="_client_server_8h.html#a06fc87d81c62e9abb8790b6e5713c55ba48e4cb37544c8e69715d45e5a83b2109">CLIENT</a>;
<a name="l00059"></a>00059         <a class="code" href="client_8cpp.html#ad11eee3825edfb880822f4de9c729463">sd</a>.port=0;
<a name="l00060"></a>00060         <span class="comment">// ObjectMemberRPC, AutoRPC for objects, and ReplicaManager3 require that you call SetNetworkIDManager()</span>
<a name="l00061"></a>00061         <a class="code" href="client_8cpp.html#afc90d01dfaaa56f2484c5746a05c37b8" title="Each application has one instance of RakPeerInterface.">rakPeer</a>-&gt;SetNetworkIDManager(&amp;<a class="code" href="client_8cpp.html#a1c6407685a5f44a533e8e7cd529583b3" title="ReplicaManager3 requires NetworkIDManager to lookup pointers from numbers.">networkIdManager</a>);
<a name="l00062"></a>00062         <span class="comment">// The network ID authority is the system that creates the common numerical identifier used to lookup pointers.</span>
<a name="l00063"></a>00063         <span class="comment">// For client/server this is the server</span>
<a name="l00064"></a>00064         <span class="comment">// For peer to peer this would be true on every system, and NETWORK_ID_SUPPORTS_PEER_TO_PEER should be defined in RakNetDefines.h</span>
<a name="l00065"></a>00065         <a class="code" href="client_8cpp.html#a1c6407685a5f44a533e8e7cd529583b3" title="ReplicaManager3 requires NetworkIDManager to lookup pointers from numbers.">networkIdManager</a>.SetIsNetworkIDAuthority(<span class="keyword">false</span>);
<a name="l00066"></a>00066 
<a name="l00067"></a>00067         <span class="comment">//set reliability and priority - see PacketPriority.h</span>
<a name="l00068"></a>00068         <span class="comment">//Note that the transmission of one of the three reliable packets types is required for the detection of lost connections. </span>
<a name="l00069"></a>00069         <span class="comment">//If you never send reliable packets you need to implement lost connection detection manually.</span>
<a name="l00070"></a>00070         replicaManager.SetDefaultPacketReliability((PacketReliability)reliability);
<a name="l00071"></a>00071         replicaManager.SetDefaultPacketPriority((PacketPriority)priority);
<a name="l00072"></a>00072         replicaManager.SetAutoSerializeInterval(interval_ms);
<a name="l00073"></a>00073         <span class="comment">//printf(&quot;%i, %i, %i\n&quot;, reliability, priority, interval_ms);</span>
<a name="l00074"></a>00074 
<a name="l00075"></a>00075         <span class="comment">// Start RakNet</span>
<a name="l00076"></a>00076         <a class="code" href="client_8cpp.html#afc90d01dfaaa56f2484c5746a05c37b8" title="Each application has one instance of RakPeerInterface.">rakPeer</a>-&gt;Startup(1,10,&amp;<a class="code" href="client_8cpp.html#ad11eee3825edfb880822f4de9c729463">sd</a>,1); <span class="comment">//isServer ? 32 : 1</span>
<a name="l00077"></a>00077         <a class="code" href="client_8cpp.html#afc90d01dfaaa56f2484c5746a05c37b8" title="Each application has one instance of RakPeerInterface.">rakPeer</a>-&gt;AttachPlugin(&amp;replicaManager);
<a name="l00078"></a>00078 
<a name="l00079"></a>00079         <a class="code" href="client_8cpp.html#afc90d01dfaaa56f2484c5746a05c37b8" title="Each application has one instance of RakPeerInterface.">rakPeer</a>-&gt;Connect(<a class="code" href="client_8cpp.html#a16a12de870e4a9f1aa79289cac00e6ca">ip</a>,SERVER_PORT,0,0,0);
<a name="l00080"></a>00080         printf(<span class="stringliteral">&quot;Connecting...\n&quot;</span>);
<a name="l00081"></a>00081         RakSleep(1000);
<a name="l00082"></a>00082         <a class="code" href="client_8cpp.html#a83f8adca24e250bfb5c9a90a35503ae9">check</a>();
<a name="l00083"></a>00083         printf(<span class="stringliteral">&quot;Client %s (%s) is %s\n&quot;</span>, client, clienttype, (<a class="code" href="client_8cpp.html#a7ca7752c5a3e9aa7f3cd627120ee5b95">isconnected</a>)?<span class="stringliteral">&quot;connected&quot;</span>:<span class="stringliteral">&quot;not connected&quot;</span>);
<a name="l00084"></a>00084 
<a name="l00085"></a>00085         <a class="code" href="client_8cpp.html#a52fbcee0fb12c6ccf9d042a1ec07d44f">myid</a> = <a class="code" href="client_8cpp.html#afc90d01dfaaa56f2484c5746a05c37b8" title="Each application has one instance of RakPeerInterface.">rakPeer</a>-&gt;GetGuidFromSystemAddress(UNASSIGNED_SYSTEM_ADDRESS).ToString();
<a name="l00086"></a>00086         <span class="keywordflow">if</span> (<a class="code" href="client_8cpp.html#a7ca7752c5a3e9aa7f3cd627120ee5b95">isconnected</a>) {
<a name="l00087"></a>00087                 printf(<span class="stringliteral">&quot;Client (%s) GUID is %s \n&quot;</span>,<a class="code" href="client_8cpp.html#a52fbcee0fb12c6ccf9d042a1ec07d44f">myid</a>.c_str(),(viewer)?<span class="stringliteral">&quot;viewer only&quot;</span>:<span class="stringliteral">&quot;bidirectional&quot;</span>);
<a name="l00088"></a>00088         }
<a name="l00089"></a>00089         <span class="comment">//set up node_type map</span>
<a name="l00090"></a>00090         node_type_map[<span class="stringliteral">&quot;AVATAR&quot;</span>]=<a class="code" href="client_8h.html#a493782fa0468226e195afc328221e1c8a2ca377302a6c9197300bb2223583ed3f">AVATAR</a>;
<a name="l00091"></a>00091         node_type_map[<span class="stringliteral">&quot;FACIAL&quot;</span>]=<a class="code" href="client_8h.html#a493782fa0468226e195afc328221e1c8afd8f7c0209742426aaf9ab7a17b1a50d">FACIAL</a>;
<a name="l00092"></a>00092         node_type_map[<span class="stringliteral">&quot;EMOTION&quot;</span>]=<a class="code" href="client_8h.html#a493782fa0468226e195afc328221e1c8a54d4a27e54eb1e49b0a92db604539946">EMOTION</a>;
<a name="l00093"></a>00093         node_type_map[<span class="stringliteral">&quot;VIDEO&quot;</span>]=<a class="code" href="client_8h.html#a493782fa0468226e195afc328221e1c8a0e1e918a80f84992ae08463f076d5dc8">VIDEO</a>;
<a name="l00094"></a>00094         node_type_map[<span class="stringliteral">&quot;TACTILE&quot;</span>]=<a class="code" href="client_8h.html#a493782fa0468226e195afc328221e1c8a173913c4fca8bf1331575054152c4ebd">TACTILE</a>;
<a name="l00095"></a>00095         node_type_map[<span class="stringliteral">&quot;ROBOT&quot;</span>]=<a class="code" href="client_8h.html#a493782fa0468226e195afc328221e1c8aabea9be20feeb2150a8ffbd68625beb4">ROBOT</a>;
<a name="l00096"></a>00096         node_type_map[<span class="stringliteral">&quot;OBJECT&quot;</span>]=<a class="code" href="client_8h.html#a493782fa0468226e195afc328221e1c8a6f78e99ade8d62ec44d30013723e6e75">OBJECT</a>;
<a name="l00097"></a>00097         node_type_map[<span class="stringliteral">&quot;AUDIO&quot;</span>]=<a class="code" href="client_8h.html#a493782fa0468226e195afc328221e1c8ad45d481f1c1a6029ce6a398e52e53bfd">AUDIO</a>;
<a name="l00098"></a>00098         node_type_map[<span class="stringliteral">&quot;POINTCLOUD&quot;</span>]=<a class="code" href="client_8h.html#a493782fa0468226e195afc328221e1c8ab2e3d2c10bc4d3eef3a542bf6b01c0a2">POINTCLOUD</a>;
<a name="l00099"></a>00099         node_type_map[<span class="stringliteral">&quot;GENERIC&quot;</span>]=<a class="code" href="client_8h.html#a493782fa0468226e195afc328221e1c8a9e022e6380da28dd73210ed34b137c36">GENERIC</a>;
<a name="l00100"></a>00100         <a class="code" href="client_8cpp.html#a2c2eb166cc67e18c577471bea6cf78ea">my_config</a> = config;
<a name="l00101"></a>00101         <a class="code" href="client_8cpp.html#a1948ff2ffc2121aafd1cb7223a17728c">client_type</a> = clienttype;
<a name="l00102"></a>00102         <span class="keywordflow">if</span>(viewer)
<a name="l00103"></a>00103                 <a class="code" href="client_8cpp.html#ab9561565dc809c4fd607d84b43952c5a">viewing_only</a> = <span class="keyword">true</span>;
<a name="l00104"></a>00104         <span class="keywordflow">return</span> <a class="code" href="client_8cpp.html#a7ca7752c5a3e9aa7f3cd627120ee5b95">isconnected</a>;
<a name="l00105"></a>00105 }
<a name="l00106"></a>00106 
<a name="l00107"></a>00107 
<a name="l00108"></a>00108 <span class="preprocessor">#ifdef WIN32</span>
<a name="l00109"></a>00109 <span class="preprocessor"></span><a class="code" href="client_8h.html#acfdc053623a87a1a1d4adf03e6b6678d">CLIENT_LIB_EXPORT</a> <span class="keywordtype">void</span> <a class="code" href="client_8cpp.html#a83f8adca24e250bfb5c9a90a35503ae9">check</a>()
<a name="l00110"></a>00110 <span class="preprocessor">#else</span>
<a name="l00111"></a><a class="code" href="client_8h.html#a2dd609be5d518e51092c185b77fefa90">00111</a> <span class="preprocessor"></span><span class="keywordtype">void</span> <a class="code" href="client_8cpp.html#a83f8adca24e250bfb5c9a90a35503ae9">check</a>()
<a name="l00112"></a>00112 <span class="preprocessor">#endif</span>
<a name="l00113"></a>00113 <span class="preprocessor"></span>{
<a name="l00114"></a>00114         <span class="keywordflow">for</span> (<a class="code" href="client_8cpp.html#a5fab032fae4f2b00b3edac2656900211">packet</a> = <a class="code" href="client_8cpp.html#afc90d01dfaaa56f2484c5746a05c37b8" title="Each application has one instance of RakPeerInterface.">rakPeer</a>-&gt;Receive(); <a class="code" href="client_8cpp.html#a5fab032fae4f2b00b3edac2656900211">packet</a>; <a class="code" href="client_8cpp.html#afc90d01dfaaa56f2484c5746a05c37b8" title="Each application has one instance of RakPeerInterface.">rakPeer</a>-&gt;DeallocatePacket(<a class="code" href="client_8cpp.html#a5fab032fae4f2b00b3edac2656900211">packet</a>), <a class="code" href="client_8cpp.html#a5fab032fae4f2b00b3edac2656900211">packet</a> = <a class="code" href="client_8cpp.html#afc90d01dfaaa56f2484c5746a05c37b8" title="Each application has one instance of RakPeerInterface.">rakPeer</a>-&gt;Receive())
<a name="l00115"></a>00115         {
<a name="l00116"></a>00116                 <span class="keywordflow">switch</span> (<a class="code" href="client_8cpp.html#a5fab032fae4f2b00b3edac2656900211">packet</a>-&gt;data[0])
<a name="l00117"></a>00117                 {
<a name="l00118"></a>00118                 <span class="keywordflow">case</span> ID_CONNECTION_ATTEMPT_FAILED:
<a name="l00119"></a>00119                         printf(<span class="stringliteral">&quot;ID_CONNECTION_ATTEMPT_FAILED\n&quot;</span>);
<a name="l00120"></a>00120                         <span class="keywordflow">break</span>;
<a name="l00121"></a>00121                 <span class="keywordflow">case</span> ID_NO_FREE_INCOMING_CONNECTIONS:
<a name="l00122"></a>00122                         printf(<span class="stringliteral">&quot;ID_NO_FREE_INCOMING_CONNECTIONS\n&quot;</span>);
<a name="l00123"></a>00123                         <span class="keywordflow">break</span>;
<a name="l00124"></a>00124                 <span class="keywordflow">case</span> ID_CONNECTION_REQUEST_ACCEPTED:
<a name="l00125"></a>00125                         printf(<span class="stringliteral">&quot;ID_CONNECTION_REQUEST_ACCEPTED\n&quot;</span>);
<a name="l00126"></a>00126                         <a class="code" href="client_8cpp.html#a7ca7752c5a3e9aa7f3cd627120ee5b95">isconnected</a>=<span class="keyword">true</span>;
<a name="l00127"></a>00127                         <span class="keywordflow">break</span>;
<a name="l00128"></a>00128                 <span class="keywordflow">case</span> ID_NEW_INCOMING_CONNECTION:
<a name="l00129"></a>00129                         printf(<span class="stringliteral">&quot;ID_NEW_INCOMING_CONNECTION from %s\n&quot;</span>, <a class="code" href="client_8cpp.html#a5fab032fae4f2b00b3edac2656900211">packet</a>-&gt;systemAddress.ToString());
<a name="l00130"></a>00130                         <span class="keywordflow">break</span>;
<a name="l00131"></a>00131                 <span class="keywordflow">case</span> ID_DISCONNECTION_NOTIFICATION:
<a name="l00132"></a>00132                         printf(<span class="stringliteral">&quot;ID_DISCONNECTION_NOTIFICATION\n&quot;</span>);
<a name="l00133"></a>00133                         <span class="keywordflow">break</span>;
<a name="l00134"></a>00134                 <span class="keywordflow">case</span> ID_CONNECTION_LOST:
<a name="l00135"></a>00135                         printf(<span class="stringliteral">&quot;ID_CONNECTION_LOST\n&quot;</span>);
<a name="l00136"></a>00136                         printf(<span class="stringliteral">&quot;Attempting reconnection ...\n&quot;</span>);
<a name="l00137"></a>00137                         <a class="code" href="client_8cpp.html#afc90d01dfaaa56f2484c5746a05c37b8" title="Each application has one instance of RakPeerInterface.">rakPeer</a>-&gt;Connect(<a class="code" href="client_8cpp.html#a16a12de870e4a9f1aa79289cac00e6ca">ip</a>,SERVER_PORT,0,0,0);
<a name="l00138"></a>00138                         printf(<span class="stringliteral">&quot;Connecting...\n&quot;</span>);
<a name="l00139"></a>00139                         RakSleep(1000);
<a name="l00140"></a>00140                         <span class="keywordflow">break</span>;
<a name="l00141"></a>00141                 }
<a name="l00142"></a>00142         }
<a name="l00143"></a>00143         <span class="comment">//timeBeginPeriod(1);</span>
<a name="l00144"></a>00144 
<a name="l00145"></a>00145         RakSleep(1);
<a name="l00146"></a>00146 }
<a name="l00147"></a>00147 
<a name="l00148"></a>00148 <span class="preprocessor">#ifdef WIN32</span>
<a name="l00149"></a>00149 <span class="preprocessor"></span><a class="code" href="client_8h.html#acfdc053623a87a1a1d4adf03e6b6678d">CLIENT_LIB_EXPORT</a> <span class="keywordtype">void</span> <a class="code" href="client_8cpp.html#ae9a1f6def4090b30fab489c582061c13">createNode</a>(<span class="keywordtype">char</span> *<span class="keywordtype">id</span>)
<a name="l00150"></a>00150 <span class="preprocessor">#else</span>
<a name="l00151"></a><a class="code" href="client_8h.html#ad53bdc00b6536a8370c610dc9fd5f8ac">00151</a> <span class="preprocessor"></span><span class="keywordtype">void</span> <a class="code" href="client_8cpp.html#ae9a1f6def4090b30fab489c582061c13">createNode</a>(<span class="keywordtype">char</span> *<span class="keywordtype">id</span>)
<a name="l00152"></a>00152 <span class="preprocessor">#endif</span>
<a name="l00153"></a>00153 <span class="preprocessor"></span>{
<a name="l00154"></a>00154         <span class="keywordflow">if</span> (<a class="code" href="client_8cpp.html#ab9561565dc809c4fd607d84b43952c5a">viewing_only</a>) <span class="keywordflow">return</span>;
<a name="l00155"></a>00155         <a class="code" href="client_8cpp.html#a5d8f1002952639c6e140599d96c6cb03">addNode</a>(<span class="keywordtype">id</span>,<span class="stringliteral">&quot;AVATAR&quot;</span>);
<a name="l00156"></a>00156 }
<a name="l00157"></a>00157 
<a name="l00158"></a>00158 
<a name="l00159"></a>00159 <span class="preprocessor">#ifdef WIN32</span>
<a name="l00160"></a>00160 <span class="preprocessor"></span><a class="code" href="client_8h.html#acfdc053623a87a1a1d4adf03e6b6678d">CLIENT_LIB_EXPORT</a> <span class="keywordtype">int</span> <a class="code" href="client_8cpp.html#a5364594f37cc7c791454572fb81af6e3">addRocketBoxAvatar</a>(<span class="keywordtype">char</span> *avatar_id, <span class="keywordtype">char</span> *avatar_cfg)
<a name="l00161"></a>00161 <span class="preprocessor">#else</span>
<a name="l00162"></a><a class="code" href="client_8h.html#af252504739a7b4002b2d3b3116d49e5b">00162</a> <span class="preprocessor"></span><span class="keywordtype">int</span> <a class="code" href="client_8cpp.html#a5364594f37cc7c791454572fb81af6e3">addRocketBoxAvatar</a>(<span class="keywordtype">char</span> *avatar_id, <span class="keywordtype">char</span> *avatar_cfg)
<a name="l00163"></a>00163 <span class="preprocessor">#endif</span>
<a name="l00164"></a>00164 <span class="preprocessor"></span>{
<a name="l00165"></a>00165         <span class="keywordflow">if</span> (<a class="code" href="client_8cpp.html#ab9561565dc809c4fd607d84b43952c5a">viewing_only</a>) <span class="keywordflow">return</span> 0;
<a name="l00166"></a>00166         <span class="keywordtype">char</span> id1[128];
<a name="l00167"></a>00167         <span class="keywordtype">char</span> id2[128];
<a name="l00168"></a>00168         sprintf(id1,<span class="stringliteral">&quot;%s0&quot;</span>,avatar_id); 
<a name="l00169"></a>00169         <span class="keywordflow">if</span> (AvatarNodeMap.find(id1) != AvatarNodeMap.end()) <span class="comment">//if id exists in node database</span>
<a name="l00170"></a>00170         {
<a name="l00171"></a>00171                 printf(<span class="stringliteral">&quot;An avatar with the same id already exists\n&quot;</span>);
<a name="l00172"></a>00172                 <span class="keywordflow">return</span> 0;
<a name="l00173"></a>00173         }
<a name="l00174"></a>00174         sprintf(id1,<span class="stringliteral">&quot;%s0&quot;</span>,avatar_id); <a class="code" href="client_8cpp.html#a5d8f1002952639c6e140599d96c6cb03">addNode</a>(id1,<span class="stringliteral">&quot;AVATAR&quot;</span>); <a class="code" href="client_8cpp.html#ae15fcf054a549f9e21198caf4498d4bb">updateAvatarNodes</a>(id1,0,-1.18448e-015,-2.70976e-008,0,0.707106,-3.09086e-008,0.707107); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#a7fdd491265053b6744ce2d0771018a5c">clientConfig</a>,avatar_cfg); strcpy(AvatarNodeMap[id1]-&gt;avatarjoint_id,<span class="stringliteral">&quot;0&quot;</span>); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#ad70622a475a88e7a9197d381c83d0c4d">clientname</a>,avatar_id);
<a name="l00175"></a>00175         sprintf(id1,<span class="stringliteral">&quot;%s1&quot;</span>,avatar_id); sprintf(id2,<span class="stringliteral">&quot;%s0&quot;</span>,avatar_id); <a class="code" href="client_8cpp.html#a22c9da6b0628be924a14bbf8a7355a86">addChildNode</a>(id1,id2,<span class="stringliteral">&quot;AVATAR&quot;</span>); <a class="code" href="client_8cpp.html#ae15fcf054a549f9e21198caf4498d4bb">updateAvatarNodes</a>(id1,0,-0.897348,3.92243e-008,0,-0.707106,3.09086e-008,0.707107); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#a7fdd491265053b6744ce2d0771018a5c">clientConfig</a>,avatar_cfg); strcpy(AvatarNodeMap[id1]-&gt;avatarjoint_id,<span class="stringliteral">&quot;1&quot;</span>); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#ad70622a475a88e7a9197d381c83d0c4d">clientname</a>,avatar_id);
<a name="l00176"></a>00176         sprintf(id1,<span class="stringliteral">&quot;%s2&quot;</span>,avatar_id); sprintf(id2,<span class="stringliteral">&quot;%s0&quot;</span>,avatar_id); <a class="code" href="client_8cpp.html#a22c9da6b0628be924a14bbf8a7355a86">addChildNode</a>(id1,id2,<span class="stringliteral">&quot;AVATAR&quot;</span>); <a class="code" href="client_8cpp.html#ae15fcf054a549f9e21198caf4498d4bb">updateAvatarNodes</a>(id1,0,0,0,0.499999,0.5,-0.5,0.500001); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#a7fdd491265053b6744ce2d0771018a5c">clientConfig</a>,avatar_cfg); strcpy(AvatarNodeMap[id1]-&gt;avatarjoint_id,<span class="stringliteral">&quot;2&quot;</span>); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#ad70622a475a88e7a9197d381c83d0c4d">clientname</a>,avatar_id);
<a name="l00177"></a>00177         sprintf(id1,<span class="stringliteral">&quot;%s3&quot;</span>,avatar_id); sprintf(id2,<span class="stringliteral">&quot;%s2&quot;</span>,avatar_id); <a class="code" href="client_8cpp.html#a22c9da6b0628be924a14bbf8a7355a86">addChildNode</a>(id1,id2,<span class="stringliteral">&quot;AVATAR&quot;</span>); <a class="code" href="client_8cpp.html#ae15fcf054a549f9e21198caf4498d4bb">updateAvatarNodes</a>(id1,0.120265,1.66875e-007,0.00162871,7.39912e-007,-2.04582e-008,-7.15256e-007,1); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#a7fdd491265053b6744ce2d0771018a5c">clientConfig</a>,avatar_cfg); strcpy(AvatarNodeMap[id1]-&gt;avatarjoint_id,<span class="stringliteral">&quot;3&quot;</span>); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#ad70622a475a88e7a9197d381c83d0c4d">clientname</a>,avatar_id);
<a name="l00178"></a>00178         sprintf(id1,<span class="stringliteral">&quot;%s4&quot;</span>,avatar_id); sprintf(id2,<span class="stringliteral">&quot;%s3&quot;</span>,avatar_id); <a class="code" href="client_8cpp.html#a22c9da6b0628be924a14bbf8a7355a86">addChildNode</a>(id1,id2,<span class="stringliteral">&quot;AVATAR&quot;</span>); <a class="code" href="client_8cpp.html#ae15fcf054a549f9e21198caf4498d4bb">updateAvatarNodes</a>(id1,0.153172,-9.10502e-009,0.000121967,-1.55036e-006,-2.79393e-009,-2.98024e-008,1); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#a7fdd491265053b6744ce2d0771018a5c">clientConfig</a>,avatar_cfg); strcpy(AvatarNodeMap[id1]-&gt;avatarjoint_id,<span class="stringliteral">&quot;4&quot;</span>); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#ad70622a475a88e7a9197d381c83d0c4d">clientname</a>,avatar_id);
<a name="l00179"></a>00179         sprintf(id1,<span class="stringliteral">&quot;%s5&quot;</span>,avatar_id); sprintf(id2,<span class="stringliteral">&quot;%s4&quot;</span>,avatar_id); <a class="code" href="client_8cpp.html#a22c9da6b0628be924a14bbf8a7355a86">addChildNode</a>(id1,id2,<span class="stringliteral">&quot;AVATAR&quot;</span>); <a class="code" href="client_8cpp.html#ae15fcf054a549f9e21198caf4498d4bb">updateAvatarNodes</a>(id1,0.153172,7.48332e-009,0.000121967,1.22113e-006,4.56349e-008,7.45057e-008,1); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#a7fdd491265053b6744ce2d0771018a5c">clientConfig</a>,avatar_cfg); strcpy(AvatarNodeMap[id1]-&gt;avatarjoint_id,<span class="stringliteral">&quot;5&quot;</span>); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#ad70622a475a88e7a9197d381c83d0c4d">clientname</a>,avatar_id);
<a name="l00180"></a>00180         sprintf(id1,<span class="stringliteral">&quot;%s6&quot;</span>,avatar_id); sprintf(id2,<span class="stringliteral">&quot;%s5&quot;</span>,avatar_id); <a class="code" href="client_8cpp.html#a22c9da6b0628be924a14bbf8a7355a86">addChildNode</a>(id1,id2,<span class="stringliteral">&quot;AVATAR&quot;</span>); <a class="code" href="client_8cpp.html#ae15fcf054a549f9e21198caf4498d4bb">updateAvatarNodes</a>(id1,0.199124,2.79132e-008,-0.0156307,1.39536e-007,4.39412e-013,4.61936e-007,1); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#a7fdd491265053b6744ce2d0771018a5c">clientConfig</a>,avatar_cfg); strcpy(AvatarNodeMap[id1]-&gt;avatarjoint_id,<span class="stringliteral">&quot;6&quot;</span>); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#ad70622a475a88e7a9197d381c83d0c4d">clientname</a>,avatar_id);
<a name="l00181"></a>00181         sprintf(id1,<span class="stringliteral">&quot;%s7&quot;</span>,avatar_id); sprintf(id2,<span class="stringliteral">&quot;%s6&quot;</span>,avatar_id); <a class="code" href="client_8cpp.html#a22c9da6b0628be924a14bbf8a7355a86">addChildNode</a>(id1,id2,<span class="stringliteral">&quot;AVATAR&quot;</span>); <a class="code" href="client_8cpp.html#ae15fcf054a549f9e21198caf4498d4bb">updateAvatarNodes</a>(id1,0.069177,-3.00309e-006,-1.07102e-006,1.55691e-006,-0.0758123,-5.73888e-007,0.997122); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#a7fdd491265053b6744ce2d0771018a5c">clientConfig</a>,avatar_cfg); strcpy(AvatarNodeMap[id1]-&gt;avatarjoint_id,<span class="stringliteral">&quot;7&quot;</span>); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#ad70622a475a88e7a9197d381c83d0c4d">clientname</a>,avatar_id);
<a name="l00182"></a>00182         sprintf(id1,<span class="stringliteral">&quot;%s8&quot;</span>,avatar_id); sprintf(id2,<span class="stringliteral">&quot;%s7&quot;</span>,avatar_id); <a class="code" href="client_8cpp.html#a22c9da6b0628be924a14bbf8a7355a86">addChildNode</a>(id1,id2,<span class="stringliteral">&quot;AVATAR&quot;</span>); <a class="code" href="client_8cpp.html#ae15fcf054a549f9e21198caf4498d4bb">updateAvatarNodes</a>(id1,0.207666,-1.2034e-008,5.26022e-016,0,0,0,1); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#a7fdd491265053b6744ce2d0771018a5c">clientConfig</a>,avatar_cfg); strcpy(AvatarNodeMap[id1]-&gt;avatarjoint_id,<span class="stringliteral">&quot;8&quot;</span>); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#ad70622a475a88e7a9197d381c83d0c4d">clientname</a>,avatar_id);
<a name="l00183"></a>00183         sprintf(id1,<span class="stringliteral">&quot;%s9&quot;</span>,avatar_id); sprintf(id2,<span class="stringliteral">&quot;%s7&quot;</span>,avatar_id); <a class="code" href="client_8cpp.html#a22c9da6b0628be924a14bbf8a7355a86">addChildNode</a>(id1,id2,<span class="stringliteral">&quot;AVATAR&quot;</span>); <a class="code" href="client_8cpp.html#ae15fcf054a549f9e21198caf4498d4bb">updateAvatarNodes</a>(id1,0.110821,-0.0318851,-0.0699177,-6.49591e-006,-0.651464,4.80961e-006,0.758679); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#a7fdd491265053b6744ce2d0771018a5c">clientConfig</a>,avatar_cfg); strcpy(AvatarNodeMap[id1]-&gt;avatarjoint_id,<span class="stringliteral">&quot;9&quot;</span>); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#ad70622a475a88e7a9197d381c83d0c4d">clientname</a>,avatar_id);
<a name="l00184"></a>00184         sprintf(id1,<span class="stringliteral">&quot;%s10&quot;</span>,avatar_id); sprintf(id2,<span class="stringliteral">&quot;%s9&quot;</span>,avatar_id); <a class="code" href="client_8cpp.html#a22c9da6b0628be924a14bbf8a7355a86">addChildNode</a>(id1,id2,<span class="stringliteral">&quot;AVATAR&quot;</span>); <a class="code" href="client_8cpp.html#ae15fcf054a549f9e21198caf4498d4bb">updateAvatarNodes</a>(id1,0.0250902,0,0,0.707388,9.59679e-007,-0.706825,9.37676e-007); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#a7fdd491265053b6744ce2d0771018a5c">clientConfig</a>,avatar_cfg); strcpy(AvatarNodeMap[id1]-&gt;avatarjoint_id,<span class="stringliteral">&quot;10&quot;</span>); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#ad70622a475a88e7a9197d381c83d0c4d">clientname</a>,avatar_id);
<a name="l00185"></a>00185         sprintf(id1,<span class="stringliteral">&quot;%s11&quot;</span>,avatar_id); sprintf(id2,<span class="stringliteral">&quot;%s7&quot;</span>,avatar_id); <a class="code" href="client_8cpp.html#a22c9da6b0628be924a14bbf8a7355a86">addChildNode</a>(id1,id2,<span class="stringliteral">&quot;AVATAR&quot;</span>); <a class="code" href="client_8cpp.html#ae15fcf054a549f9e21198caf4498d4bb">updateAvatarNodes</a>(id1,0.110821,0.0318855,-0.0699175,6.47779e-006,-0.651464,-8.29754e-006,0.758679); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#a7fdd491265053b6744ce2d0771018a5c">clientConfig</a>,avatar_cfg); strcpy(AvatarNodeMap[id1]-&gt;avatarjoint_id,<span class="stringliteral">&quot;11&quot;</span>); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#ad70622a475a88e7a9197d381c83d0c4d">clientname</a>,avatar_id);
<a name="l00186"></a>00186         sprintf(id1,<span class="stringliteral">&quot;%s12&quot;</span>,avatar_id); sprintf(id2,<span class="stringliteral">&quot;%s11&quot;</span>,avatar_id); <a class="code" href="client_8cpp.html#a22c9da6b0628be924a14bbf8a7355a86">addChildNode</a>(id1,id2,<span class="stringliteral">&quot;AVATAR&quot;</span>); <a class="code" href="client_8cpp.html#ae15fcf054a549f9e21198caf4498d4bb">updateAvatarNodes</a>(id1,0.0250902,0,0,0.707388,9.36822e-007,-0.706825,9.80782e-007); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#a7fdd491265053b6744ce2d0771018a5c">clientConfig</a>,avatar_cfg); strcpy(AvatarNodeMap[id1]-&gt;avatarjoint_id,<span class="stringliteral">&quot;12&quot;</span>); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#ad70622a475a88e7a9197d381c83d0c4d">clientname</a>,avatar_id);
<a name="l00187"></a>00187         sprintf(id1,<span class="stringliteral">&quot;%s13&quot;</span>,avatar_id); sprintf(id2,<span class="stringliteral">&quot;%s7&quot;</span>,avatar_id); <a class="code" href="client_8cpp.html#a22c9da6b0628be924a14bbf8a7355a86">addChildNode</a>(id1,id2,<span class="stringliteral">&quot;AVATAR&quot;</span>); <a class="code" href="client_8cpp.html#ae15fcf054a549f9e21198caf4498d4bb">updateAvatarNodes</a>(id1,0.0328945,1.326e-008,-0.0124002,-0.00120468,-0.764102,-0.00426142,0.64508); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#a7fdd491265053b6744ce2d0771018a5c">clientConfig</a>,avatar_cfg); strcpy(AvatarNodeMap[id1]-&gt;avatarjoint_id,<span class="stringliteral">&quot;13&quot;</span>); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#ad70622a475a88e7a9197d381c83d0c4d">clientname</a>,avatar_id);
<a name="l00188"></a>00188         sprintf(id1,<span class="stringliteral">&quot;%s14&quot;</span>,avatar_id); sprintf(id2,<span class="stringliteral">&quot;%s13&quot;</span>,avatar_id); <a class="code" href="client_8cpp.html#a22c9da6b0628be924a14bbf8a7355a86">addChildNode</a>(id1,id2,<span class="stringliteral">&quot;AVATAR&quot;</span>); <a class="code" href="client_8cpp.html#ae15fcf054a549f9e21198caf4498d4bb">updateAvatarNodes</a>(id1,0.149929,-9.31325e-010,-5.96046e-008,0.707388,9.85348e-007,-0.706825,9.66667e-007); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#a7fdd491265053b6744ce2d0771018a5c">clientConfig</a>,avatar_cfg); strcpy(AvatarNodeMap[id1]-&gt;avatarjoint_id,<span class="stringliteral">&quot;14&quot;</span>); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#ad70622a475a88e7a9197d381c83d0c4d">clientname</a>,avatar_id);
<a name="l00189"></a>00189         sprintf(id1,<span class="stringliteral">&quot;%s15&quot;</span>,avatar_id); sprintf(id2,<span class="stringliteral">&quot;%s13&quot;</span>,avatar_id); <a class="code" href="client_8cpp.html#a22c9da6b0628be924a14bbf8a7355a86">addChildNode</a>(id1,id2,<span class="stringliteral">&quot;AVATAR&quot;</span>); <a class="code" href="client_8cpp.html#ae15fcf054a549f9e21198caf4498d4bb">updateAvatarNodes</a>(id1,0.10554,-0.000890068,0.023332,8.28424e-007,0.173648,1.9523e-006,0.984808); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#a7fdd491265053b6744ce2d0771018a5c">clientConfig</a>,avatar_cfg); strcpy(AvatarNodeMap[id1]-&gt;avatarjoint_id,<span class="stringliteral">&quot;15&quot;</span>); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#ad70622a475a88e7a9197d381c83d0c4d">clientname</a>,avatar_id);
<a name="l00190"></a>00190         sprintf(id1,<span class="stringliteral">&quot;%s16&quot;</span>,avatar_id); sprintf(id2,<span class="stringliteral">&quot;%s15&quot;</span>,avatar_id); <a class="code" href="client_8cpp.html#a22c9da6b0628be924a14bbf8a7355a86">addChildNode</a>(id1,id2,<span class="stringliteral">&quot;AVATAR&quot;</span>); <a class="code" href="client_8cpp.html#ae15fcf054a549f9e21198caf4498d4bb">updateAvatarNodes</a>(id1,0.0174011,-7.21775e-009,5.96046e-008,0.707388,9.51017e-007,-0.706825,1.02989e-006); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#a7fdd491265053b6744ce2d0771018a5c">clientConfig</a>,avatar_cfg); strcpy(AvatarNodeMap[id1]-&gt;avatarjoint_id,<span class="stringliteral">&quot;16&quot;</span>); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#ad70622a475a88e7a9197d381c83d0c4d">clientname</a>,avatar_id);
<a name="l00191"></a>00191         sprintf(id1,<span class="stringliteral">&quot;%s17&quot;</span>,avatar_id); sprintf(id2,<span class="stringliteral">&quot;%s13&quot;</span>,avatar_id); <a class="code" href="client_8cpp.html#a22c9da6b0628be924a14bbf8a7355a86">addChildNode</a>(id1,id2,<span class="stringliteral">&quot;AVATAR&quot;</span>); <a class="code" href="client_8cpp.html#ae15fcf054a549f9e21198caf4498d4bb">updateAvatarNodes</a>(id1,0.0725112,0.000609742,0.0156659,-0.00303031,0.175704,0.0133431,0.984348); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#a7fdd491265053b6744ce2d0771018a5c">clientConfig</a>,avatar_cfg); strcpy(AvatarNodeMap[id1]-&gt;avatarjoint_id,<span class="stringliteral">&quot;17&quot;</span>); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#ad70622a475a88e7a9197d381c83d0c4d">clientname</a>,avatar_id);
<a name="l00192"></a>00192         sprintf(id1,<span class="stringliteral">&quot;%s18&quot;</span>,avatar_id); sprintf(id2,<span class="stringliteral">&quot;%s17&quot;</span>,avatar_id); <a class="code" href="client_8cpp.html#a22c9da6b0628be924a14bbf8a7355a86">addChildNode</a>(id1,id2,<span class="stringliteral">&quot;AVATAR&quot;</span>); <a class="code" href="client_8cpp.html#ae15fcf054a549f9e21198caf4498d4bb">updateAvatarNodes</a>(id1,0.0225375,6.98492e-010,-3.05321e-017,0.707388,9.18663e-007,-0.706825,9.91247e-007); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#a7fdd491265053b6744ce2d0771018a5c">clientConfig</a>,avatar_cfg); strcpy(AvatarNodeMap[id1]-&gt;avatarjoint_id,<span class="stringliteral">&quot;18&quot;</span>); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#ad70622a475a88e7a9197d381c83d0c4d">clientname</a>,avatar_id);
<a name="l00193"></a>00193         sprintf(id1,<span class="stringliteral">&quot;%s19&quot;</span>,avatar_id); sprintf(id2,<span class="stringliteral">&quot;%s13&quot;</span>,avatar_id); <a class="code" href="client_8cpp.html#a22c9da6b0628be924a14bbf8a7355a86">addChildNode</a>(id1,id2,<span class="stringliteral">&quot;AVATAR&quot;</span>); <a class="code" href="client_8cpp.html#ae15fcf054a549f9e21198caf4498d4bb">updateAvatarNodes</a>(id1,0.103353,0.0130727,0.0243573,0.0383811,0.169407,-0.216065,0.960804); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#a7fdd491265053b6744ce2d0771018a5c">clientConfig</a>,avatar_cfg); strcpy(AvatarNodeMap[id1]-&gt;avatarjoint_id,<span class="stringliteral">&quot;19&quot;</span>); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#ad70622a475a88e7a9197d381c83d0c4d">clientname</a>,avatar_id);
<a name="l00194"></a>00194         sprintf(id1,<span class="stringliteral">&quot;%s20&quot;</span>,avatar_id); sprintf(id2,<span class="stringliteral">&quot;%s19&quot;</span>,avatar_id); <a class="code" href="client_8cpp.html#a22c9da6b0628be924a14bbf8a7355a86">addChildNode</a>(id1,id2,<span class="stringliteral">&quot;AVATAR&quot;</span>); <a class="code" href="client_8cpp.html#ae15fcf054a549f9e21198caf4498d4bb">updateAvatarNodes</a>(id1,0.0101238,3.72529e-009,-1.62838e-016,0.707388,9.87662e-007,-0.706825,9.60084e-007); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#a7fdd491265053b6744ce2d0771018a5c">clientConfig</a>,avatar_cfg); strcpy(AvatarNodeMap[id1]-&gt;avatarjoint_id,<span class="stringliteral">&quot;20&quot;</span>); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#ad70622a475a88e7a9197d381c83d0c4d">clientname</a>,avatar_id);
<a name="l00195"></a>00195         sprintf(id1,<span class="stringliteral">&quot;%s21&quot;</span>,avatar_id); sprintf(id2,<span class="stringliteral">&quot;%s13&quot;</span>,avatar_id); <a class="code" href="client_8cpp.html#a22c9da6b0628be924a14bbf8a7355a86">addChildNode</a>(id1,id2,<span class="stringliteral">&quot;AVATAR&quot;</span>); <a class="code" href="client_8cpp.html#ae15fcf054a549f9e21198caf4498d4bb">updateAvatarNodes</a>(id1,0.10315,-0.014825,0.0242156,-0.0382873,0.169427,0.215535,0.960923); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#a7fdd491265053b6744ce2d0771018a5c">clientConfig</a>,avatar_cfg); strcpy(AvatarNodeMap[id1]-&gt;avatarjoint_id,<span class="stringliteral">&quot;21&quot;</span>); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#ad70622a475a88e7a9197d381c83d0c4d">clientname</a>,avatar_id);
<a name="l00196"></a>00196         sprintf(id1,<span class="stringliteral">&quot;%s22&quot;</span>,avatar_id); sprintf(id2,<span class="stringliteral">&quot;%s21&quot;</span>,avatar_id); <a class="code" href="client_8cpp.html#a22c9da6b0628be924a14bbf8a7355a86">addChildNode</a>(id1,id2,<span class="stringliteral">&quot;AVATAR&quot;</span>); <a class="code" href="client_8cpp.html#ae15fcf054a549f9e21198caf4498d4bb">updateAvatarNodes</a>(id1,0.0101238,-7.45058e-009,5.96046e-008,0.707388,9.48031e-007,-0.706825,9.16134e-007); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#a7fdd491265053b6744ce2d0771018a5c">clientConfig</a>,avatar_cfg); strcpy(AvatarNodeMap[id1]-&gt;avatarjoint_id,<span class="stringliteral">&quot;22&quot;</span>); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#ad70622a475a88e7a9197d381c83d0c4d">clientname</a>,avatar_id);
<a name="l00197"></a>00197         sprintf(id1,<span class="stringliteral">&quot;%s23&quot;</span>,avatar_id); sprintf(id2,<span class="stringliteral">&quot;%s7&quot;</span>,avatar_id); <a class="code" href="client_8cpp.html#a22c9da6b0628be924a14bbf8a7355a86">addChildNode</a>(id1,id2,<span class="stringliteral">&quot;AVATAR&quot;</span>); <a class="code" href="client_8cpp.html#ae15fcf054a549f9e21198caf4498d4bb">updateAvatarNodes</a>(id1,0.0458031,-0.0571939,-0.0772107,0.258198,-0.681405,0.282449,0.623894); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#a7fdd491265053b6744ce2d0771018a5c">clientConfig</a>,avatar_cfg); strcpy(AvatarNodeMap[id1]-&gt;avatarjoint_id,<span class="stringliteral">&quot;23&quot;</span>); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#ad70622a475a88e7a9197d381c83d0c4d">clientname</a>,avatar_id);
<a name="l00198"></a>00198         sprintf(id1,<span class="stringliteral">&quot;%s24&quot;</span>,avatar_id); sprintf(id2,<span class="stringliteral">&quot;%s23&quot;</span>,avatar_id); <a class="code" href="client_8cpp.html#a22c9da6b0628be924a14bbf8a7355a86">addChildNode</a>(id1,id2,<span class="stringliteral">&quot;AVATAR&quot;</span>); <a class="code" href="client_8cpp.html#ae15fcf054a549f9e21198caf4498d4bb">updateAvatarNodes</a>(id1,0.0189569,0,0,0.707388,9.60477e-007,-0.706825,1.021e-006); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#a7fdd491265053b6744ce2d0771018a5c">clientConfig</a>,avatar_cfg); strcpy(AvatarNodeMap[id1]-&gt;avatarjoint_id,<span class="stringliteral">&quot;24&quot;</span>); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#ad70622a475a88e7a9197d381c83d0c4d">clientname</a>,avatar_id);
<a name="l00199"></a>00199         sprintf(id1,<span class="stringliteral">&quot;%s25&quot;</span>,avatar_id); sprintf(id2,<span class="stringliteral">&quot;%s7&quot;</span>,avatar_id); <a class="code" href="client_8cpp.html#a22c9da6b0628be924a14bbf8a7355a86">addChildNode</a>(id1,id2,<span class="stringliteral">&quot;AVATAR&quot;</span>); <a class="code" href="client_8cpp.html#ae15fcf054a549f9e21198caf4498d4bb">updateAvatarNodes</a>(id1,0.0458031,0.0571943,-0.0772104,-0.2582,-0.681403,-0.282455,0.623893); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#a7fdd491265053b6744ce2d0771018a5c">clientConfig</a>,avatar_cfg); strcpy(AvatarNodeMap[id1]-&gt;avatarjoint_id,<span class="stringliteral">&quot;25&quot;</span>); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#ad70622a475a88e7a9197d381c83d0c4d">clientname</a>,avatar_id);
<a name="l00200"></a>00200         sprintf(id1,<span class="stringliteral">&quot;%s26&quot;</span>,avatar_id); sprintf(id2,<span class="stringliteral">&quot;%s25&quot;</span>,avatar_id); <a class="code" href="client_8cpp.html#a22c9da6b0628be924a14bbf8a7355a86">addChildNode</a>(id1,id2,<span class="stringliteral">&quot;AVATAR&quot;</span>); <a class="code" href="client_8cpp.html#ae15fcf054a549f9e21198caf4498d4bb">updateAvatarNodes</a>(id1,0.0189569,0,0,0.707388,9.62452e-007,-0.706825,9.81499e-007); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#a7fdd491265053b6744ce2d0771018a5c">clientConfig</a>,avatar_cfg); strcpy(AvatarNodeMap[id1]-&gt;avatarjoint_id,<span class="stringliteral">&quot;26&quot;</span>); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#ad70622a475a88e7a9197d381c83d0c4d">clientname</a>,avatar_id);
<a name="l00201"></a>00201         sprintf(id1,<span class="stringliteral">&quot;%s27&quot;</span>,avatar_id); sprintf(id2,<span class="stringliteral">&quot;%s7&quot;</span>,avatar_id); <a class="code" href="client_8cpp.html#a22c9da6b0628be924a14bbf8a7355a86">addChildNode</a>(id1,id2,<span class="stringliteral">&quot;AVATAR&quot;</span>); <a class="code" href="client_8cpp.html#ae15fcf054a549f9e21198caf4498d4bb">updateAvatarNodes</a>(id1,0.0508165,1.60252e-007,-0.118314,1.12487e-007,-0.675884,-2.66852e-006,0.737008); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#a7fdd491265053b6744ce2d0771018a5c">clientConfig</a>,avatar_cfg); strcpy(AvatarNodeMap[id1]-&gt;avatarjoint_id,<span class="stringliteral">&quot;27&quot;</span>); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#ad70622a475a88e7a9197d381c83d0c4d">clientname</a>,avatar_id);
<a name="l00202"></a>00202         sprintf(id1,<span class="stringliteral">&quot;%s28&quot;</span>,avatar_id); sprintf(id2,<span class="stringliteral">&quot;%s27&quot;</span>,avatar_id); <a class="code" href="client_8cpp.html#a22c9da6b0628be924a14bbf8a7355a86">addChildNode</a>(id1,id2,<span class="stringliteral">&quot;AVATAR&quot;</span>); <a class="code" href="client_8cpp.html#ae15fcf054a549f9e21198caf4498d4bb">updateAvatarNodes</a>(id1,0.014684,-2.60115e-010,1.137e-017,0.707388,1.01365e-006,-0.706825,1.03353e-006); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#a7fdd491265053b6744ce2d0771018a5c">clientConfig</a>,avatar_cfg); strcpy(AvatarNodeMap[id1]-&gt;avatarjoint_id,<span class="stringliteral">&quot;28&quot;</span>); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#ad70622a475a88e7a9197d381c83d0c4d">clientname</a>,avatar_id);
<a name="l00203"></a>00203         sprintf(id1,<span class="stringliteral">&quot;%s29&quot;</span>,avatar_id); sprintf(id2,<span class="stringliteral">&quot;%s7&quot;</span>,avatar_id); <a class="code" href="client_8cpp.html#a22c9da6b0628be924a14bbf8a7355a86">addChildNode</a>(id1,id2,<span class="stringliteral">&quot;AVATAR&quot;</span>); <a class="code" href="client_8cpp.html#ae15fcf054a549f9e21198caf4498d4bb">updateAvatarNodes</a>(id1,0.0624822,-0.029447,-0.10813,0.190613,-0.652834,0.175083,0.711914); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#a7fdd491265053b6744ce2d0771018a5c">clientConfig</a>,avatar_cfg); strcpy(AvatarNodeMap[id1]-&gt;avatarjoint_id,<span class="stringliteral">&quot;29&quot;</span>); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#ad70622a475a88e7a9197d381c83d0c4d">clientname</a>,avatar_id);
<a name="l00204"></a>00204         sprintf(id1,<span class="stringliteral">&quot;%s30&quot;</span>,avatar_id); sprintf(id2,<span class="stringliteral">&quot;%s29&quot;</span>,avatar_id); <a class="code" href="client_8cpp.html#a22c9da6b0628be924a14bbf8a7355a86">addChildNode</a>(id1,id2,<span class="stringliteral">&quot;AVATAR&quot;</span>); <a class="code" href="client_8cpp.html#ae15fcf054a549f9e21198caf4498d4bb">updateAvatarNodes</a>(id1,0.0131441,-2.6054e-015,-5.96046e-008,0.707388,9.49204e-007,-0.706825,1.01581e-006); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#a7fdd491265053b6744ce2d0771018a5c">clientConfig</a>,avatar_cfg); strcpy(AvatarNodeMap[id1]-&gt;avatarjoint_id,<span class="stringliteral">&quot;30&quot;</span>); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#ad70622a475a88e7a9197d381c83d0c4d">clientname</a>,avatar_id);
<a name="l00205"></a>00205         sprintf(id1,<span class="stringliteral">&quot;%s31&quot;</span>,avatar_id); sprintf(id2,<span class="stringliteral">&quot;%s7&quot;</span>,avatar_id); <a class="code" href="client_8cpp.html#a22c9da6b0628be924a14bbf8a7355a86">addChildNode</a>(id1,id2,<span class="stringliteral">&quot;AVATAR&quot;</span>); <a class="code" href="client_8cpp.html#ae15fcf054a549f9e21198caf4498d4bb">updateAvatarNodes</a>(id1,0.0624822,0.0294476,-0.10813,-0.190613,-0.652833,-0.175086,0.711914); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#a7fdd491265053b6744ce2d0771018a5c">clientConfig</a>,avatar_cfg); strcpy(AvatarNodeMap[id1]-&gt;avatarjoint_id,<span class="stringliteral">&quot;31&quot;</span>); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#ad70622a475a88e7a9197d381c83d0c4d">clientname</a>,avatar_id);
<a name="l00206"></a>00206         sprintf(id1,<span class="stringliteral">&quot;%s32&quot;</span>,avatar_id); sprintf(id2,<span class="stringliteral">&quot;%s31&quot;</span>,avatar_id); <a class="code" href="client_8cpp.html#a22c9da6b0628be924a14bbf8a7355a86">addChildNode</a>(id1,id2,<span class="stringliteral">&quot;AVATAR&quot;</span>); <a class="code" href="client_8cpp.html#ae15fcf054a549f9e21198caf4498d4bb">updateAvatarNodes</a>(id1,0.0131441,0,0,0.707388,9.94708e-007,-0.706825,1.00289e-006); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#a7fdd491265053b6744ce2d0771018a5c">clientConfig</a>,avatar_cfg); strcpy(AvatarNodeMap[id1]-&gt;avatarjoint_id,<span class="stringliteral">&quot;32&quot;</span>); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#ad70622a475a88e7a9197d381c83d0c4d">clientname</a>,avatar_id);
<a name="l00207"></a>00207         sprintf(id1,<span class="stringliteral">&quot;%s33&quot;</span>,avatar_id); sprintf(id2,<span class="stringliteral">&quot;%s7&quot;</span>,avatar_id); <a class="code" href="client_8cpp.html#a22c9da6b0628be924a14bbf8a7355a86">addChildNode</a>(id1,id2,<span class="stringliteral">&quot;AVATAR&quot;</span>); <a class="code" href="client_8cpp.html#ae15fcf054a549f9e21198caf4498d4bb">updateAvatarNodes</a>(id1,0.103746,-0.0341106,-0.0875056,0.0961292,-0.670102,0.0882967,0.730703); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#a7fdd491265053b6744ce2d0771018a5c">clientConfig</a>,avatar_cfg); strcpy(AvatarNodeMap[id1]-&gt;avatarjoint_id,<span class="stringliteral">&quot;33&quot;</span>); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#ad70622a475a88e7a9197d381c83d0c4d">clientname</a>,avatar_id);
<a name="l00208"></a>00208         sprintf(id1,<span class="stringliteral">&quot;%s34&quot;</span>,avatar_id); sprintf(id2,<span class="stringliteral">&quot;%s33&quot;</span>,avatar_id); <a class="code" href="client_8cpp.html#a22c9da6b0628be924a14bbf8a7355a86">addChildNode</a>(id1,id2,<span class="stringliteral">&quot;AVATAR&quot;</span>); <a class="code" href="client_8cpp.html#ae15fcf054a549f9e21198caf4498d4bb">updateAvatarNodes</a>(id1,0.0106172,0,0,0.707388,1.02598e-006,-0.706825,9.51712e-007); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#a7fdd491265053b6744ce2d0771018a5c">clientConfig</a>,avatar_cfg); strcpy(AvatarNodeMap[id1]-&gt;avatarjoint_id,<span class="stringliteral">&quot;34&quot;</span>); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#ad70622a475a88e7a9197d381c83d0c4d">clientname</a>,avatar_id);
<a name="l00209"></a>00209         sprintf(id1,<span class="stringliteral">&quot;%s35&quot;</span>,avatar_id); sprintf(id2,<span class="stringliteral">&quot;%s7&quot;</span>,avatar_id); <a class="code" href="client_8cpp.html#a22c9da6b0628be924a14bbf8a7355a86">addChildNode</a>(id1,id2,<span class="stringliteral">&quot;AVATAR&quot;</span>); <a class="code" href="client_8cpp.html#ae15fcf054a549f9e21198caf4498d4bb">updateAvatarNodes</a>(id1,0.103746,0.034111,-0.0875054,-0.0961293,-0.670101,-0.0883003,0.730703); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#a7fdd491265053b6744ce2d0771018a5c">clientConfig</a>,avatar_cfg); strcpy(AvatarNodeMap[id1]-&gt;avatarjoint_id,<span class="stringliteral">&quot;35&quot;</span>); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#ad70622a475a88e7a9197d381c83d0c4d">clientname</a>,avatar_id);
<a name="l00210"></a>00210         sprintf(id1,<span class="stringliteral">&quot;%s36&quot;</span>,avatar_id); sprintf(id2,<span class="stringliteral">&quot;%s35&quot;</span>,avatar_id); <a class="code" href="client_8cpp.html#a22c9da6b0628be924a14bbf8a7355a86">addChildNode</a>(id1,id2,<span class="stringliteral">&quot;AVATAR&quot;</span>); <a class="code" href="client_8cpp.html#ae15fcf054a549f9e21198caf4498d4bb">updateAvatarNodes</a>(id1,0.0106172,3.72529e-009,-5.96046e-008,0.707388,9.79238e-007,-0.706825,9.76644e-007); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#a7fdd491265053b6744ce2d0771018a5c">clientConfig</a>,avatar_cfg); strcpy(AvatarNodeMap[id1]-&gt;avatarjoint_id,<span class="stringliteral">&quot;36&quot;</span>); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#ad70622a475a88e7a9197d381c83d0c4d">clientname</a>,avatar_id);
<a name="l00211"></a>00211         sprintf(id1,<span class="stringliteral">&quot;%s37&quot;</span>,avatar_id); sprintf(id2,<span class="stringliteral">&quot;%s7&quot;</span>,avatar_id); <a class="code" href="client_8cpp.html#a22c9da6b0628be924a14bbf8a7355a86">addChildNode</a>(id1,id2,<span class="stringliteral">&quot;AVATAR&quot;</span>); <a class="code" href="client_8cpp.html#ae15fcf054a549f9e21198caf4498d4bb">updateAvatarNodes</a>(id1,0.0502486,-0.0142556,-0.116842,0.170335,-0.686537,0.170568,0.685974); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#a7fdd491265053b6744ce2d0771018a5c">clientConfig</a>,avatar_cfg); strcpy(AvatarNodeMap[id1]-&gt;avatarjoint_id,<span class="stringliteral">&quot;37&quot;</span>); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#ad70622a475a88e7a9197d381c83d0c4d">clientname</a>,avatar_id);
<a name="l00212"></a>00212         sprintf(id1,<span class="stringliteral">&quot;%s38&quot;</span>,avatar_id); sprintf(id2,<span class="stringliteral">&quot;%s37&quot;</span>,avatar_id); <a class="code" href="client_8cpp.html#a22c9da6b0628be924a14bbf8a7355a86">addChildNode</a>(id1,id2,<span class="stringliteral">&quot;AVATAR&quot;</span>); <a class="code" href="client_8cpp.html#ae15fcf054a549f9e21198caf4498d4bb">updateAvatarNodes</a>(id1,0.0143248,-7.45058e-009,-5.96046e-008,0.707388,9.53894e-007,-0.706825,1.01441e-006); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#a7fdd491265053b6744ce2d0771018a5c">clientConfig</a>,avatar_cfg); strcpy(AvatarNodeMap[id1]-&gt;avatarjoint_id,<span class="stringliteral">&quot;38&quot;</span>); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#ad70622a475a88e7a9197d381c83d0c4d">clientname</a>,avatar_id);
<a name="l00213"></a>00213         sprintf(id1,<span class="stringliteral">&quot;%s39&quot;</span>,avatar_id); sprintf(id2,<span class="stringliteral">&quot;%s7&quot;</span>,avatar_id); <a class="code" href="client_8cpp.html#a22c9da6b0628be924a14bbf8a7355a86">addChildNode</a>(id1,id2,<span class="stringliteral">&quot;AVATAR&quot;</span>); <a class="code" href="client_8cpp.html#ae15fcf054a549f9e21198caf4498d4bb">updateAvatarNodes</a>(id1,0.0502486,0.0142563,-0.116842,-0.170181,-0.686574,-0.170416,0.686012); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#a7fdd491265053b6744ce2d0771018a5c">clientConfig</a>,avatar_cfg); strcpy(AvatarNodeMap[id1]-&gt;avatarjoint_id,<span class="stringliteral">&quot;39&quot;</span>); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#ad70622a475a88e7a9197d381c83d0c4d">clientname</a>,avatar_id);
<a name="l00214"></a>00214         sprintf(id1,<span class="stringliteral">&quot;%s40&quot;</span>,avatar_id); sprintf(id2,<span class="stringliteral">&quot;%s39&quot;</span>,avatar_id); <a class="code" href="client_8cpp.html#a22c9da6b0628be924a14bbf8a7355a86">addChildNode</a>(id1,id2,<span class="stringliteral">&quot;AVATAR&quot;</span>); <a class="code" href="client_8cpp.html#ae15fcf054a549f9e21198caf4498d4bb">updateAvatarNodes</a>(id1,0.0143248,2.6054e-015,5.96046e-008,0.707388,9.55869e-007,-0.706825,1.00454e-006); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#a7fdd491265053b6744ce2d0771018a5c">clientConfig</a>,avatar_cfg); strcpy(AvatarNodeMap[id1]-&gt;avatarjoint_id,<span class="stringliteral">&quot;40&quot;</span>); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#ad70622a475a88e7a9197d381c83d0c4d">clientname</a>,avatar_id);
<a name="l00215"></a>00215         sprintf(id1,<span class="stringliteral">&quot;%s41&quot;</span>,avatar_id); sprintf(id2,<span class="stringliteral">&quot;%s7&quot;</span>,avatar_id); <a class="code" href="client_8cpp.html#a22c9da6b0628be924a14bbf8a7355a86">addChildNode</a>(id1,id2,<span class="stringliteral">&quot;AVATAR&quot;</span>); <a class="code" href="client_8cpp.html#ae15fcf054a549f9e21198caf4498d4bb">updateAvatarNodes</a>(id1,0.0408259,-0.0277009,-0.107142,0.15813,-0.714628,0.201546,0.650908); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#a7fdd491265053b6744ce2d0771018a5c">clientConfig</a>,avatar_cfg); strcpy(AvatarNodeMap[id1]-&gt;avatarjoint_id,<span class="stringliteral">&quot;41&quot;</span>); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#ad70622a475a88e7a9197d381c83d0c4d">clientname</a>,avatar_id);
<a name="l00216"></a>00216         sprintf(id1,<span class="stringliteral">&quot;%s42&quot;</span>,avatar_id); sprintf(id2,<span class="stringliteral">&quot;%s41&quot;</span>,avatar_id); <a class="code" href="client_8cpp.html#a22c9da6b0628be924a14bbf8a7355a86">addChildNode</a>(id1,id2,<span class="stringliteral">&quot;AVATAR&quot;</span>); <a class="code" href="client_8cpp.html#ae15fcf054a549f9e21198caf4498d4bb">updateAvatarNodes</a>(id1,0.0198967,3.72529e-009,-1.62838e-016,0.707388,9.0946e-007,-0.706825,1.03449e-006); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#a7fdd491265053b6744ce2d0771018a5c">clientConfig</a>,avatar_cfg); strcpy(AvatarNodeMap[id1]-&gt;avatarjoint_id,<span class="stringliteral">&quot;42&quot;</span>); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#ad70622a475a88e7a9197d381c83d0c4d">clientname</a>,avatar_id);
<a name="l00217"></a>00217         sprintf(id1,<span class="stringliteral">&quot;%s43&quot;</span>,avatar_id); sprintf(id2,<span class="stringliteral">&quot;%s7&quot;</span>,avatar_id); <a class="code" href="client_8cpp.html#a22c9da6b0628be924a14bbf8a7355a86">addChildNode</a>(id1,id2,<span class="stringliteral">&quot;AVATAR&quot;</span>); <a class="code" href="client_8cpp.html#ae15fcf054a549f9e21198caf4498d4bb">updateAvatarNodes</a>(id1,0.040826,0.0277015,-0.107142,-0.158133,-0.714626,-0.201553,0.650907); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#a7fdd491265053b6744ce2d0771018a5c">clientConfig</a>,avatar_cfg); strcpy(AvatarNodeMap[id1]-&gt;avatarjoint_id,<span class="stringliteral">&quot;43&quot;</span>); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#ad70622a475a88e7a9197d381c83d0c4d">clientname</a>,avatar_id);
<a name="l00218"></a>00218         sprintf(id1,<span class="stringliteral">&quot;%s44&quot;</span>,avatar_id); sprintf(id2,<span class="stringliteral">&quot;%s43&quot;</span>,avatar_id); <a class="code" href="client_8cpp.html#a22c9da6b0628be924a14bbf8a7355a86">addChildNode</a>(id1,id2,<span class="stringliteral">&quot;AVATAR&quot;</span>); <a class="code" href="client_8cpp.html#ae15fcf054a549f9e21198caf4498d4bb">updateAvatarNodes</a>(id1,0.0198967,-5.58794e-009,-5.96046e-008,0.707388,9.16372e-007,-0.706825,9.04809e-007); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#a7fdd491265053b6744ce2d0771018a5c">clientConfig</a>,avatar_cfg); strcpy(AvatarNodeMap[id1]-&gt;avatarjoint_id,<span class="stringliteral">&quot;44&quot;</span>); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#ad70622a475a88e7a9197d381c83d0c4d">clientname</a>,avatar_id);
<a name="l00219"></a>00219         sprintf(id1,<span class="stringliteral">&quot;%s45&quot;</span>,avatar_id); sprintf(id2,<span class="stringliteral">&quot;%s7&quot;</span>,avatar_id); <a class="code" href="client_8cpp.html#a22c9da6b0628be924a14bbf8a7355a86">addChildNode</a>(id1,id2,<span class="stringliteral">&quot;AVATAR&quot;</span>); <a class="code" href="client_8cpp.html#ae15fcf054a549f9e21198caf4498d4bb">updateAvatarNodes</a>(id1,0.0847544,-0.0413737,-0.0965376,0.132563,-0.699922,0.134937,0.688715); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#a7fdd491265053b6744ce2d0771018a5c">clientConfig</a>,avatar_cfg); strcpy(AvatarNodeMap[id1]-&gt;avatarjoint_id,<span class="stringliteral">&quot;45&quot;</span>); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#ad70622a475a88e7a9197d381c83d0c4d">clientname</a>,avatar_id);
<a name="l00220"></a>00220         sprintf(id1,<span class="stringliteral">&quot;%s46&quot;</span>,avatar_id); sprintf(id2,<span class="stringliteral">&quot;%s45&quot;</span>,avatar_id); <a class="code" href="client_8cpp.html#a22c9da6b0628be924a14bbf8a7355a86">addChildNode</a>(id1,id2,<span class="stringliteral">&quot;AVATAR&quot;</span>); <a class="code" href="client_8cpp.html#ae15fcf054a549f9e21198caf4498d4bb">updateAvatarNodes</a>(id1,0.016866,3.72529e-009,-1.62838e-016,0.707388,9.85492e-007,-0.706825,9.74587e-007); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#a7fdd491265053b6744ce2d0771018a5c">clientConfig</a>,avatar_cfg); strcpy(AvatarNodeMap[id1]-&gt;avatarjoint_id,<span class="stringliteral">&quot;46&quot;</span>); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#ad70622a475a88e7a9197d381c83d0c4d">clientname</a>,avatar_id);
<a name="l00221"></a>00221         sprintf(id1,<span class="stringliteral">&quot;%s47&quot;</span>,avatar_id); sprintf(id2,<span class="stringliteral">&quot;%s7&quot;</span>,avatar_id); <a class="code" href="client_8cpp.html#a22c9da6b0628be924a14bbf8a7355a86">addChildNode</a>(id1,id2,<span class="stringliteral">&quot;AVATAR&quot;</span>); <a class="code" href="client_8cpp.html#ae15fcf054a549f9e21198caf4498d4bb">updateAvatarNodes</a>(id1,0.0847544,0.0413742,-0.0965374,-0.132569,-0.69992,-0.134947,0.688714); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#a7fdd491265053b6744ce2d0771018a5c">clientConfig</a>,avatar_cfg); strcpy(AvatarNodeMap[id1]-&gt;avatarjoint_id,<span class="stringliteral">&quot;47&quot;</span>); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#ad70622a475a88e7a9197d381c83d0c4d">clientname</a>,avatar_id);
<a name="l00222"></a>00222         sprintf(id1,<span class="stringliteral">&quot;%s48&quot;</span>,avatar_id); sprintf(id2,<span class="stringliteral">&quot;%s47&quot;</span>,avatar_id); <a class="code" href="client_8cpp.html#a22c9da6b0628be924a14bbf8a7355a86">addChildNode</a>(id1,id2,<span class="stringliteral">&quot;AVATAR&quot;</span>); <a class="code" href="client_8cpp.html#ae15fcf054a549f9e21198caf4498d4bb">updateAvatarNodes</a>(id1,0.016866,0,0,0.707388,9.69364e-007,-0.706825,9.86765e-007); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#a7fdd491265053b6744ce2d0771018a5c">clientConfig</a>,avatar_cfg); strcpy(AvatarNodeMap[id1]-&gt;avatarjoint_id,<span class="stringliteral">&quot;48&quot;</span>); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#ad70622a475a88e7a9197d381c83d0c4d">clientname</a>,avatar_id);
<a name="l00223"></a>00223         sprintf(id1,<span class="stringliteral">&quot;%s49&quot;</span>,avatar_id); sprintf(id2,<span class="stringliteral">&quot;%s7&quot;</span>,avatar_id); <a class="code" href="client_8cpp.html#a22c9da6b0628be924a14bbf8a7355a86">addChildNode</a>(id1,id2,<span class="stringliteral">&quot;AVATAR&quot;</span>); <a class="code" href="client_8cpp.html#ae15fcf054a549f9e21198caf4498d4bb">updateAvatarNodes</a>(id1,0.118678,-0.0333581,-0.0843964,0.101902,-0.561859,0.108616,0.813716); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#a7fdd491265053b6744ce2d0771018a5c">clientConfig</a>,avatar_cfg); strcpy(AvatarNodeMap[id1]-&gt;avatarjoint_id,<span class="stringliteral">&quot;49&quot;</span>); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#ad70622a475a88e7a9197d381c83d0c4d">clientname</a>,avatar_id);
<a name="l00224"></a>00224         sprintf(id1,<span class="stringliteral">&quot;%s50&quot;</span>,avatar_id); sprintf(id2,<span class="stringliteral">&quot;%s49&quot;</span>,avatar_id); <a class="code" href="client_8cpp.html#a22c9da6b0628be924a14bbf8a7355a86">addChildNode</a>(id1,id2,<span class="stringliteral">&quot;AVATAR&quot;</span>); <a class="code" href="client_8cpp.html#ae15fcf054a549f9e21198caf4498d4bb">updateAvatarNodes</a>(id1,0.0125087,3.72529e-009,-1.62838e-016,0.707388,9.97917e-007,-0.706825,1.02355e-006); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#a7fdd491265053b6744ce2d0771018a5c">clientConfig</a>,avatar_cfg); strcpy(AvatarNodeMap[id1]-&gt;avatarjoint_id,<span class="stringliteral">&quot;50&quot;</span>); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#ad70622a475a88e7a9197d381c83d0c4d">clientname</a>,avatar_id);
<a name="l00225"></a>00225         sprintf(id1,<span class="stringliteral">&quot;%s51&quot;</span>,avatar_id); sprintf(id2,<span class="stringliteral">&quot;%s7&quot;</span>,avatar_id); <a class="code" href="client_8cpp.html#a22c9da6b0628be924a14bbf8a7355a86">addChildNode</a>(id1,id2,<span class="stringliteral">&quot;AVATAR&quot;</span>); <a class="code" href="client_8cpp.html#ae15fcf054a549f9e21198caf4498d4bb">updateAvatarNodes</a>(id1,0.118678,0.0333586,-0.0843962,-0.101902,-0.561858,-0.108619,0.813716); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#a7fdd491265053b6744ce2d0771018a5c">clientConfig</a>,avatar_cfg); strcpy(AvatarNodeMap[id1]-&gt;avatarjoint_id,<span class="stringliteral">&quot;51&quot;</span>); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#ad70622a475a88e7a9197d381c83d0c4d">clientname</a>,avatar_id);
<a name="l00226"></a>00226         sprintf(id1,<span class="stringliteral">&quot;%s52&quot;</span>,avatar_id); sprintf(id2,<span class="stringliteral">&quot;%s51&quot;</span>,avatar_id); <a class="code" href="client_8cpp.html#a22c9da6b0628be924a14bbf8a7355a86">addChildNode</a>(id1,id2,<span class="stringliteral">&quot;AVATAR&quot;</span>); <a class="code" href="client_8cpp.html#ae15fcf054a549f9e21198caf4498d4bb">updateAvatarNodes</a>(id1,0.0125086,7.45058e-009,-3.25675e-016,0.707388,9.47805e-007,-0.706825,1.00857e-006); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#a7fdd491265053b6744ce2d0771018a5c">clientConfig</a>,avatar_cfg); strcpy(AvatarNodeMap[id1]-&gt;avatarjoint_id,<span class="stringliteral">&quot;52&quot;</span>); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#ad70622a475a88e7a9197d381c83d0c4d">clientname</a>,avatar_id);
<a name="l00227"></a>00227         sprintf(id1,<span class="stringliteral">&quot;%s53&quot;</span>,avatar_id); sprintf(id2,<span class="stringliteral">&quot;%s7&quot;</span>,avatar_id); <a class="code" href="client_8cpp.html#a22c9da6b0628be924a14bbf8a7355a86">addChildNode</a>(id1,id2,<span class="stringliteral">&quot;AVATAR&quot;</span>); <a class="code" href="client_8cpp.html#ae15fcf054a549f9e21198caf4498d4bb">updateAvatarNodes</a>(id1,0.130053,-0.0264132,-0.0946507,0.0641865,-0.673312,0.0589568,0.734204); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#a7fdd491265053b6744ce2d0771018a5c">clientConfig</a>,avatar_cfg); strcpy(AvatarNodeMap[id1]-&gt;avatarjoint_id,<span class="stringliteral">&quot;53&quot;</span>); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#ad70622a475a88e7a9197d381c83d0c4d">clientname</a>,avatar_id);
<a name="l00228"></a>00228         sprintf(id1,<span class="stringliteral">&quot;%s54&quot;</span>,avatar_id); sprintf(id2,<span class="stringliteral">&quot;%s53&quot;</span>,avatar_id); <a class="code" href="client_8cpp.html#a22c9da6b0628be924a14bbf8a7355a86">addChildNode</a>(id1,id2,<span class="stringliteral">&quot;AVATAR&quot;</span>); <a class="code" href="client_8cpp.html#ae15fcf054a549f9e21198caf4498d4bb">updateAvatarNodes</a>(id1,0.0229148,-1.86265e-009,8.14188e-017,0.707388,1.01771e-006,-0.706825,9.55497e-007); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#a7fdd491265053b6744ce2d0771018a5c">clientConfig</a>,avatar_cfg); strcpy(AvatarNodeMap[id1]-&gt;avatarjoint_id,<span class="stringliteral">&quot;54&quot;</span>); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#ad70622a475a88e7a9197d381c83d0c4d">clientname</a>,avatar_id);
<a name="l00229"></a>00229         sprintf(id1,<span class="stringliteral">&quot;%s55&quot;</span>,avatar_id); sprintf(id2,<span class="stringliteral">&quot;%s7&quot;</span>,avatar_id); <a class="code" href="client_8cpp.html#a22c9da6b0628be924a14bbf8a7355a86">addChildNode</a>(id1,id2,<span class="stringliteral">&quot;AVATAR&quot;</span>); <a class="code" href="client_8cpp.html#ae15fcf054a549f9e21198caf4498d4bb">updateAvatarNodes</a>(id1,0.130053,0.0264137,-0.0946506,-0.0641866,-0.673312,-0.0589604,0.734204); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#a7fdd491265053b6744ce2d0771018a5c">clientConfig</a>,avatar_cfg); strcpy(AvatarNodeMap[id1]-&gt;avatarjoint_id,<span class="stringliteral">&quot;55&quot;</span>); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#ad70622a475a88e7a9197d381c83d0c4d">clientname</a>,avatar_id);
<a name="l00230"></a>00230         sprintf(id1,<span class="stringliteral">&quot;%s56&quot;</span>,avatar_id); sprintf(id2,<span class="stringliteral">&quot;%s55&quot;</span>,avatar_id); <a class="code" href="client_8cpp.html#a22c9da6b0628be924a14bbf8a7355a86">addChildNode</a>(id1,id2,<span class="stringliteral">&quot;AVATAR&quot;</span>); <a class="code" href="client_8cpp.html#ae15fcf054a549f9e21198caf4498d4bb">updateAvatarNodes</a>(id1,0.0229148,-1.86265e-009,8.14188e-017,0.707388,8.84075e-007,-0.706825,9.96187e-007); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#a7fdd491265053b6744ce2d0771018a5c">clientConfig</a>,avatar_cfg); strcpy(AvatarNodeMap[id1]-&gt;avatarjoint_id,<span class="stringliteral">&quot;56&quot;</span>); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#ad70622a475a88e7a9197d381c83d0c4d">clientname</a>,avatar_id);
<a name="l00231"></a>00231         sprintf(id1,<span class="stringliteral">&quot;%s57&quot;</span>,avatar_id); sprintf(id2,<span class="stringliteral">&quot;%s7&quot;</span>,avatar_id); <a class="code" href="client_8cpp.html#a22c9da6b0628be924a14bbf8a7355a86">addChildNode</a>(id1,id2,<span class="stringliteral">&quot;AVATAR&quot;</span>); <a class="code" href="client_8cpp.html#ae15fcf054a549f9e21198caf4498d4bb">updateAvatarNodes</a>(id1,0.127065,1.26145e-007,-0.100129,1.46018e-009,-0.676903,-1.82665e-006,0.736073); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#a7fdd491265053b6744ce2d0771018a5c">clientConfig</a>,avatar_cfg); strcpy(AvatarNodeMap[id1]-&gt;avatarjoint_id,<span class="stringliteral">&quot;57&quot;</span>); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#ad70622a475a88e7a9197d381c83d0c4d">clientname</a>,avatar_id);
<a name="l00232"></a>00232         sprintf(id1,<span class="stringliteral">&quot;%s58&quot;</span>,avatar_id); sprintf(id2,<span class="stringliteral">&quot;%s57&quot;</span>,avatar_id); <a class="code" href="client_8cpp.html#a22c9da6b0628be924a14bbf8a7355a86">addChildNode</a>(id1,id2,<span class="stringliteral">&quot;AVATAR&quot;</span>); <a class="code" href="client_8cpp.html#ae15fcf054a549f9e21198caf4498d4bb">updateAvatarNodes</a>(id1,0.0183988,6.95763e-010,-3.04128e-017,0.707388,9.31625e-007,-0.706825,1.01705e-006); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#a7fdd491265053b6744ce2d0771018a5c">clientConfig</a>,avatar_cfg); strcpy(AvatarNodeMap[id1]-&gt;avatarjoint_id,<span class="stringliteral">&quot;58&quot;</span>); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#ad70622a475a88e7a9197d381c83d0c4d">clientname</a>,avatar_id);
<a name="l00233"></a>00233         sprintf(id1,<span class="stringliteral">&quot;%s59&quot;</span>,avatar_id); sprintf(id2,<span class="stringliteral">&quot;%s7&quot;</span>,avatar_id); <a class="code" href="client_8cpp.html#a22c9da6b0628be924a14bbf8a7355a86">addChildNode</a>(id1,id2,<span class="stringliteral">&quot;AVATAR&quot;</span>); <a class="code" href="client_8cpp.html#ae15fcf054a549f9e21198caf4498d4bb">updateAvatarNodes</a>(id1,0.125416,-0.0492667,-0.0829298,0.180391,-0.656002,0.185586,0.708998); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#a7fdd491265053b6744ce2d0771018a5c">clientConfig</a>,avatar_cfg); strcpy(AvatarNodeMap[id1]-&gt;avatarjoint_id,<span class="stringliteral">&quot;59&quot;</span>); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#ad70622a475a88e7a9197d381c83d0c4d">clientname</a>,avatar_id);
<a name="l00234"></a>00234         sprintf(id1,<span class="stringliteral">&quot;%s60&quot;</span>,avatar_id); sprintf(id2,<span class="stringliteral">&quot;%s59&quot;</span>,avatar_id); <a class="code" href="client_8cpp.html#a22c9da6b0628be924a14bbf8a7355a86">addChildNode</a>(id1,id2,<span class="stringliteral">&quot;AVATAR&quot;</span>); <a class="code" href="client_8cpp.html#ae15fcf054a549f9e21198caf4498d4bb">updateAvatarNodes</a>(id1,0.0209223,-7.45058e-009,3.25675e-016,0.707388,9.55951e-007,-0.706825,9.64137e-007); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#a7fdd491265053b6744ce2d0771018a5c">clientConfig</a>,avatar_cfg); strcpy(AvatarNodeMap[id1]-&gt;avatarjoint_id,<span class="stringliteral">&quot;60&quot;</span>); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#ad70622a475a88e7a9197d381c83d0c4d">clientname</a>,avatar_id);
<a name="l00235"></a>00235         sprintf(id1,<span class="stringliteral">&quot;%s61&quot;</span>,avatar_id); sprintf(id2,<span class="stringliteral">&quot;%s7&quot;</span>,avatar_id); <a class="code" href="client_8cpp.html#a22c9da6b0628be924a14bbf8a7355a86">addChildNode</a>(id1,id2,<span class="stringliteral">&quot;AVATAR&quot;</span>); <a class="code" href="client_8cpp.html#ae15fcf054a549f9e21198caf4498d4bb">updateAvatarNodes</a>(id1,0.125416,0.0492671,-0.0829295,-0.180391,-0.656,-0.18559,0.708999); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#a7fdd491265053b6744ce2d0771018a5c">clientConfig</a>,avatar_cfg); strcpy(AvatarNodeMap[id1]-&gt;avatarjoint_id,<span class="stringliteral">&quot;61&quot;</span>); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#ad70622a475a88e7a9197d381c83d0c4d">clientname</a>,avatar_id);
<a name="l00236"></a>00236         sprintf(id1,<span class="stringliteral">&quot;%s62&quot;</span>,avatar_id); sprintf(id2,<span class="stringliteral">&quot;%s61&quot;</span>,avatar_id); <a class="code" href="client_8cpp.html#a22c9da6b0628be924a14bbf8a7355a86">addChildNode</a>(id1,id2,<span class="stringliteral">&quot;AVATAR&quot;</span>); <a class="code" href="client_8cpp.html#ae15fcf054a549f9e21198caf4498d4bb">updateAvatarNodes</a>(id1,0.0209223,3.72529e-009,5.96046e-008,0.707388,9.38425e-007,-0.706825,9.95652e-007); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#a7fdd491265053b6744ce2d0771018a5c">clientConfig</a>,avatar_cfg); strcpy(AvatarNodeMap[id1]-&gt;avatarjoint_id,<span class="stringliteral">&quot;62&quot;</span>); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#ad70622a475a88e7a9197d381c83d0c4d">clientname</a>,avatar_id);
<a name="l00237"></a>00237         sprintf(id1,<span class="stringliteral">&quot;%s63&quot;</span>,avatar_id); sprintf(id2,<span class="stringliteral">&quot;%s7&quot;</span>,avatar_id); <a class="code" href="client_8cpp.html#a22c9da6b0628be924a14bbf8a7355a86">addChildNode</a>(id1,id2,<span class="stringliteral">&quot;AVATAR&quot;</span>); <a class="code" href="client_8cpp.html#ae15fcf054a549f9e21198caf4498d4bb">updateAvatarNodes</a>(id1,0.0870816,1.58052e-007,-0.121933,1.08481e-007,-0.673129,-2.65695e-006,0.739525); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#a7fdd491265053b6744ce2d0771018a5c">clientConfig</a>,avatar_cfg); strcpy(AvatarNodeMap[id1]-&gt;avatarjoint_id,<span class="stringliteral">&quot;63&quot;</span>); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#ad70622a475a88e7a9197d381c83d0c4d">clientname</a>,avatar_id);
<a name="l00238"></a>00238         sprintf(id1,<span class="stringliteral">&quot;%s64&quot;</span>,avatar_id); sprintf(id2,<span class="stringliteral">&quot;%s63&quot;</span>,avatar_id); <a class="code" href="client_8cpp.html#a22c9da6b0628be924a14bbf8a7355a86">addChildNode</a>(id1,id2,<span class="stringliteral">&quot;AVATAR&quot;</span>); <a class="code" href="client_8cpp.html#ae15fcf054a549f9e21198caf4498d4bb">updateAvatarNodes</a>(id1,0.0296604,-3.87445e-010,1.69357e-017,0.707388,9.65289e-007,-0.706825,1.00774e-006); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#a7fdd491265053b6744ce2d0771018a5c">clientConfig</a>,avatar_cfg); strcpy(AvatarNodeMap[id1]-&gt;avatarjoint_id,<span class="stringliteral">&quot;64&quot;</span>); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#ad70622a475a88e7a9197d381c83d0c4d">clientname</a>,avatar_id);
<a name="l00239"></a>00239         sprintf(id1,<span class="stringliteral">&quot;%s65&quot;</span>,avatar_id); sprintf(id2,<span class="stringliteral">&quot;%s6&quot;</span>,avatar_id); <a class="code" href="client_8cpp.html#a22c9da6b0628be924a14bbf8a7355a86">addChildNode</a>(id1,id2,<span class="stringliteral">&quot;AVATAR&quot;</span>); <a class="code" href="client_8cpp.html#ae15fcf054a549f9e21198caf4498d4bb">updateAvatarNodes</a>(id1,-0.0608789,0.0728218,0.0139226,0.706984,0.70723,0.000321929,-0.000241136); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#a7fdd491265053b6744ce2d0771018a5c">clientConfig</a>,avatar_cfg); strcpy(AvatarNodeMap[id1]-&gt;avatarjoint_id,<span class="stringliteral">&quot;65&quot;</span>); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#ad70622a475a88e7a9197d381c83d0c4d">clientname</a>,avatar_id);
<a name="l00240"></a>00240         sprintf(id1,<span class="stringliteral">&quot;%s66&quot;</span>,avatar_id); sprintf(id2,<span class="stringliteral">&quot;%s65&quot;</span>,avatar_id); <a class="code" href="client_8cpp.html#a22c9da6b0628be924a14bbf8a7355a86">addChildNode</a>(id1,id2,<span class="stringliteral">&quot;AVATAR&quot;</span>); <a class="code" href="client_8cpp.html#ae15fcf054a549f9e21198caf4498d4bb">updateAvatarNodes</a>(id1,0.14108,-5.96046e-008,2.6054e-015,-0.000398014,-0.000816058,-0.000173655,1); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#a7fdd491265053b6744ce2d0771018a5c">clientConfig</a>,avatar_cfg); strcpy(AvatarNodeMap[id1]-&gt;avatarjoint_id,<span class="stringliteral">&quot;66&quot;</span>); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#ad70622a475a88e7a9197d381c83d0c4d">clientname</a>,avatar_id);
<a name="l00241"></a>00241         sprintf(id1,<span class="stringliteral">&quot;%s67&quot;</span>,avatar_id); sprintf(id2,<span class="stringliteral">&quot;%s66&quot;</span>,avatar_id); <a class="code" href="client_8cpp.html#a22c9da6b0628be924a14bbf8a7355a86">addChildNode</a>(id1,id2,<span class="stringliteral">&quot;AVATAR&quot;</span>); <a class="code" href="client_8cpp.html#ae15fcf054a549f9e21198caf4498d4bb">updateAvatarNodes</a>(id1,0.285801,1.27217e-018,2.91038e-011,3.59714e-013,0.00292861,-1.28013e-010,0.999996); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#a7fdd491265053b6744ce2d0771018a5c">clientConfig</a>,avatar_cfg); strcpy(AvatarNodeMap[id1]-&gt;avatarjoint_id,<span class="stringliteral">&quot;67&quot;</span>); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#ad70622a475a88e7a9197d381c83d0c4d">clientname</a>,avatar_id);
<a name="l00242"></a>00242         sprintf(id1,<span class="stringliteral">&quot;%s68&quot;</span>,avatar_id); sprintf(id2,<span class="stringliteral">&quot;%s67&quot;</span>,avatar_id); <a class="code" href="client_8cpp.html#a22c9da6b0628be924a14bbf8a7355a86">addChildNode</a>(id1,id2,<span class="stringliteral">&quot;AVATAR&quot;</span>); <a class="code" href="client_8cpp.html#ae15fcf054a549f9e21198caf4498d4bb">updateAvatarNodes</a>(id1,0.27092,-2.03547e-017,-4.65661e-010,0.707104,-0.00144577,-0.00146178,0.707106); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#a7fdd491265053b6744ce2d0771018a5c">clientConfig</a>,avatar_cfg); strcpy(AvatarNodeMap[id1]-&gt;avatarjoint_id,<span class="stringliteral">&quot;68&quot;</span>); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#ad70622a475a88e7a9197d381c83d0c4d">clientname</a>,avatar_id);
<a name="l00243"></a>00243         sprintf(id1,<span class="stringliteral">&quot;%s69&quot;</span>,avatar_id); sprintf(id2,<span class="stringliteral">&quot;%s68&quot;</span>,avatar_id); <a class="code" href="client_8cpp.html#a22c9da6b0628be924a14bbf8a7355a86">addChildNode</a>(id1,id2,<span class="stringliteral">&quot;AVATAR&quot;</span>); <a class="code" href="client_8cpp.html#ae15fcf054a549f9e21198caf4498d4bb">updateAvatarNodes</a>(id1,0.0267608,-0.0319825,-0.00628209,-0.653939,0.0332818,0.366751,0.66087); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#a7fdd491265053b6744ce2d0771018a5c">clientConfig</a>,avatar_cfg); strcpy(AvatarNodeMap[id1]-&gt;avatarjoint_id,<span class="stringliteral">&quot;69&quot;</span>); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#ad70622a475a88e7a9197d381c83d0c4d">clientname</a>,avatar_id);
<a name="l00244"></a>00244         sprintf(id1,<span class="stringliteral">&quot;%s70&quot;</span>,avatar_id); sprintf(id2,<span class="stringliteral">&quot;%s69&quot;</span>,avatar_id); <a class="code" href="client_8cpp.html#a22c9da6b0628be924a14bbf8a7355a86">addChildNode</a>(id1,id2,<span class="stringliteral">&quot;AVATAR&quot;</span>); <a class="code" href="client_8cpp.html#ae15fcf054a549f9e21198caf4498d4bb">updateAvatarNodes</a>(id1,0.0282782,-5.96046e-008,2.6054e-015,-0.00489643,-0.282866,-0.235788,0.929713); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#a7fdd491265053b6744ce2d0771018a5c">clientConfig</a>,avatar_cfg); strcpy(AvatarNodeMap[id1]-&gt;avatarjoint_id,<span class="stringliteral">&quot;70&quot;</span>); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#ad70622a475a88e7a9197d381c83d0c4d">clientname</a>,avatar_id);
<a name="l00245"></a>00245         sprintf(id1,<span class="stringliteral">&quot;%s71&quot;</span>,avatar_id); sprintf(id2,<span class="stringliteral">&quot;%s70&quot;</span>,avatar_id); <a class="code" href="client_8cpp.html#a22c9da6b0628be924a14bbf8a7355a86">addChildNode</a>(id1,id2,<span class="stringliteral">&quot;AVATAR&quot;</span>); <a class="code" href="client_8cpp.html#ae15fcf054a549f9e21198caf4498d4bb">updateAvatarNodes</a>(id1,0.0310035,5.96046e-008,-7.45058e-009,-1.11757e-008,-1.1921e-007,-8.19564e-008,1); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#a7fdd491265053b6744ce2d0771018a5c">clientConfig</a>,avatar_cfg); strcpy(AvatarNodeMap[id1]-&gt;avatarjoint_id,<span class="stringliteral">&quot;71&quot;</span>); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#ad70622a475a88e7a9197d381c83d0c4d">clientname</a>,avatar_id);
<a name="l00246"></a>00246         sprintf(id1,<span class="stringliteral">&quot;%s72&quot;</span>,avatar_id); sprintf(id2,<span class="stringliteral">&quot;%s71&quot;</span>,avatar_id); <a class="code" href="client_8cpp.html#a22c9da6b0628be924a14bbf8a7355a86">addChildNode</a>(id1,id2,<span class="stringliteral">&quot;AVATAR&quot;</span>); <a class="code" href="client_8cpp.html#ae15fcf054a549f9e21198caf4498d4bb">updateAvatarNodes</a>(id1,0.0268396,-1.62838e-016,-3.72529e-009,0,0,0,1); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#a7fdd491265053b6744ce2d0771018a5c">clientConfig</a>,avatar_cfg); strcpy(AvatarNodeMap[id1]-&gt;avatarjoint_id,<span class="stringliteral">&quot;72&quot;</span>); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#ad70622a475a88e7a9197d381c83d0c4d">clientname</a>,avatar_id);
<a name="l00247"></a>00247         sprintf(id1,<span class="stringliteral">&quot;%s73&quot;</span>,avatar_id); sprintf(id2,<span class="stringliteral">&quot;%s68&quot;</span>,avatar_id); <a class="code" href="client_8cpp.html#a22c9da6b0628be924a14bbf8a7355a86">addChildNode</a>(id1,id2,<span class="stringliteral">&quot;AVATAR&quot;</span>); <a class="code" href="client_8cpp.html#ae15fcf054a549f9e21198caf4498d4bb">updateAvatarNodes</a>(id1,0.0943896,-0.0224244,0.00203925,8.34451e-007,-1.111e-005,6.67363e-008,1); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#a7fdd491265053b6744ce2d0771018a5c">clientConfig</a>,avatar_cfg); strcpy(AvatarNodeMap[id1]-&gt;avatarjoint_id,<span class="stringliteral">&quot;73&quot;</span>); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#ad70622a475a88e7a9197d381c83d0c4d">clientname</a>,avatar_id);
<a name="l00248"></a>00248         sprintf(id1,<span class="stringliteral">&quot;%s74&quot;</span>,avatar_id); sprintf(id2,<span class="stringliteral">&quot;%s73&quot;</span>,avatar_id); <a class="code" href="client_8cpp.html#a22c9da6b0628be924a14bbf8a7355a86">addChildNode</a>(id1,id2,<span class="stringliteral">&quot;AVATAR&quot;</span>); <a class="code" href="client_8cpp.html#ae15fcf054a549f9e21198caf4498d4bb">updateAvatarNodes</a>(id1,0.0312896,7.45058e-009,5.96046e-008,0,-1.49011e-008,-4.52129e-008,1); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#a7fdd491265053b6744ce2d0771018a5c">clientConfig</a>,avatar_cfg); strcpy(AvatarNodeMap[id1]-&gt;avatarjoint_id,<span class="stringliteral">&quot;74&quot;</span>); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#ad70622a475a88e7a9197d381c83d0c4d">clientname</a>,avatar_id);
<a name="l00249"></a>00249         sprintf(id1,<span class="stringliteral">&quot;%s75&quot;</span>,avatar_id); sprintf(id2,<span class="stringliteral">&quot;%s74&quot;</span>,avatar_id); <a class="code" href="client_8cpp.html#a22c9da6b0628be924a14bbf8a7355a86">addChildNode</a>(id1,id2,<span class="stringliteral">&quot;AVATAR&quot;</span>); <a class="code" href="client_8cpp.html#ae15fcf054a549f9e21198caf4498d4bb">updateAvatarNodes</a>(id1,0.0237906,9.31323e-009,-4.07094e-016,-4.26326e-014,-2.17221e-014,-9.28401e-009,1); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#a7fdd491265053b6744ce2d0771018a5c">clientConfig</a>,avatar_cfg); strcpy(AvatarNodeMap[id1]-&gt;avatarjoint_id,<span class="stringliteral">&quot;75&quot;</span>); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#ad70622a475a88e7a9197d381c83d0c4d">clientname</a>,avatar_id);
<a name="l00250"></a>00250         sprintf(id1,<span class="stringliteral">&quot;%s76&quot;</span>,avatar_id); sprintf(id2,<span class="stringliteral">&quot;%s75&quot;</span>,avatar_id); <a class="code" href="client_8cpp.html#a22c9da6b0628be924a14bbf8a7355a86">addChildNode</a>(id1,id2,<span class="stringliteral">&quot;AVATAR&quot;</span>); <a class="code" href="client_8cpp.html#ae15fcf054a549f9e21198caf4498d4bb">updateAvatarNodes</a>(id1,0.0209992,5.58794e-009,-2.44256e-016,0,0,0,1); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#a7fdd491265053b6744ce2d0771018a5c">clientConfig</a>,avatar_cfg); strcpy(AvatarNodeMap[id1]-&gt;avatarjoint_id,<span class="stringliteral">&quot;76&quot;</span>); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#ad70622a475a88e7a9197d381c83d0c4d">clientname</a>,avatar_id);
<a name="l00251"></a>00251         sprintf(id1,<span class="stringliteral">&quot;%s77&quot;</span>,avatar_id); sprintf(id2,<span class="stringliteral">&quot;%s68&quot;</span>,avatar_id); <a class="code" href="client_8cpp.html#a22c9da6b0628be924a14bbf8a7355a86">addChildNode</a>(id1,id2,<span class="stringliteral">&quot;AVATAR&quot;</span>); <a class="code" href="client_8cpp.html#ae15fcf054a549f9e21198caf4498d4bb">updateAvatarNodes</a>(id1,0.0955927,0.00145351,0.00186419,1.07287e-006,-1.12441e-005,-8.65295e-008,1); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#a7fdd491265053b6744ce2d0771018a5c">clientConfig</a>,avatar_cfg); strcpy(AvatarNodeMap[id1]-&gt;avatarjoint_id,<span class="stringliteral">&quot;77&quot;</span>); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#ad70622a475a88e7a9197d381c83d0c4d">clientname</a>,avatar_id);
<a name="l00252"></a>00252         sprintf(id1,<span class="stringliteral">&quot;%s78&quot;</span>,avatar_id); sprintf(id2,<span class="stringliteral">&quot;%s77&quot;</span>,avatar_id); <a class="code" href="client_8cpp.html#a22c9da6b0628be924a14bbf8a7355a86">addChildNode</a>(id1,id2,<span class="stringliteral">&quot;AVATAR&quot;</span>); <a class="code" href="client_8cpp.html#ae15fcf054a549f9e21198caf4498d4bb">updateAvatarNodes</a>(id1,0.0380142,1.86265e-009,-8.14188e-017,2.98023e-008,-7.45057e-009,9.31311e-009,1); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#a7fdd491265053b6744ce2d0771018a5c">clientConfig</a>,avatar_cfg); strcpy(AvatarNodeMap[id1]-&gt;avatarjoint_id,<span class="stringliteral">&quot;78&quot;</span>); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#ad70622a475a88e7a9197d381c83d0c4d">clientname</a>,avatar_id);
<a name="l00253"></a>00253         sprintf(id1,<span class="stringliteral">&quot;%s79&quot;</span>,avatar_id); sprintf(id2,<span class="stringliteral">&quot;%s78&quot;</span>,avatar_id); <a class="code" href="client_8cpp.html#a22c9da6b0628be924a14bbf8a7355a86">addChildNode</a>(id1,id2,<span class="stringliteral">&quot;AVATAR&quot;</span>); <a class="code" href="client_8cpp.html#ae15fcf054a549f9e21198caf4498d4bb">updateAvatarNodes</a>(id1,0.0284879,3.0268e-009,-1.32306e-016,-1.77636e-014,-1.49012e-008,6.33302e-008,1); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#a7fdd491265053b6744ce2d0771018a5c">clientConfig</a>,avatar_cfg); strcpy(AvatarNodeMap[id1]-&gt;avatarjoint_id,<span class="stringliteral">&quot;79&quot;</span>); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#ad70622a475a88e7a9197d381c83d0c4d">clientname</a>,avatar_id);
<a name="l00254"></a>00254         sprintf(id1,<span class="stringliteral">&quot;%s80&quot;</span>,avatar_id); sprintf(id2,<span class="stringliteral">&quot;%s79&quot;</span>,avatar_id); <a class="code" href="client_8cpp.html#a22c9da6b0628be924a14bbf8a7355a86">addChildNode</a>(id1,id2,<span class="stringliteral">&quot;AVATAR&quot;</span>); <a class="code" href="client_8cpp.html#ae15fcf054a549f9e21198caf4498d4bb">updateAvatarNodes</a>(id1,0.0201886,1.5134e-009,-6.61528e-017,0,0,0,1); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#a7fdd491265053b6744ce2d0771018a5c">clientConfig</a>,avatar_cfg); strcpy(AvatarNodeMap[id1]-&gt;avatarjoint_id,<span class="stringliteral">&quot;80&quot;</span>); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#ad70622a475a88e7a9197d381c83d0c4d">clientname</a>,avatar_id);
<a name="l00255"></a>00255         sprintf(id1,<span class="stringliteral">&quot;%s81&quot;</span>,avatar_id); sprintf(id2,<span class="stringliteral">&quot;%s68&quot;</span>,avatar_id); <a class="code" href="client_8cpp.html#a22c9da6b0628be924a14bbf8a7355a86">addChildNode</a>(id1,id2,<span class="stringliteral">&quot;AVATAR&quot;</span>); <a class="code" href="client_8cpp.html#ae15fcf054a549f9e21198caf4498d4bb">updateAvatarNodes</a>(id1,0.0899363,0.0230169,-0.00226975,1.10267e-006,-1.15198e-005,-2.4363e-008,1); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#a7fdd491265053b6744ce2d0771018a5c">clientConfig</a>,avatar_cfg); strcpy(AvatarNodeMap[id1]-&gt;avatarjoint_id,<span class="stringliteral">&quot;81&quot;</span>); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#ad70622a475a88e7a9197d381c83d0c4d">clientname</a>,avatar_id);
<a name="l00256"></a>00256         sprintf(id1,<span class="stringliteral">&quot;%s82&quot;</span>,avatar_id); sprintf(id2,<span class="stringliteral">&quot;%s81&quot;</span>,avatar_id); <a class="code" href="client_8cpp.html#a22c9da6b0628be924a14bbf8a7355a86">addChildNode</a>(id1,id2,<span class="stringliteral">&quot;AVATAR&quot;</span>); <a class="code" href="client_8cpp.html#ae15fcf054a549f9e21198caf4498d4bb">updateAvatarNodes</a>(id1,0.0336964,1.11759e-008,-4.88513e-016,-2.98023e-008,5.21541e-008,9.31323e-008,1); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#a7fdd491265053b6744ce2d0771018a5c">clientConfig</a>,avatar_cfg); strcpy(AvatarNodeMap[id1]-&gt;avatarjoint_id,<span class="stringliteral">&quot;82&quot;</span>); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#ad70622a475a88e7a9197d381c83d0c4d">clientname</a>,avatar_id);
<a name="l00257"></a>00257         sprintf(id1,<span class="stringliteral">&quot;%s83&quot;</span>,avatar_id); sprintf(id2,<span class="stringliteral">&quot;%s82&quot;</span>,avatar_id); <a class="code" href="client_8cpp.html#a22c9da6b0628be924a14bbf8a7355a86">addChildNode</a>(id1,id2,<span class="stringliteral">&quot;AVATAR&quot;</span>); <a class="code" href="client_8cpp.html#ae15fcf054a549f9e21198caf4498d4bb">updateAvatarNodes</a>(id1,0.0244422,7.45058e-009,5.96046e-008,-5.96043e-008,2.83122e-007,-1.05705e-007,1); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#a7fdd491265053b6744ce2d0771018a5c">clientConfig</a>,avatar_cfg); strcpy(AvatarNodeMap[id1]-&gt;avatarjoint_id,<span class="stringliteral">&quot;83&quot;</span>); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#ad70622a475a88e7a9197d381c83d0c4d">clientname</a>,avatar_id);
<a name="l00258"></a>00258         sprintf(id1,<span class="stringliteral">&quot;%s84&quot;</span>,avatar_id); sprintf(id2,<span class="stringliteral">&quot;%s83&quot;</span>,avatar_id); <a class="code" href="client_8cpp.html#a22c9da6b0628be924a14bbf8a7355a86">addChildNode</a>(id1,id2,<span class="stringliteral">&quot;AVATAR&quot;</span>); <a class="code" href="client_8cpp.html#ae15fcf054a549f9e21198caf4498d4bb">updateAvatarNodes</a>(id1,0.0205782,5.58794e-009,-2.44256e-016,0,0,0,1); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#a7fdd491265053b6744ce2d0771018a5c">clientConfig</a>,avatar_cfg); strcpy(AvatarNodeMap[id1]-&gt;avatarjoint_id,<span class="stringliteral">&quot;84&quot;</span>); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#ad70622a475a88e7a9197d381c83d0c4d">clientname</a>,avatar_id);
<a name="l00259"></a>00259         sprintf(id1,<span class="stringliteral">&quot;%s85&quot;</span>,avatar_id); sprintf(id2,<span class="stringliteral">&quot;%s68&quot;</span>,avatar_id); <a class="code" href="client_8cpp.html#a22c9da6b0628be924a14bbf8a7355a86">addChildNode</a>(id1,id2,<span class="stringliteral">&quot;AVATAR&quot;</span>); <a class="code" href="client_8cpp.html#ae15fcf054a549f9e21198caf4498d4bb">updateAvatarNodes</a>(id1,0.0802381,0.0397473,-0.0120191,1.10267e-006,-1.13335e-005,9.90361e-008,1); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#a7fdd491265053b6744ce2d0771018a5c">clientConfig</a>,avatar_cfg); strcpy(AvatarNodeMap[id1]-&gt;avatarjoint_id,<span class="stringliteral">&quot;85&quot;</span>); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#ad70622a475a88e7a9197d381c83d0c4d">clientname</a>,avatar_id);
<a name="l00260"></a>00260         sprintf(id1,<span class="stringliteral">&quot;%s86&quot;</span>,avatar_id); sprintf(id2,<span class="stringliteral">&quot;%s85&quot;</span>,avatar_id); <a class="code" href="client_8cpp.html#a22c9da6b0628be924a14bbf8a7355a86">addChildNode</a>(id1,id2,<span class="stringliteral">&quot;AVATAR&quot;</span>); <a class="code" href="client_8cpp.html#ae15fcf054a549f9e21198caf4498d4bb">updateAvatarNodes</a>(id1,0.0290878,0,0,-8.88178e-016,-1.09616e-013,9.31323e-008,1); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#a7fdd491265053b6744ce2d0771018a5c">clientConfig</a>,avatar_cfg); strcpy(AvatarNodeMap[id1]-&gt;avatarjoint_id,<span class="stringliteral">&quot;86&quot;</span>); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#ad70622a475a88e7a9197d381c83d0c4d">clientname</a>,avatar_id);
<a name="l00261"></a>00261         sprintf(id1,<span class="stringliteral">&quot;%s87&quot;</span>,avatar_id); sprintf(id2,<span class="stringliteral">&quot;%s86&quot;</span>,avatar_id); <a class="code" href="client_8cpp.html#a22c9da6b0628be924a14bbf8a7355a86">addChildNode</a>(id1,id2,<span class="stringliteral">&quot;AVATAR&quot;</span>); <a class="code" href="client_8cpp.html#ae15fcf054a549f9e21198caf4498d4bb">updateAvatarNodes</a>(id1,0.015358,2.6054e-015,5.96046e-008,8.88178e-015,7.45058e-009,-1.11759e-008,1); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#a7fdd491265053b6744ce2d0771018a5c">clientConfig</a>,avatar_cfg); strcpy(AvatarNodeMap[id1]-&gt;avatarjoint_id,<span class="stringliteral">&quot;87&quot;</span>); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#ad70622a475a88e7a9197d381c83d0c4d">clientname</a>,avatar_id);
<a name="l00262"></a>00262         sprintf(id1,<span class="stringliteral">&quot;%s88&quot;</span>,avatar_id); sprintf(id2,<span class="stringliteral">&quot;%s87&quot;</span>,avatar_id); <a class="code" href="client_8cpp.html#a22c9da6b0628be924a14bbf8a7355a86">addChildNode</a>(id1,id2,<span class="stringliteral">&quot;AVATAR&quot;</span>); <a class="code" href="client_8cpp.html#ae15fcf054a549f9e21198caf4498d4bb">updateAvatarNodes</a>(id1,0.0163014,-3.72529e-009,1.62838e-016,0,0,0,1); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#a7fdd491265053b6744ce2d0771018a5c">clientConfig</a>,avatar_cfg); strcpy(AvatarNodeMap[id1]-&gt;avatarjoint_id,<span class="stringliteral">&quot;88&quot;</span>); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#ad70622a475a88e7a9197d381c83d0c4d">clientname</a>,avatar_id);
<a name="l00263"></a>00263         sprintf(id1,<span class="stringliteral">&quot;%s89&quot;</span>,avatar_id); sprintf(id2,<span class="stringliteral">&quot;%s6&quot;</span>,avatar_id); <a class="code" href="client_8cpp.html#a22c9da6b0628be924a14bbf8a7355a86">addChildNode</a>(id1,id2,<span class="stringliteral">&quot;AVATAR&quot;</span>); <a class="code" href="client_8cpp.html#ae15fcf054a549f9e21198caf4498d4bb">updateAvatarNodes</a>(id1,-0.0608788,-0.0728219,0.0139221,-0.706984,0.707229,-0.000319832,-0.000243294); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#a7fdd491265053b6744ce2d0771018a5c">clientConfig</a>,avatar_cfg); strcpy(AvatarNodeMap[id1]-&gt;avatarjoint_id,<span class="stringliteral">&quot;89&quot;</span>); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#ad70622a475a88e7a9197d381c83d0c4d">clientname</a>,avatar_id);
<a name="l00264"></a>00264         sprintf(id1,<span class="stringliteral">&quot;%s90&quot;</span>,avatar_id); sprintf(id2,<span class="stringliteral">&quot;%s89&quot;</span>,avatar_id); <a class="code" href="client_8cpp.html#a22c9da6b0628be924a14bbf8a7355a86">addChildNode</a>(id1,id2,<span class="stringliteral">&quot;AVATAR&quot;</span>); <a class="code" href="client_8cpp.html#ae15fcf054a549f9e21198caf4498d4bb">updateAvatarNodes</a>(id1,0.14108,5.96046e-008,5.82051e-011,0.000398013,-0.000819397,0.00017363,1); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#a7fdd491265053b6744ce2d0771018a5c">clientConfig</a>,avatar_cfg); strcpy(AvatarNodeMap[id1]-&gt;avatarjoint_id,<span class="stringliteral">&quot;90&quot;</span>); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#ad70622a475a88e7a9197d381c83d0c4d">clientname</a>,avatar_id);
<a name="l00265"></a>00265         sprintf(id1,<span class="stringliteral">&quot;%s91&quot;</span>,avatar_id); sprintf(id2,<span class="stringliteral">&quot;%s90&quot;</span>,avatar_id); <a class="code" href="client_8cpp.html#a22c9da6b0628be924a14bbf8a7355a86">addChildNode</a>(id1,id2,<span class="stringliteral">&quot;AVATAR&quot;</span>); <a class="code" href="client_8cpp.html#ae15fcf054a549f9e21198caf4498d4bb">updateAvatarNodes</a>(id1,0.285801,5.08868e-018,1.16415e-010,-3.59714e-013,0.00292861,-1.28014e-010,0.999996); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#a7fdd491265053b6744ce2d0771018a5c">clientConfig</a>,avatar_cfg); strcpy(AvatarNodeMap[id1]-&gt;avatarjoint_id,<span class="stringliteral">&quot;91&quot;</span>); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#ad70622a475a88e7a9197d381c83d0c4d">clientname</a>,avatar_id);
<a name="l00266"></a>00266         sprintf(id1,<span class="stringliteral">&quot;%s92&quot;</span>,avatar_id); sprintf(id2,<span class="stringliteral">&quot;%s91&quot;</span>,avatar_id); <a class="code" href="client_8cpp.html#a22c9da6b0628be924a14bbf8a7355a86">addChildNode</a>(id1,id2,<span class="stringliteral">&quot;AVATAR&quot;</span>); <a class="code" href="client_8cpp.html#ae15fcf054a549f9e21198caf4498d4bb">updateAvatarNodes</a>(id1,0.27092,-1.01774e-017,-2.32831e-010,-0.707104,-0.00144577,0.00146178,0.707106); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#a7fdd491265053b6744ce2d0771018a5c">clientConfig</a>,avatar_cfg); strcpy(AvatarNodeMap[id1]-&gt;avatarjoint_id,<span class="stringliteral">&quot;92&quot;</span>); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#ad70622a475a88e7a9197d381c83d0c4d">clientname</a>,avatar_id);
<a name="l00267"></a>00267         sprintf(id1,<span class="stringliteral">&quot;%s93&quot;</span>,avatar_id); sprintf(id2,<span class="stringliteral">&quot;%s92&quot;</span>,avatar_id); <a class="code" href="client_8cpp.html#a22c9da6b0628be924a14bbf8a7355a86">addChildNode</a>(id1,id2,<span class="stringliteral">&quot;AVATAR&quot;</span>); <a class="code" href="client_8cpp.html#ae15fcf054a549f9e21198caf4498d4bb">updateAvatarNodes</a>(id1,0.0267608,0.0319825,-0.00628209,0.653939,0.0332817,-0.366751,0.66087); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#a7fdd491265053b6744ce2d0771018a5c">clientConfig</a>,avatar_cfg); strcpy(AvatarNodeMap[id1]-&gt;avatarjoint_id,<span class="stringliteral">&quot;93&quot;</span>); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#ad70622a475a88e7a9197d381c83d0c4d">clientname</a>,avatar_id);
<a name="l00268"></a>00268         sprintf(id1,<span class="stringliteral">&quot;%s94&quot;</span>,avatar_id); sprintf(id2,<span class="stringliteral">&quot;%s93&quot;</span>,avatar_id); <a class="code" href="client_8cpp.html#a22c9da6b0628be924a14bbf8a7355a86">addChildNode</a>(id1,id2,<span class="stringliteral">&quot;AVATAR&quot;</span>); <a class="code" href="client_8cpp.html#ae15fcf054a549f9e21198caf4498d4bb">updateAvatarNodes</a>(id1,0.0282782,0,0,0.00489644,-0.282866,0.235788,0.929713); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#a7fdd491265053b6744ce2d0771018a5c">clientConfig</a>,avatar_cfg); strcpy(AvatarNodeMap[id1]-&gt;avatarjoint_id,<span class="stringliteral">&quot;94&quot;</span>); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#ad70622a475a88e7a9197d381c83d0c4d">clientname</a>,avatar_id);
<a name="l00269"></a>00269         sprintf(id1,<span class="stringliteral">&quot;%s95&quot;</span>,avatar_id); sprintf(id2,<span class="stringliteral">&quot;%s94&quot;</span>,avatar_id); <a class="code" href="client_8cpp.html#a22c9da6b0628be924a14bbf8a7355a86">addChildNode</a>(id1,id2,<span class="stringliteral">&quot;AVATAR&quot;</span>); <a class="code" href="client_8cpp.html#ae15fcf054a549f9e21198caf4498d4bb">updateAvatarNodes</a>(id1,0.0310035,-5.96046e-008,3.72529e-009,7.45057e-009,-1.04308e-007,7.26432e-008,1); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#a7fdd491265053b6744ce2d0771018a5c">clientConfig</a>,avatar_cfg); strcpy(AvatarNodeMap[id1]-&gt;avatarjoint_id,<span class="stringliteral">&quot;95&quot;</span>); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#ad70622a475a88e7a9197d381c83d0c4d">clientname</a>,avatar_id);
<a name="l00270"></a>00270         sprintf(id1,<span class="stringliteral">&quot;%s96&quot;</span>,avatar_id); sprintf(id2,<span class="stringliteral">&quot;%s95&quot;</span>,avatar_id); <a class="code" href="client_8cpp.html#a22c9da6b0628be924a14bbf8a7355a86">addChildNode</a>(id1,id2,<span class="stringliteral">&quot;AVATAR&quot;</span>); <a class="code" href="client_8cpp.html#ae15fcf054a549f9e21198caf4498d4bb">updateAvatarNodes</a>(id1,0.0268396,0,0,-3.47783e-023,1,-4.37114e-008,0); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#a7fdd491265053b6744ce2d0771018a5c">clientConfig</a>,avatar_cfg); strcpy(AvatarNodeMap[id1]-&gt;avatarjoint_id,<span class="stringliteral">&quot;96&quot;</span>); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#ad70622a475a88e7a9197d381c83d0c4d">clientname</a>,avatar_id);
<a name="l00271"></a>00271         sprintf(id1,<span class="stringliteral">&quot;%s97&quot;</span>,avatar_id); sprintf(id2,<span class="stringliteral">&quot;%s92&quot;</span>,avatar_id); <a class="code" href="client_8cpp.html#a22c9da6b0628be924a14bbf8a7355a86">addChildNode</a>(id1,id2,<span class="stringliteral">&quot;AVATAR&quot;</span>); <a class="code" href="client_8cpp.html#ae15fcf054a549f9e21198caf4498d4bb">updateAvatarNodes</a>(id1,0.0943896,0.0224244,0.00203925,-8.34466e-007,-1.111e-005,-6.65031e-008,1); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#a7fdd491265053b6744ce2d0771018a5c">clientConfig</a>,avatar_cfg); strcpy(AvatarNodeMap[id1]-&gt;avatarjoint_id,<span class="stringliteral">&quot;97&quot;</span>); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#ad70622a475a88e7a9197d381c83d0c4d">clientname</a>,avatar_id);
<a name="l00272"></a>00272         sprintf(id1,<span class="stringliteral">&quot;%s98&quot;</span>,avatar_id); sprintf(id2,<span class="stringliteral">&quot;%s97&quot;</span>,avatar_id); <a class="code" href="client_8cpp.html#a22c9da6b0628be924a14bbf8a7355a86">addChildNode</a>(id1,id2,<span class="stringliteral">&quot;AVATAR&quot;</span>); <a class="code" href="client_8cpp.html#ae15fcf054a549f9e21198caf4498d4bb">updateAvatarNodes</a>(id1,0.0312896,-9.31322e-009,5.96046e-008,2.98023e-008,-1.49012e-008,4.49817e-008,1); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#a7fdd491265053b6744ce2d0771018a5c">clientConfig</a>,avatar_cfg); strcpy(AvatarNodeMap[id1]-&gt;avatarjoint_id,<span class="stringliteral">&quot;98&quot;</span>); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#ad70622a475a88e7a9197d381c83d0c4d">clientname</a>,avatar_id);
<a name="l00273"></a>00273         sprintf(id1,<span class="stringliteral">&quot;%s99&quot;</span>,avatar_id); sprintf(id2,<span class="stringliteral">&quot;%s98&quot;</span>,avatar_id); <a class="code" href="client_8cpp.html#a22c9da6b0628be924a14bbf8a7355a86">addChildNode</a>(id1,id2,<span class="stringliteral">&quot;AVATAR&quot;</span>); <a class="code" href="client_8cpp.html#ae15fcf054a549f9e21198caf4498d4bb">updateAvatarNodes</a>(id1,0.0237906,-5.58794e-009,2.44256e-016,-2.98023e-008,1.46269e-014,9.51695e-009,1); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#a7fdd491265053b6744ce2d0771018a5c">clientConfig</a>,avatar_cfg); strcpy(AvatarNodeMap[id1]-&gt;avatarjoint_id,<span class="stringliteral">&quot;99&quot;</span>); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#ad70622a475a88e7a9197d381c83d0c4d">clientname</a>,avatar_id);
<a name="l00274"></a>00274         sprintf(id1,<span class="stringliteral">&quot;%s100&quot;</span>,avatar_id); sprintf(id2,<span class="stringliteral">&quot;%s99&quot;</span>,avatar_id); <a class="code" href="client_8cpp.html#a22c9da6b0628be924a14bbf8a7355a86">addChildNode</a>(id1,id2,<span class="stringliteral">&quot;AVATAR&quot;</span>); <a class="code" href="client_8cpp.html#ae15fcf054a549f9e21198caf4498d4bb">updateAvatarNodes</a>(id1,0.0209992,-5.58794e-009,2.44256e-016,2.84217e-014,1,-2.88102e-008,1.42109e-014); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#a7fdd491265053b6744ce2d0771018a5c">clientConfig</a>,avatar_cfg); strcpy(AvatarNodeMap[id1]-&gt;avatarjoint_id,<span class="stringliteral">&quot;100&quot;</span>); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#ad70622a475a88e7a9197d381c83d0c4d">clientname</a>,avatar_id);
<a name="l00275"></a>00275         sprintf(id1,<span class="stringliteral">&quot;%s101&quot;</span>,avatar_id); sprintf(id2,<span class="stringliteral">&quot;%s92&quot;</span>,avatar_id); <a class="code" href="client_8cpp.html#a22c9da6b0628be924a14bbf8a7355a86">addChildNode</a>(id1,id2,<span class="stringliteral">&quot;AVATAR&quot;</span>); <a class="code" href="client_8cpp.html#ae15fcf054a549f9e21198caf4498d4bb">updateAvatarNodes</a>(id1,0.0955927,-0.00145351,0.00186419,-1.04308e-006,-1.12441e-005,7.95455e-008,1); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#a7fdd491265053b6744ce2d0771018a5c">clientConfig</a>,avatar_cfg); strcpy(AvatarNodeMap[id1]-&gt;avatarjoint_id,<span class="stringliteral">&quot;101&quot;</span>); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#ad70622a475a88e7a9197d381c83d0c4d">clientname</a>,avatar_id);
<a name="l00276"></a>00276         sprintf(id1,<span class="stringliteral">&quot;%s102&quot;</span>,avatar_id); sprintf(id2,<span class="stringliteral">&quot;%s101&quot;</span>,avatar_id); <a class="code" href="client_8cpp.html#a22c9da6b0628be924a14bbf8a7355a86">addChildNode</a>(id1,id2,<span class="stringliteral">&quot;AVATAR&quot;</span>); <a class="code" href="client_8cpp.html#ae15fcf054a549f9e21198caf4498d4bb">updateAvatarNodes</a>(id1,0.0380142,-2.56114e-009,1.11951e-016,-4.47035e-008,-1.49012e-008,-7.45057e-009,1); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#a7fdd491265053b6744ce2d0771018a5c">clientConfig</a>,avatar_cfg); strcpy(AvatarNodeMap[id1]-&gt;avatarjoint_id,<span class="stringliteral">&quot;102&quot;</span>); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#ad70622a475a88e7a9197d381c83d0c4d">clientname</a>,avatar_id);
<a name="l00277"></a>00277         sprintf(id1,<span class="stringliteral">&quot;%s103&quot;</span>,avatar_id); sprintf(id2,<span class="stringliteral">&quot;%s102&quot;</span>,avatar_id); <a class="code" href="client_8cpp.html#a22c9da6b0628be924a14bbf8a7355a86">addChildNode</a>(id1,id2,<span class="stringliteral">&quot;AVATAR&quot;</span>); <a class="code" href="client_8cpp.html#ae15fcf054a549f9e21198caf4498d4bb">updateAvatarNodes</a>(id1,0.0284879,-1.74623e-009,7.63301e-017,-2.66454e-015,-1.49012e-008,-6.14673e-008,1); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#a7fdd491265053b6744ce2d0771018a5c">clientConfig</a>,avatar_cfg); strcpy(AvatarNodeMap[id1]-&gt;avatarjoint_id,<span class="stringliteral">&quot;103&quot;</span>); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#ad70622a475a88e7a9197d381c83d0c4d">clientname</a>,avatar_id);
<a name="l00278"></a>00278         sprintf(id1,<span class="stringliteral">&quot;%s104&quot;</span>,avatar_id); sprintf(id2,<span class="stringliteral">&quot;%s103&quot;</span>,avatar_id); <a class="code" href="client_8cpp.html#a22c9da6b0628be924a14bbf8a7355a86">addChildNode</a>(id1,id2,<span class="stringliteral">&quot;AVATAR&quot;</span>); <a class="code" href="client_8cpp.html#ae15fcf054a549f9e21198caf4498d4bb">updateAvatarNodes</a>(id1,0.0201886,-1.62981e-009,7.12415e-017,1.06581e-014,1,-4.37114e-008,-2.13163e-014); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#a7fdd491265053b6744ce2d0771018a5c">clientConfig</a>,avatar_cfg); strcpy(AvatarNodeMap[id1]-&gt;avatarjoint_id,<span class="stringliteral">&quot;104&quot;</span>); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#ad70622a475a88e7a9197d381c83d0c4d">clientname</a>,avatar_id);
<a name="l00279"></a>00279         sprintf(id1,<span class="stringliteral">&quot;%s105&quot;</span>,avatar_id); sprintf(id2,<span class="stringliteral">&quot;%s92&quot;</span>,avatar_id); <a class="code" href="client_8cpp.html#a22c9da6b0628be924a14bbf8a7355a86">addChildNode</a>(id1,id2,<span class="stringliteral">&quot;AVATAR&quot;</span>); <a class="code" href="client_8cpp.html#ae15fcf054a549f9e21198caf4498d4bb">updateAvatarNodes</a>(id1,0.0899363,-0.0230169,-0.00226974,-1.08778e-006,-1.15198e-005,2.34336e-008,1); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#a7fdd491265053b6744ce2d0771018a5c">clientConfig</a>,avatar_cfg); strcpy(AvatarNodeMap[id1]-&gt;avatarjoint_id,<span class="stringliteral">&quot;105&quot;</span>); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#ad70622a475a88e7a9197d381c83d0c4d">clientname</a>,avatar_id);
<a name="l00280"></a>00280         sprintf(id1,<span class="stringliteral">&quot;%s106&quot;</span>,avatar_id); sprintf(id2,<span class="stringliteral">&quot;%s105&quot;</span>,avatar_id); <a class="code" href="client_8cpp.html#a22c9da6b0628be924a14bbf8a7355a86">addChildNode</a>(id1,id2,<span class="stringliteral">&quot;AVATAR&quot;</span>); <a class="code" href="client_8cpp.html#ae15fcf054a549f9e21198caf4498d4bb">updateAvatarNodes</a>(id1,0.0336965,-1.11759e-008,4.88513e-016,4.47035e-008,5.2154e-008,-9.31323e-008,1); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#a7fdd491265053b6744ce2d0771018a5c">clientConfig</a>,avatar_cfg); strcpy(AvatarNodeMap[id1]-&gt;avatarjoint_id,<span class="stringliteral">&quot;106&quot;</span>); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#ad70622a475a88e7a9197d381c83d0c4d">clientname</a>,avatar_id);
<a name="l00281"></a>00281         sprintf(id1,<span class="stringliteral">&quot;%s107&quot;</span>,avatar_id); sprintf(id2,<span class="stringliteral">&quot;%s106&quot;</span>,avatar_id); <a class="code" href="client_8cpp.html#a22c9da6b0628be924a14bbf8a7355a86">addChildNode</a>(id1,id2,<span class="stringliteral">&quot;AVATAR&quot;</span>); <a class="code" href="client_8cpp.html#ae15fcf054a549f9e21198caf4498d4bb">updateAvatarNodes</a>(id1,0.0244422,-7.45058e-009,5.96046e-008,2.98023e-008,2.83122e-007,1.05239e-007,1); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#a7fdd491265053b6744ce2d0771018a5c">clientConfig</a>,avatar_cfg); strcpy(AvatarNodeMap[id1]-&gt;avatarjoint_id,<span class="stringliteral">&quot;107&quot;</span>); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#ad70622a475a88e7a9197d381c83d0c4d">clientname</a>,avatar_id);
<a name="l00282"></a>00282         sprintf(id1,<span class="stringliteral">&quot;%s108&quot;</span>,avatar_id); sprintf(id2,<span class="stringliteral">&quot;%s107&quot;</span>,avatar_id); <a class="code" href="client_8cpp.html#a22c9da6b0628be924a14bbf8a7355a86">addChildNode</a>(id1,id2,<span class="stringliteral">&quot;AVATAR&quot;</span>); <a class="code" href="client_8cpp.html#ae15fcf054a549f9e21198caf4498d4bb">updateAvatarNodes</a>(id1,0.0205782,-5.58794e-009,2.44256e-016,5.32907e-014,1,-2.88102e-008,-7.10543e-015); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#a7fdd491265053b6744ce2d0771018a5c">clientConfig</a>,avatar_cfg); strcpy(AvatarNodeMap[id1]-&gt;avatarjoint_id,<span class="stringliteral">&quot;108&quot;</span>); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#ad70622a475a88e7a9197d381c83d0c4d">clientname</a>,avatar_id);
<a name="l00283"></a>00283         sprintf(id1,<span class="stringliteral">&quot;%s109&quot;</span>,avatar_id); sprintf(id2,<span class="stringliteral">&quot;%s92&quot;</span>,avatar_id); <a class="code" href="client_8cpp.html#a22c9da6b0628be924a14bbf8a7355a86">addChildNode</a>(id1,id2,<span class="stringliteral">&quot;AVATAR&quot;</span>); <a class="code" href="client_8cpp.html#ae15fcf054a549f9e21198caf4498d4bb">updateAvatarNodes</a>(id1,0.0802381,-0.0397473,-0.0120191,-1.08779e-006,-1.13409e-005,-9.53098e-008,1); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#a7fdd491265053b6744ce2d0771018a5c">clientConfig</a>,avatar_cfg); strcpy(AvatarNodeMap[id1]-&gt;avatarjoint_id,<span class="stringliteral">&quot;109&quot;</span>); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#ad70622a475a88e7a9197d381c83d0c4d">clientname</a>,avatar_id);
<a name="l00284"></a>00284         sprintf(id1,<span class="stringliteral">&quot;%s110&quot;</span>,avatar_id); sprintf(id2,<span class="stringliteral">&quot;%s109&quot;</span>,avatar_id); <a class="code" href="client_8cpp.html#a22c9da6b0628be924a14bbf8a7355a86">addChildNode</a>(id1,id2,<span class="stringliteral">&quot;AVATAR&quot;</span>); <a class="code" href="client_8cpp.html#ae15fcf054a549f9e21198caf4498d4bb">updateAvatarNodes</a>(id1,0.0290878,-3.72529e-009,1.62838e-016,2.66454e-015,-5.02562e-014,-9.31323e-008,1); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#a7fdd491265053b6744ce2d0771018a5c">clientConfig</a>,avatar_cfg); strcpy(AvatarNodeMap[id1]-&gt;avatarjoint_id,<span class="stringliteral">&quot;110&quot;</span>); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#ad70622a475a88e7a9197d381c83d0c4d">clientname</a>,avatar_id);
<a name="l00285"></a>00285         sprintf(id1,<span class="stringliteral">&quot;%s111&quot;</span>,avatar_id); sprintf(id2,<span class="stringliteral">&quot;%s110&quot;</span>,avatar_id); <a class="code" href="client_8cpp.html#a22c9da6b0628be924a14bbf8a7355a86">addChildNode</a>(id1,id2,<span class="stringliteral">&quot;AVATAR&quot;</span>); <a class="code" href="client_8cpp.html#ae15fcf054a549f9e21198caf4498d4bb">updateAvatarNodes</a>(id1,0.0153581,3.72529e-009,5.96046e-008,8.88178e-016,7.4506e-009,1.11759e-008,1); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#a7fdd491265053b6744ce2d0771018a5c">clientConfig</a>,avatar_cfg); strcpy(AvatarNodeMap[id1]-&gt;avatarjoint_id,<span class="stringliteral">&quot;111&quot;</span>); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#ad70622a475a88e7a9197d381c83d0c4d">clientname</a>,avatar_id);
<a name="l00286"></a>00286         sprintf(id1,<span class="stringliteral">&quot;%s112&quot;</span>,avatar_id); sprintf(id2,<span class="stringliteral">&quot;%s111&quot;</span>,avatar_id); <a class="code" href="client_8cpp.html#a22c9da6b0628be924a14bbf8a7355a86">addChildNode</a>(id1,id2,<span class="stringliteral">&quot;AVATAR&quot;</span>); <a class="code" href="client_8cpp.html#ae15fcf054a549f9e21198caf4498d4bb">updateAvatarNodes</a>(id1,0.0163014,0,0,0,1,-4.37114e-008,-2.13163e-014); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#a7fdd491265053b6744ce2d0771018a5c">clientConfig</a>,avatar_cfg); strcpy(AvatarNodeMap[id1]-&gt;avatarjoint_id,<span class="stringliteral">&quot;112&quot;</span>); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#ad70622a475a88e7a9197d381c83d0c4d">clientname</a>,avatar_id);
<a name="l00287"></a>00287         sprintf(id1,<span class="stringliteral">&quot;%s113&quot;</span>,avatar_id); sprintf(id2,<span class="stringliteral">&quot;%s3&quot;</span>,avatar_id); <a class="code" href="client_8cpp.html#a22c9da6b0628be924a14bbf8a7355a86">addChildNode</a>(id1,id2,<span class="stringliteral">&quot;AVATAR&quot;</span>); <a class="code" href="client_8cpp.html#ae15fcf054a549f9e21198caf4498d4bb">updateAvatarNodes</a>(id1,-0.120265,0.0883685,-0.00162871,-2.04243e-008,-7.31909e-007,1,2.93099e-014); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#a7fdd491265053b6744ce2d0771018a5c">clientConfig</a>,avatar_cfg); strcpy(AvatarNodeMap[id1]-&gt;avatarjoint_id,<span class="stringliteral">&quot;113&quot;</span>); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#ad70622a475a88e7a9197d381c83d0c4d">clientname</a>,avatar_id);
<a name="l00288"></a>00288         sprintf(id1,<span class="stringliteral">&quot;%s114&quot;</span>,avatar_id); sprintf(id2,<span class="stringliteral">&quot;%s113&quot;</span>,avatar_id); <a class="code" href="client_8cpp.html#a22c9da6b0628be924a14bbf8a7355a86">addChildNode</a>(id1,id2,<span class="stringliteral">&quot;AVATAR&quot;</span>); <a class="code" href="client_8cpp.html#ae15fcf054a549f9e21198caf4498d4bb">updateAvatarNodes</a>(id1,0.399035,1.49012e-008,-3.61785e-014,-9.76641e-012,0.00063169,8.65941e-010,1); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#a7fdd491265053b6744ce2d0771018a5c">clientConfig</a>,avatar_cfg); strcpy(AvatarNodeMap[id1]-&gt;avatarjoint_id,<span class="stringliteral">&quot;114&quot;</span>); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#ad70622a475a88e7a9197d381c83d0c4d">clientname</a>,avatar_id);
<a name="l00289"></a>00289         sprintf(id1,<span class="stringliteral">&quot;%s115&quot;</span>,avatar_id); sprintf(id2,<span class="stringliteral">&quot;%s114&quot;</span>,avatar_id); <a class="code" href="client_8cpp.html#a22c9da6b0628be924a14bbf8a7355a86">addChildNode</a>(id1,id2,<span class="stringliteral">&quot;AVATAR&quot;</span>); <a class="code" href="client_8cpp.html#ae15fcf054a549f9e21198caf4498d4bb">updateAvatarNodes</a>(id1,0.396689,7.45058e-009,5.82073e-011,-9.26113e-008,-0.000631698,-8.07444e-010,1); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#a7fdd491265053b6744ce2d0771018a5c">clientConfig</a>,avatar_cfg); strcpy(AvatarNodeMap[id1]-&gt;avatarjoint_id,<span class="stringliteral">&quot;115&quot;</span>); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#ad70622a475a88e7a9197d381c83d0c4d">clientname</a>,avatar_id);
<a name="l00290"></a>00290         sprintf(id1,<span class="stringliteral">&quot;%s116&quot;</span>,avatar_id); sprintf(id2,<span class="stringliteral">&quot;%s115&quot;</span>,avatar_id); <a class="code" href="client_8cpp.html#a22c9da6b0628be924a14bbf8a7355a86">addChildNode</a>(id1,id2,<span class="stringliteral">&quot;AVATAR&quot;</span>); <a class="code" href="client_8cpp.html#ae15fcf054a549f9e21198caf4498d4bb">updateAvatarNodes</a>(id1,0.101624,-5.95767e-009,-0.136296,-2.85965e-008,-0.707107,6.55324e-008,0.707107); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#a7fdd491265053b6744ce2d0771018a5c">clientConfig</a>,avatar_cfg); strcpy(AvatarNodeMap[id1]-&gt;avatarjoint_id,<span class="stringliteral">&quot;116&quot;</span>); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#ad70622a475a88e7a9197d381c83d0c4d">clientname</a>,avatar_id);
<a name="l00291"></a>00291         sprintf(id1,<span class="stringliteral">&quot;%s117&quot;</span>,avatar_id); sprintf(id2,<span class="stringliteral">&quot;%s116&quot;</span>,avatar_id); <a class="code" href="client_8cpp.html#a22c9da6b0628be924a14bbf8a7355a86">addChildNode</a>(id1,id2,<span class="stringliteral">&quot;AVATAR&quot;</span>); <a class="code" href="client_8cpp.html#ae15fcf054a549f9e21198caf4498d4bb">updateAvatarNodes</a>(id1,0.0838147,-7.45058e-009,3.25675e-016,0,1,-4.37114e-008,0); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#a7fdd491265053b6744ce2d0771018a5c">clientConfig</a>,avatar_cfg); strcpy(AvatarNodeMap[id1]-&gt;avatarjoint_id,<span class="stringliteral">&quot;117&quot;</span>); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#ad70622a475a88e7a9197d381c83d0c4d">clientname</a>,avatar_id);
<a name="l00292"></a>00292         sprintf(id1,<span class="stringliteral">&quot;%s118&quot;</span>,avatar_id); sprintf(id2,<span class="stringliteral">&quot;%s3&quot;</span>,avatar_id); <a class="code" href="client_8cpp.html#a22c9da6b0628be924a14bbf8a7355a86">addChildNode</a>(id1,id2,<span class="stringliteral">&quot;AVATAR&quot;</span>); <a class="code" href="client_8cpp.html#ae15fcf054a549f9e21198caf4498d4bb">updateAvatarNodes</a>(id1,-0.120265,-0.0883685,-0.00162872,-2.04243e-008,7.26309e-007,1,-1.77636e-015); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#a7fdd491265053b6744ce2d0771018a5c">clientConfig</a>,avatar_cfg); strcpy(AvatarNodeMap[id1]-&gt;avatarjoint_id,<span class="stringliteral">&quot;118&quot;</span>); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#ad70622a475a88e7a9197d381c83d0c4d">clientname</a>,avatar_id);
<a name="l00293"></a>00293         sprintf(id1,<span class="stringliteral">&quot;%s119&quot;</span>,avatar_id); sprintf(id2,<span class="stringliteral">&quot;%s118&quot;</span>,avatar_id); <a class="code" href="client_8cpp.html#a22c9da6b0628be924a14bbf8a7355a86">addChildNode</a>(id1,id2,<span class="stringliteral">&quot;AVATAR&quot;</span>); <a class="code" href="client_8cpp.html#ae15fcf054a549f9e21198caf4498d4bb">updateAvatarNodes</a>(id1,0.399035,1.49012e-008,1.35595e-014,-1.0294e-011,0.00063169,-5.51985e-011,1); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#a7fdd491265053b6744ce2d0771018a5c">clientConfig</a>,avatar_cfg); strcpy(AvatarNodeMap[id1]-&gt;avatarjoint_id,<span class="stringliteral">&quot;119&quot;</span>); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#ad70622a475a88e7a9197d381c83d0c4d">clientname</a>,avatar_id);
<a name="l00294"></a>00294         sprintf(id1,<span class="stringliteral">&quot;%s120&quot;</span>,avatar_id); sprintf(id2,<span class="stringliteral">&quot;%s119&quot;</span>,avatar_id); <a class="code" href="client_8cpp.html#a22c9da6b0628be924a14bbf8a7355a86">addChildNode</a>(id1,id2,<span class="stringliteral">&quot;AVATAR&quot;</span>); <a class="code" href="client_8cpp.html#ae15fcf054a549f9e21198caf4498d4bb">updateAvatarNodes</a>(id1,0.396689,7.45058e-009,-3.25675e-016,9.26502e-008,-0.000631698,4.47002e-008,1); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#a7fdd491265053b6744ce2d0771018a5c">clientConfig</a>,avatar_cfg); strcpy(AvatarNodeMap[id1]-&gt;avatarjoint_id,<span class="stringliteral">&quot;120&quot;</span>); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#ad70622a475a88e7a9197d381c83d0c4d">clientname</a>,avatar_id);
<a name="l00295"></a>00295         sprintf(id1,<span class="stringliteral">&quot;%s121&quot;</span>,avatar_id); sprintf(id2,<span class="stringliteral">&quot;%s120&quot;</span>,avatar_id); <a class="code" href="client_8cpp.html#a22c9da6b0628be924a14bbf8a7355a86">addChildNode</a>(id1,id2,<span class="stringliteral">&quot;AVATAR&quot;</span>); <a class="code" href="client_8cpp.html#ae15fcf054a549f9e21198caf4498d4bb">updateAvatarNodes</a>(id1,0.101624,-1.34083e-008,-0.136296,-3.46237e-008,-0.707107,5.95052e-008,0.707107); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#a7fdd491265053b6744ce2d0771018a5c">clientConfig</a>,avatar_cfg); strcpy(AvatarNodeMap[id1]-&gt;avatarjoint_id,<span class="stringliteral">&quot;121&quot;</span>); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#ad70622a475a88e7a9197d381c83d0c4d">clientname</a>,avatar_id);
<a name="l00296"></a>00296         sprintf(id1,<span class="stringliteral">&quot;%s122&quot;</span>,avatar_id); sprintf(id2,<span class="stringliteral">&quot;%s121&quot;</span>,avatar_id); <a class="code" href="client_8cpp.html#a22c9da6b0628be924a14bbf8a7355a86">addChildNode</a>(id1,id2,<span class="stringliteral">&quot;AVATAR&quot;</span>); <a class="code" href="client_8cpp.html#ae15fcf054a549f9e21198caf4498d4bb">updateAvatarNodes</a>(id1,0.0838147,0,0,0,0,0,1); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#a7fdd491265053b6744ce2d0771018a5c">clientConfig</a>,avatar_cfg); strcpy(AvatarNodeMap[id1]-&gt;avatarjoint_id,<span class="stringliteral">&quot;122&quot;</span>); strcpy(AvatarNodeMap[id1]-&gt;<a class="code" href="class_beaming_room.html#ad70622a475a88e7a9197d381c83d0c4d">clientname</a>,avatar_id);
<a name="l00297"></a>00297         <span class="keywordflow">return</span> 1;
<a name="l00298"></a>00298 }
<a name="l00299"></a>00299 
<a name="l00300"></a>00300 
<a name="l00301"></a>00301 <span class="preprocessor">#ifdef WIN32</span>
<a name="l00302"></a>00302 <span class="preprocessor"></span><a class="code" href="client_8h.html#acfdc053623a87a1a1d4adf03e6b6678d">CLIENT_LIB_EXPORT</a> <span class="keywordtype">void</span> <a class="code" href="client_8cpp.html#a5d8f1002952639c6e140599d96c6cb03">addNode</a>(<span class="keywordtype">char</span> *<span class="keywordtype">id</span>, <span class="keywordtype">char</span> node_type[])
<a name="l00303"></a>00303 <span class="preprocessor">#else</span>
<a name="l00304"></a><a class="code" href="client_8h.html#aff88ca52f3e6c16cbe073f33bc3585c0">00304</a> <span class="preprocessor"></span><span class="keywordtype">void</span> <a class="code" href="client_8cpp.html#a5d8f1002952639c6e140599d96c6cb03">addNode</a>(<span class="keywordtype">char</span> *<span class="keywordtype">id</span>, <span class="keywordtype">char</span> node_type[])
<a name="l00305"></a>00305 <span class="preprocessor">#endif</span>
<a name="l00306"></a>00306 <span class="preprocessor"></span>{
<a name="l00307"></a>00307         <span class="keywordtype">int</span> i = 0; 
<a name="l00308"></a>00308         <span class="keywordflow">if</span> (<a class="code" href="client_8cpp.html#ab9561565dc809c4fd607d84b43952c5a">viewing_only</a>) <span class="keywordflow">return</span>;
<a name="l00309"></a>00309         <span class="keywordflow">if</span> (node_type_map.find(node_type) == node_type_map.end()) {
<a name="l00310"></a>00310                 printf(<span class="stringliteral">&quot;Incorrect node type (see BeamingDataType in documentation\n&quot;</span>);
<a name="l00311"></a>00311                 <span class="keywordflow">return</span>; 
<a name="l00312"></a>00312         }
<a name="l00313"></a>00313         <span class="comment">//convert to uppercase letters</span>
<a name="l00314"></a>00314         <span class="comment">/*while (node_type[i])</span>
<a name="l00315"></a>00315 <span class="comment">        {</span>
<a name="l00316"></a>00316 <span class="comment">                node_type[i] = (char)toupper(node_type[i]);</span>
<a name="l00317"></a>00317 <span class="comment">                i++;</span>
<a name="l00318"></a>00318 <span class="comment">        }*/</span>
<a name="l00319"></a>00319         <span class="comment">//create a new replica instance and tell the replication system about it.</span>
<a name="l00320"></a>00320         <span class="comment">//first update needed after node created</span>
<a name="l00321"></a>00321         <span class="keywordflow">switch</span> (node_type_map[node_type])
<a name="l00322"></a>00322         {
<a name="l00323"></a>00323         <span class="keywordflow">case</span> <a class="code" href="client_8h.html#a493782fa0468226e195afc328221e1c8a2ca377302a6c9197300bb2223583ed3f">AVATAR</a>:
<a name="l00324"></a>00324                 AvatarNodeMap[id] = <span class="keyword">new</span> <a class="code" href="class_beaming_avatar_joint_replica.html" title="Avatar Joint Replica.">BeamingAvatarJointReplica</a>;
<a name="l00325"></a>00325                 <a class="code" href="client_8cpp.html#ae15fcf054a549f9e21198caf4498d4bb">updateAvatarNodes</a>(<span class="keywordtype">id</span>,0.f,1.f,0.f,0.f,1.f,0.f,0.f);
<a name="l00326"></a>00326                 replicaManager.Reference(AvatarNodeMap[<span class="keywordtype">id</span>]);
<a name="l00327"></a>00327                 <span class="comment">//copy the global id, name and cfg_file here for backwards compatibility, gets overwritten in addRocketBoxAvatar</span>
<a name="l00328"></a>00328                 strcpy(AvatarNodeMap[<span class="keywordtype">id</span>]-&gt;<a class="code" href="class_beaming_room.html#a7fdd491265053b6744ce2d0771018a5c">clientConfig</a>,<a class="code" href="client_8cpp.html#a2c2eb166cc67e18c577471bea6cf78ea">my_config</a>.c_str()); 
<a name="l00329"></a>00329                 strcpy(AvatarNodeMap[<span class="keywordtype">id</span>]-&gt;<a class="code" href="class_beaming_room.html#ad70622a475a88e7a9197d381c83d0c4d">clientname</a>,<a class="code" href="client_8cpp.html#a6118d7c546dddc5fa44618f15b1d96db">client_name</a>);
<a name="l00330"></a>00330                 strcpy(AvatarNodeMap[<span class="keywordtype">id</span>]-&gt;avatarjoint_id,<span class="keywordtype">id</span>);
<a name="l00331"></a>00331                 strcpy(AvatarNodeMap[<span class="keywordtype">id</span>]-&gt;<a class="code" href="class_beaming_room.html#ad5c5870606bd59c0a233b687af73ec8a">clientType</a>,node_type);
<a name="l00332"></a>00332                 <span class="keywordflow">break</span>;
<a name="l00333"></a>00333         <span class="keywordflow">case</span> <a class="code" href="client_8h.html#a493782fa0468226e195afc328221e1c8afd8f7c0209742426aaf9ab7a17b1a50d">FACIAL</a>:
<a name="l00334"></a>00334                 FacialNodeMap[id] = <span class="keyword">new</span> <a class="code" href="class_beaming_facial_replica.html" title="Facial Replica.">BeamingFacialReplica</a>;
<a name="l00335"></a>00335                 <a class="code" href="client_8cpp.html#ab6cf7aafc84a6ac5df7a4002567d5f22" title="updateFacialNodes(node_id, bool, 5 floats) updates the data for the FACIAL nodes that you created...">updateFacialNodes</a>(<span class="keywordtype">id</span>,<span class="keyword">false</span>,0.f,0.f,0.f,0.f,0.f);
<a name="l00336"></a>00336                 replicaManager.Reference(FacialNodeMap[<span class="keywordtype">id</span>]);
<a name="l00337"></a>00337                 strcpy(FacialNodeMap[<span class="keywordtype">id</span>]-&gt;<a class="code" href="class_beaming_room.html#ad5c5870606bd59c0a233b687af73ec8a">clientType</a>,node_type);
<a name="l00338"></a>00338                 <span class="keywordflow">break</span>;
<a name="l00339"></a>00339         <span class="keywordflow">case</span> <a class="code" href="client_8h.html#a493782fa0468226e195afc328221e1c8a54d4a27e54eb1e49b0a92db604539946">EMOTION</a>:
<a name="l00340"></a>00340                 EmotionNodeMap[id] = <span class="keyword">new</span> <a class="code" href="class_beaming_emotion_replica.html" title="Emotion Replica - Affective State.">BeamingEmotionReplica</a>;
<a name="l00341"></a>00341                 <a class="code" href="client_8cpp.html#a23c8c932283df62cd85c36cea3db2a03" title="updateEmotionNodes(node_id, 3 doubles) updates the data for the EMOTION nodes that you created...">updateEmotionNodes</a>(<span class="keywordtype">id</span>,0,0,0);
<a name="l00342"></a>00342                 replicaManager.Reference(EmotionNodeMap[<span class="keywordtype">id</span>]);
<a name="l00343"></a>00343                 strcpy(EmotionNodeMap[<span class="keywordtype">id</span>]-&gt;<a class="code" href="class_beaming_room.html#ad5c5870606bd59c0a233b687af73ec8a">clientType</a>,node_type);
<a name="l00344"></a>00344                 <span class="keywordflow">break</span>;
<a name="l00345"></a>00345         <span class="keywordflow">case</span> <a class="code" href="client_8h.html#a493782fa0468226e195afc328221e1c8a0e1e918a80f84992ae08463f076d5dc8">VIDEO</a>:
<a name="l00346"></a>00346                 VideoNodeMap[id] = <span class="keyword">new</span> <a class="code" href="class_beaming_video_replica.html" title="Video Replica.">BeamingVideoReplica</a>;
<a name="l00347"></a>00347                 <a class="code" href="client_8cpp.html#a3f4d7d8172d87e298dba1f4bfdf27dc6" title="updateVideoNodes(node_id, 2 strings, 3 integers and 1 double) updates the data for the VIDEO nodes th...">updateVideoNodes</a>(<span class="keywordtype">id</span>,<span class="stringliteral">&quot;127.0.0.1&quot;</span>,0,<span class="stringliteral">&quot;http://localhost&quot;</span>,1,1,1);
<a name="l00348"></a>00348                 replicaManager.Reference(VideoNodeMap[<span class="keywordtype">id</span>]);
<a name="l00349"></a>00349                 strcpy(VideoNodeMap[<span class="keywordtype">id</span>]-&gt;<a class="code" href="class_beaming_room.html#ad5c5870606bd59c0a233b687af73ec8a">clientType</a>,node_type);
<a name="l00350"></a>00350                 <span class="keywordflow">break</span>;
<a name="l00351"></a>00351         <span class="keywordflow">case</span> <a class="code" href="client_8h.html#a493782fa0468226e195afc328221e1c8a173913c4fca8bf1331575054152c4ebd">TACTILE</a>:
<a name="l00352"></a>00352                 TactileNodeMap[id] = <span class="keyword">new</span> <a class="code" href="class_beaming_tactile_replica.html" title="Tactile Replica.">BeamingTactileReplica</a>;
<a name="l00353"></a>00353                 <a class="code" href="client_8cpp.html#abbb8dae5fba841e2d3851a5bbdbe71e2" title="updateTactileNodes(node_id, 1 float, 2 doubles) updates the data for the TACTILE nodes that you creat...">updateTactileNodes</a>(<span class="keywordtype">id</span>,0,0,0);
<a name="l00354"></a>00354                 replicaManager.Reference(TactileNodeMap[<span class="keywordtype">id</span>]);
<a name="l00355"></a>00355                 strcpy(TactileNodeMap[<span class="keywordtype">id</span>]-&gt;<a class="code" href="class_beaming_room.html#ad5c5870606bd59c0a233b687af73ec8a">clientType</a>,node_type);
<a name="l00356"></a>00356                 <span class="keywordflow">break</span>;
<a name="l00357"></a>00357         <span class="keywordflow">case</span> <a class="code" href="client_8h.html#a493782fa0468226e195afc328221e1c8aabea9be20feeb2150a8ffbd68625beb4">ROBOT</a>:
<a name="l00358"></a>00358                 RobotNodeMap[id] = <span class="keyword">new</span> <a class="code" href="class_beaming_robot_replica.html" title="Kali-Type Robot Replica.">BeamingRobotReplica</a>;
<a name="l00359"></a>00359                 <a class="code" href="client_8cpp.html#aa43f89f2489afb160c61e0aae5780518" title="updateRobotNodes(node_id, 3 integers and 9 floats) updates the data for the ROBOT nodes that you crea...">updateRobotNodes</a>(<span class="keywordtype">id</span>,0,0,0,0,0,0,0,1,0,0,0,0);
<a name="l00360"></a>00360                 replicaManager.Reference(RobotNodeMap[<span class="keywordtype">id</span>]);
<a name="l00361"></a>00361                 strcpy(RobotNodeMap[<span class="keywordtype">id</span>]-&gt;<a class="code" href="class_beaming_room.html#ad5c5870606bd59c0a233b687af73ec8a">clientType</a>,node_type);
<a name="l00362"></a>00362                 <span class="keywordflow">break</span>;
<a name="l00363"></a>00363         <span class="keywordflow">case</span> <a class="code" href="client_8h.html#a493782fa0468226e195afc328221e1c8a6f78e99ade8d62ec44d30013723e6e75">OBJECT</a>:
<a name="l00364"></a>00364                 ObjectNodeMap[id] = <span class="keyword">new</span> <a class="code" href="class_beaming_object_replica.html" title="Object Replica - 3D Models.">BeamingObjectReplica</a>;
<a name="l00365"></a>00365                 <a class="code" href="client_8cpp.html#af540238ffef4cb9d13381957d4e6545b" title="updateObjectNodes(node_id, 2 strings, 1 integer and 7 floats) updates the data for the OBJECT nodes t...">updateObjectNodes</a>(<span class="keywordtype">id</span>,<span class="stringliteral">&quot;127.0.0.1&quot;</span>,0,<span class="stringliteral">&quot;http://localhost&quot;</span>,0,0,0,0,1,0,0);
<a name="l00366"></a>00366                 replicaManager.Reference(ObjectNodeMap[<span class="keywordtype">id</span>]);
<a name="l00367"></a>00367                 strcpy(ObjectNodeMap[<span class="keywordtype">id</span>]-&gt;<a class="code" href="class_beaming_room.html#ad5c5870606bd59c0a233b687af73ec8a">clientType</a>,node_type);
<a name="l00368"></a>00368                 <span class="keywordflow">break</span>;
<a name="l00369"></a>00369         <span class="keywordflow">case</span> <a class="code" href="client_8h.html#a493782fa0468226e195afc328221e1c8ad45d481f1c1a6029ce6a398e52e53bfd">AUDIO</a>:
<a name="l00370"></a>00370                 AudioNodeMap[id] = <span class="keyword">new</span> <a class="code" href="class_beaming_audio_replica.html" title="Audio Replica.">BeamingAudioReplica</a>;
<a name="l00371"></a>00371                 <a class="code" href="client_8cpp.html#a09773e6b9675e966e270ef75445690df" title="updateAudioNodes(node_id, 3 strings and 1 integer) updates the data for the AUDIO nodes that you crea...">updateAudioNodes</a>(<span class="keywordtype">id</span>,<span class="stringliteral">&quot;127.0.0.1&quot;</span>,0,<span class="stringliteral">&quot;http://localhost&quot;</span>,<span class="stringliteral">&quot;config file&quot;</span>);
<a name="l00372"></a>00372                 replicaManager.Reference(AudioNodeMap[<span class="keywordtype">id</span>]);
<a name="l00373"></a>00373                 strcpy(AudioNodeMap[<span class="keywordtype">id</span>]-&gt;<a class="code" href="class_beaming_room.html#ad5c5870606bd59c0a233b687af73ec8a">clientType</a>,node_type);
<a name="l00374"></a>00374                 <span class="keywordflow">break</span>;
<a name="l00375"></a>00375         <span class="keywordflow">case</span> <a class="code" href="client_8h.html#a493782fa0468226e195afc328221e1c8ab2e3d2c10bc4d3eef3a542bf6b01c0a2">POINTCLOUD</a>:
<a name="l00376"></a>00376                 PointCloudNodeMap[id] = <span class="keyword">new</span> <a class="code" href="class_beaming_point_cloud_replica.html#a25a6f442990e8d485dd2a4b97f3ee016">BeamingPointCloudReplica</a>;
<a name="l00377"></a>00377                 <a class="code" href="client_8cpp.html#a52be732c7b63e4e1f28ff7d996f22141" title="updatePointCloudNodes(node_id, 2 strings, 2 integers, 1 double and 1 boolean) updates the data for th...">updatePointCloudNodes</a>(<span class="keywordtype">id</span>,<span class="stringliteral">&quot;127.0.0.1&quot;</span>,0,<span class="stringliteral">&quot;http://localhost&quot;</span>,0,0,0);
<a name="l00378"></a>00378                 replicaManager.Reference(PointCloudNodeMap[<span class="keywordtype">id</span>]);
<a name="l00379"></a>00379                 strcpy(PointCloudNodeMap[<span class="keywordtype">id</span>]-&gt;<a class="code" href="class_beaming_room.html#ad5c5870606bd59c0a233b687af73ec8a">clientType</a>,node_type);
<a name="l00380"></a>00380                 <span class="keywordflow">break</span>;
<a name="l00381"></a>00381         <span class="keywordflow">case</span> <a class="code" href="client_8h.html#a493782fa0468226e195afc328221e1c8a9e022e6380da28dd73210ed34b137c36">GENERIC</a>:
<a name="l00382"></a>00382                 GenericNodeMap[id] = <span class="keyword">new</span> <a class="code" href="class_beaming_generic_replica.html" title="Generic Replica (to enable writing of generic replica up to 1024 bytes)">BeamingGenericReplica</a>;
<a name="l00383"></a>00383                 <span class="keywordtype">void</span> *data = malloc(1024);
<a name="l00384"></a>00384                 memset(data,0x00,1024);
<a name="l00385"></a>00385                 <a class="code" href="client_8cpp.html#a7a5a74b216f1373b7ae315722efaf571" title="updateGenericNodes updates a shared generic data and its size">updateGenericNodes</a>(<span class="keywordtype">id</span>,data,1024);
<a name="l00386"></a>00386                 replicaManager.Reference(GenericNodeMap[<span class="keywordtype">id</span>]);
<a name="l00387"></a>00387                 strcpy(GenericNodeMap[<span class="keywordtype">id</span>]-&gt;<a class="code" href="class_beaming_room.html#ad5c5870606bd59c0a233b687af73ec8a">clientType</a>,node_type);
<a name="l00388"></a>00388                 <span class="keywordflow">break</span>;
<a name="l00389"></a>00389         }
<a name="l00390"></a>00390 }
<a name="l00391"></a>00391 
<a name="l00392"></a>00392 
<a name="l00393"></a>00393 <span class="preprocessor">#ifdef WIN32</span>
<a name="l00394"></a>00394 <span class="preprocessor"></span><a class="code" href="client_8h.html#acfdc053623a87a1a1d4adf03e6b6678d">CLIENT_LIB_EXPORT</a> <span class="keywordtype">void</span> <a class="code" href="client_8cpp.html#a22c9da6b0628be924a14bbf8a7355a86">addChildNode</a>(<span class="keywordtype">char</span> *<span class="keywordtype">id</span>, <span class="keywordtype">char</span> *parent_id, <span class="keywordtype">char</span> node_type[])
<a name="l00395"></a>00395 <span class="preprocessor">#else</span>
<a name="l00396"></a><a class="code" href="client_8h.html#abf406abb6070b400830baa611555afea">00396</a> <span class="preprocessor"></span><span class="keywordtype">void</span> <a class="code" href="client_8cpp.html#a22c9da6b0628be924a14bbf8a7355a86">addChildNode</a>(<span class="keywordtype">char</span> *<span class="keywordtype">id</span>, <span class="keywordtype">char</span> *parent_id, <span class="keywordtype">char</span> node_type[])
<a name="l00397"></a>00397 <span class="preprocessor">#endif</span>
<a name="l00398"></a>00398 <span class="preprocessor"></span>{
<a name="l00399"></a>00399         <span class="keywordflow">if</span> (<a class="code" href="client_8cpp.html#ab9561565dc809c4fd607d84b43952c5a">viewing_only</a>) <span class="keywordflow">return</span>;
<a name="l00400"></a>00400         <a class="code" href="client_8cpp.html#a5d8f1002952639c6e140599d96c6cb03">addNode</a>(<span class="keywordtype">id</span>,node_type);
<a name="l00401"></a>00401         <span class="keywordflow">if</span> (AvatarNodeMap.find(parent_id) != AvatarNodeMap.end()) <span class="comment">//if id exists in node database, then set parent</span>
<a name="l00402"></a>00402         {
<a name="l00403"></a>00403                 AvatarNodeMap[id]-&gt;parentbone = AvatarNodeMap[parent_id]-&gt;avatarjoint_id;
<a name="l00404"></a>00404         }
<a name="l00405"></a>00405 }
<a name="l00406"></a>00406 
<a name="l00407"></a>00407 
<a name="l00408"></a>00408 <span class="preprocessor">#ifdef WIN32</span>
<a name="l00409"></a>00409 <span class="preprocessor"></span><a class="code" href="client_8h.html#acfdc053623a87a1a1d4adf03e6b6678d">CLIENT_LIB_EXPORT</a> <span class="keywordtype">int</span> <a class="code" href="client_8cpp.html#a4daffd5dce4f1b7d588c096e8c5cd0e7" title="Deletes all 123 nodes for the specified RocketBox AVATAR id.">deleteRocketBoxAvatar</a>(<span class="keywordtype">char</span> *avatar_id)
<a name="l00410"></a>00410 <span class="preprocessor">#else</span>
<a name="l00411"></a><a class="code" href="client_8h.html#af47dca67db20b885f963b10267a4599a">00411</a> <span class="preprocessor"></span><span class="keywordtype">int</span> <a class="code" href="client_8cpp.html#a4daffd5dce4f1b7d588c096e8c5cd0e7" title="Deletes all 123 nodes for the specified RocketBox AVATAR id.">deleteRocketBoxAvatar</a>(<span class="keywordtype">char</span> *avatar_id)
<a name="l00412"></a>00412 <span class="preprocessor">#endif</span>
<a name="l00413"></a>00413 <span class="preprocessor"></span>{
<a name="l00414"></a>00414         <span class="keywordtype">char</span> <span class="keywordtype">id</span>[128];
<a name="l00415"></a>00415         <span class="keywordtype">int</span> i;
<a name="l00416"></a>00416         <span class="keywordflow">for</span> ( <span class="keywordtype">int</span> i=0; i&lt;123; i++ )
<a name="l00417"></a>00417         {
<a name="l00418"></a>00418                 sprintf(<span class="keywordtype">id</span>,<span class="stringliteral">&quot;%s%d&quot;</span>,avatar_id,i); 
<a name="l00419"></a>00419                 std::map&lt;std::string, BeamingAvatarJointReplica*&gt;::iterator it = AvatarNodeMap.find(<span class="keywordtype">id</span>);
<a name="l00420"></a>00420                 <span class="keywordflow">if</span> (it != AvatarNodeMap.end()) <span class="comment">//if id exists in node database, delete</span>
<a name="l00421"></a>00421                 {
<a name="l00422"></a>00422                         replicaManager.BroadcastDestruction(AvatarNodeMap[<span class="keywordtype">id</span>],UNASSIGNED_SYSTEM_ADDRESS);
<a name="l00423"></a>00423                         replicaManager.Dereference(AvatarNodeMap[<span class="keywordtype">id</span>]);
<a name="l00424"></a>00424                         <span class="keyword">delete</span> AvatarNodeMap[id]; <span class="comment">//destructor in replica3 broadcasts destruction</span>
<a name="l00425"></a>00425                         AvatarNodeMap.erase(<span class="keywordtype">id</span>);
<a name="l00426"></a>00426                 }
<a name="l00427"></a>00427         }
<a name="l00428"></a>00428         <span class="keywordflow">return</span> 1;
<a name="l00429"></a>00429 }
<a name="l00430"></a>00430 
<a name="l00431"></a>00431 
<a name="l00432"></a>00432 <span class="preprocessor">#ifdef WIN32</span>
<a name="l00433"></a>00433 <span class="preprocessor"></span><a class="code" href="client_8h.html#acfdc053623a87a1a1d4adf03e6b6678d">CLIENT_LIB_EXPORT</a> <span class="keywordtype">int</span> <a class="code" href="client_8cpp.html#a2ff5dc0a285a4b8d06489e2728b20355" title="sets the firstname and lastname for the avatar created with addRocketBoxAvatar">setAvatarName</a>(<span class="keywordtype">char</span> *avatar_id, <span class="keywordtype">char</span> *firstname, <span class="keywordtype">char</span> *lastname)
<a name="l00434"></a>00434 <span class="preprocessor">#else</span>
<a name="l00435"></a><a class="code" href="client_8h.html#a2109a573f49526b4c1da10bdd301437a">00435</a> <span class="preprocessor"></span><span class="keywordtype">int</span> <a class="code" href="client_8cpp.html#a2ff5dc0a285a4b8d06489e2728b20355" title="sets the firstname and lastname for the avatar created with addRocketBoxAvatar">setAvatarName</a>(<span class="keywordtype">char</span> *avatar_id, <span class="keywordtype">char</span> *firstname, <span class="keywordtype">char</span> *lastname)
<a name="l00436"></a>00436 <span class="preprocessor">#endif</span>
<a name="l00437"></a>00437 <span class="preprocessor"></span>{
<a name="l00438"></a>00438         <span class="keywordflow">if</span> (<a class="code" href="client_8cpp.html#ab9561565dc809c4fd607d84b43952c5a">viewing_only</a>) <span class="keywordflow">return</span> 0;
<a name="l00439"></a>00439         <span class="keywordtype">char</span> <span class="keywordtype">id</span>[128];
<a name="l00440"></a>00440         sprintf(<span class="keywordtype">id</span>,<span class="stringliteral">&quot;%s0&quot;</span>,avatar_id); 
<a name="l00441"></a>00441         std::map&lt;std::string, BeamingAvatarJointReplica*&gt;::iterator it = AvatarNodeMap.find(<span class="keywordtype">id</span>);
<a name="l00442"></a>00442         <span class="keywordflow">if</span> (it != AvatarNodeMap.end()) <span class="comment">//if id exists in node database, then update</span>
<a name="l00443"></a>00443         {
<a name="l00444"></a>00444                 strcpy(it-&gt;second-&gt;fname,firstname);
<a name="l00445"></a>00445                 strcpy(it-&gt;second-&gt;lname,lastname);
<a name="l00446"></a>00446                 <span class="keywordflow">return</span> 1;
<a name="l00447"></a>00447         }
<a name="l00448"></a>00448         <span class="keywordflow">else</span> {
<a name="l00449"></a>00449                 <span class="comment">//printf(&quot;no node %s to update\n&quot;,id);</span>
<a name="l00450"></a>00450                 <span class="keywordflow">return</span> 0;
<a name="l00451"></a>00451         }
<a name="l00452"></a>00452 }
<a name="l00453"></a>00453 
<a name="l00454"></a>00454 
<a name="l00455"></a>00455 <span class="preprocessor">#ifdef WIN32</span>
<a name="l00456"></a>00456 <span class="preprocessor"></span><a class="code" href="client_8h.html#acfdc053623a87a1a1d4adf03e6b6678d">CLIENT_LIB_EXPORT</a> <span class="keywordtype">int</span> <a class="code" href="client_8cpp.html#adb5e5bff73bc8c4f5cbd4cf984f39aca">updateNodes</a>(<span class="keywordtype">char</span> *<span class="keywordtype">id</span>, <span class="keywordtype">float</span> x, <span class="keywordtype">float</span> y, <span class="keywordtype">float</span> z, <span class="keywordtype">float</span> rx, <span class="keywordtype">float</span> ry, <span class="keywordtype">float</span> rz, <span class="keywordtype">float</span> w)
<a name="l00457"></a>00457 <span class="preprocessor">#else</span>
<a name="l00458"></a><a class="code" href="client_8h.html#ad8b8121b4027a03d5c2a5dd0e40b2710">00458</a> <span class="preprocessor"></span><span class="keywordtype">int</span> <a class="code" href="client_8cpp.html#adb5e5bff73bc8c4f5cbd4cf984f39aca">updateNodes</a>(<span class="keywordtype">char</span> *<span class="keywordtype">id</span>, <span class="keywordtype">float</span> x, <span class="keywordtype">float</span> y, <span class="keywordtype">float</span> z, <span class="keywordtype">float</span> rx, <span class="keywordtype">float</span> ry, <span class="keywordtype">float</span> rz, <span class="keywordtype">float</span> w)
<a name="l00459"></a>00459 <span class="preprocessor">#endif</span>
<a name="l00460"></a>00460 <span class="preprocessor"></span>{
<a name="l00461"></a>00461         <span class="keywordflow">if</span> (<a class="code" href="client_8cpp.html#ab9561565dc809c4fd607d84b43952c5a">viewing_only</a>) <span class="keywordflow">return</span> 0;
<a name="l00462"></a>00462         <a class="code" href="client_8cpp.html#ae15fcf054a549f9e21198caf4498d4bb">updateAvatarNodes</a>(<span class="keywordtype">id</span>,x,y,z,rx,ry,rz,w);
<a name="l00463"></a>00463         <span class="keywordflow">return</span> 1;
<a name="l00464"></a>00464 }
<a name="l00465"></a>00465 
<a name="l00466"></a>00466 
<a name="l00467"></a>00467 <span class="preprocessor">#ifdef WIN32</span>
<a name="l00468"></a>00468 <span class="preprocessor"></span><a class="code" href="client_8h.html#acfdc053623a87a1a1d4adf03e6b6678d">CLIENT_LIB_EXPORT</a> <span class="keywordtype">int</span> <a class="code" href="client_8cpp.html#aa7db119a47bec78a32f84652bb2412c2">updateRocketBoxAvatar</a>(<span class="keywordtype">char</span> *avatar_id, <span class="keywordtype">char</span> *node_id, <span class="keywordtype">float</span> x, <span class="keywordtype">float</span> y, <span class="keywordtype">float</span> z, <span class="keywordtype">float</span> rx, <span class="keywordtype">float</span> ry, <span class="keywordtype">float</span> rz, <span class="keywordtype">float</span> w)
<a name="l00469"></a>00469 <span class="preprocessor">#else</span>
<a name="l00470"></a><a class="code" href="client_8h.html#a65c402c4d43f98ee39e780f04c7bc8b4">00470</a> <span class="preprocessor"></span><span class="keywordtype">int</span> <a class="code" href="client_8cpp.html#aa7db119a47bec78a32f84652bb2412c2">updateRocketBoxAvatar</a>(<span class="keywordtype">char</span> *avatar_id, <span class="keywordtype">char</span> *node_id, <span class="keywordtype">float</span> x, <span class="keywordtype">float</span> y, <span class="keywordtype">float</span> z, <span class="keywordtype">float</span> rx, <span class="keywordtype">float</span> ry, <span class="keywordtype">float</span> rz, <span class="keywordtype">float</span> w)
<a name="l00471"></a>00471 <span class="preprocessor">#endif</span>
<a name="l00472"></a>00472 <span class="preprocessor"></span>{
<a name="l00473"></a>00473         <span class="keywordflow">if</span> (<a class="code" href="client_8cpp.html#ab9561565dc809c4fd607d84b43952c5a">viewing_only</a>) <span class="keywordflow">return</span> 0;
<a name="l00474"></a>00474         <span class="keywordtype">char</span> id1[128];
<a name="l00475"></a>00475         sprintf(id1,<span class="stringliteral">&quot;%s%s&quot;</span>,avatar_id,node_id); 
<a name="l00476"></a>00476         <span class="keywordflow">return</span> <a class="code" href="client_8cpp.html#ae15fcf054a549f9e21198caf4498d4bb">updateAvatarNodes</a>(id1,x,y,z,rx,ry,rz,w);
<a name="l00477"></a>00477 }
<a name="l00478"></a>00478 
<a name="l00479"></a>00479 <span class="preprocessor">#ifdef WIN32</span>
<a name="l00480"></a>00480 <span class="preprocessor"></span><a class="code" href="client_8h.html#acfdc053623a87a1a1d4adf03e6b6678d">CLIENT_LIB_EXPORT</a> <span class="keywordtype">int</span> <a class="code" href="client_8cpp.html#ae15fcf054a549f9e21198caf4498d4bb">updateAvatarNodes</a>(<span class="keywordtype">char</span> *<span class="keywordtype">id</span>, <span class="keywordtype">float</span> x, <span class="keywordtype">float</span> y, <span class="keywordtype">float</span> z, <span class="keywordtype">float</span> rx, <span class="keywordtype">float</span> ry, <span class="keywordtype">float</span> rz, <span class="keywordtype">float</span> w)
<a name="l00481"></a>00481 <span class="preprocessor">#else</span>
<a name="l00482"></a><a class="code" href="client_8h.html#ab70cfdde0fc580ed0f4cbdd624b0af71">00482</a> <span class="preprocessor"></span><span class="keywordtype">int</span> <a class="code" href="client_8cpp.html#ae15fcf054a549f9e21198caf4498d4bb">updateAvatarNodes</a>(<span class="keywordtype">char</span> *<span class="keywordtype">id</span>, <span class="keywordtype">float</span> x, <span class="keywordtype">float</span> y, <span class="keywordtype">float</span> z, <span class="keywordtype">float</span> rx, <span class="keywordtype">float</span> ry, <span class="keywordtype">float</span> rz, <span class="keywordtype">float</span> w)
<a name="l00483"></a>00483 <span class="preprocessor">#endif</span>
<a name="l00484"></a>00484 <span class="preprocessor"></span>{
<a name="l00485"></a>00485         <span class="keywordflow">if</span> (<a class="code" href="client_8cpp.html#ab9561565dc809c4fd607d84b43952c5a">viewing_only</a>) <span class="keywordflow">return</span> 0;
<a name="l00486"></a>00486         std::map&lt;std::string, BeamingAvatarJointReplica*&gt;::iterator it = AvatarNodeMap.find(<span class="keywordtype">id</span>);
<a name="l00487"></a>00487         <span class="keywordflow">if</span> (it != AvatarNodeMap.end()) <span class="comment">//if id exists in node database, then update</span>
<a name="l00488"></a>00488         {
<a name="l00489"></a>00489                 <span class="comment">//strcpy(it-&gt;second-&gt;avatarjoint_id,id);</span>
<a name="l00490"></a>00490                 <span class="comment">//rounding floats to 4 decimal places here to avoid network flooding due to very tiny differences</span>
<a name="l00491"></a>00491                 it-&gt;second-&gt;position.x = floor((x*10000.f)+0.5f)/10000.f; 
<a name="l00492"></a>00492                 it-&gt;second-&gt;position.y = floor((y*10000.f)+0.5f)/10000.f; 
<a name="l00493"></a>00493                 it-&gt;second-&gt;position.z = floor((z*10000.f)+0.5f)/10000.f;
<a name="l00494"></a>00494                 it-&gt;second-&gt;orientation.x = floor((rx*10000.f)+0.5f)/10000.f;
<a name="l00495"></a>00495                 it-&gt;second-&gt;orientation.y = floor((ry*10000.f)+0.5f)/10000.f;
<a name="l00496"></a>00496                 it-&gt;second-&gt;orientation.z = floor((rz*10000.f)+0.5f)/10000.f;
<a name="l00497"></a>00497                 it-&gt;second-&gt;orientation.w = floor((w*10000.f)+0.5f)/10000.f;
<a name="l00498"></a>00498                 <span class="keywordflow">return</span> 1;
<a name="l00499"></a>00499         }
<a name="l00500"></a>00500         <span class="keywordflow">else</span> {
<a name="l00501"></a>00501                 <span class="comment">//printf(&quot;no node %s to update\n&quot;,id);</span>
<a name="l00502"></a>00502                 <span class="keywordflow">return</span> 0;
<a name="l00503"></a>00503         }
<a name="l00504"></a>00504 }
<a name="l00505"></a>00505 
<a name="l00506"></a>00506 
<a name="l00507"></a>00507 <span class="preprocessor">#ifdef WIN32</span>
<a name="l00508"></a>00508 <span class="preprocessor"></span><a class="code" href="client_8h.html#acfdc053623a87a1a1d4adf03e6b6678d">CLIENT_LIB_EXPORT</a> <span class="keywordtype">int</span> <a class="code" href="client_8cpp.html#a7a5a74b216f1373b7ae315722efaf571" title="updateGenericNodes updates a shared generic data and its size">updateGenericNodes</a>(<span class="keywordtype">char</span> *<span class="keywordtype">id</span>, <span class="keywordtype">void</span> *pdata, <span class="keywordtype">int</span> psize)
<a name="l00509"></a>00509 <span class="preprocessor">#else</span>
<a name="l00510"></a><a class="code" href="client_8h.html#ab8cd82ade232194b338f97f712295954">00510</a> <span class="preprocessor"></span><span class="keywordtype">int</span> <a class="code" href="client_8cpp.html#a7a5a74b216f1373b7ae315722efaf571" title="updateGenericNodes updates a shared generic data and its size">updateGenericNodes</a>(<span class="keywordtype">char</span> *<span class="keywordtype">id</span>, <span class="keywordtype">void</span> *pdata, <span class="keywordtype">int</span> psize)
<a name="l00511"></a>00511 <span class="preprocessor">#endif</span>
<a name="l00512"></a>00512 <span class="preprocessor"></span>{
<a name="l00513"></a>00513         <span class="keywordflow">if</span> (<a class="code" href="client_8cpp.html#ab9561565dc809c4fd607d84b43952c5a">viewing_only</a>) <span class="keywordflow">return</span> 0;
<a name="l00514"></a>00514         std::map&lt;std::string, BeamingGenericReplica*&gt;::iterator it = GenericNodeMap.find(<span class="keywordtype">id</span>);
<a name="l00515"></a>00515         <span class="keywordflow">if</span> (it != GenericNodeMap.end()) <span class="comment">//if id exists in node database, then update</span>
<a name="l00516"></a>00516         {
<a name="l00517"></a>00517                 strcpy(it-&gt;second-&gt;clientname,<a class="code" href="client_8cpp.html#a6118d7c546dddc5fa44618f15b1d96db">client_name</a>);
<a name="l00518"></a>00518                 strcpy(it-&gt;second-&gt;clientConfig,<a class="code" href="client_8cpp.html#a2c2eb166cc67e18c577471bea6cf78ea">my_config</a>.c_str());
<a name="l00519"></a>00519                 strcpy(it-&gt;second-&gt;generic_id,<span class="keywordtype">id</span>);
<a name="l00520"></a>00520                 memcpy ( it-&gt;second-&gt;anydata, pdata, 1024 );
<a name="l00521"></a>00521                 it-&gt;second-&gt;datasize = psize; 
<a name="l00522"></a>00522                 <span class="comment">/*//begin printf</span>
<a name="l00523"></a>00523 <span class="comment">                struct mystruct{</span>
<a name="l00524"></a>00524 <span class="comment">                        int x;</span>
<a name="l00525"></a>00525 <span class="comment">                        char name[28];</span>
<a name="l00526"></a>00526 <span class="comment">                        float myfloat;</span>
<a name="l00527"></a>00527 <span class="comment">                } st;                           </span>
<a name="l00528"></a>00528 <span class="comment">                printf(&quot;sending %s, %d, %.3f ...\n&quot;,((mystruct *)it-&gt;second-&gt;anydata)-&gt;name,((mystruct *)it-&gt;second-&gt;anydata)-&gt;x,((mystruct *)it-&gt;second-&gt;anydata)-&gt;myfloat);</span>
<a name="l00529"></a>00529 <span class="comment">                //end printf*/</span>
<a name="l00530"></a>00530                 <span class="keywordflow">return</span> 1;
<a name="l00531"></a>00531         }
<a name="l00532"></a>00532         <span class="keywordflow">else</span> {
<a name="l00533"></a>00533                 <span class="comment">//printf(&quot;no node %s to update\n&quot;,id);</span>
<a name="l00534"></a>00534                 <span class="keywordflow">return</span> 0;
<a name="l00535"></a>00535         }
<a name="l00536"></a>00536 }
<a name="l00537"></a>00537 
<a name="l00538"></a>00538 
<a name="l00539"></a>00539 <span class="preprocessor">#ifdef WIN32</span>
<a name="l00540"></a>00540 <span class="preprocessor"></span><a class="code" href="client_8h.html#acfdc053623a87a1a1d4adf03e6b6678d">CLIENT_LIB_EXPORT</a> <span class="keywordtype">int</span> <a class="code" href="client_8cpp.html#ab6cf7aafc84a6ac5df7a4002567d5f22" title="updateFacialNodes(node_id, bool, 5 floats) updates the data for the FACIAL nodes that you created...">updateFacialNodes</a>(<span class="keywordtype">char</span> *<span class="keywordtype">id</span>, <span class="keywordtype">bool</span> blink, <span class="keywordtype">float</span> smile, <span class="keywordtype">float</span> frown, <span class="keywordtype">float</span> o, <span class="keywordtype">float</span> e, <span class="keywordtype">float</span> p)
<a name="l00541"></a>00541 <span class="preprocessor">#else</span>
<a name="l00542"></a><a class="code" href="client_8h.html#a5bbd6516e07df2960ff3e89b350e37ea">00542</a> <span class="preprocessor"></span><span class="keywordtype">int</span> <a class="code" href="client_8cpp.html#ab6cf7aafc84a6ac5df7a4002567d5f22" title="updateFacialNodes(node_id, bool, 5 floats) updates the data for the FACIAL nodes that you created...">updateFacialNodes</a>(<span class="keywordtype">char</span> *<span class="keywordtype">id</span>, <span class="keywordtype">bool</span> blink, <span class="keywordtype">float</span> smile, <span class="keywordtype">float</span> frown, <span class="keywordtype">float</span> o, <span class="keywordtype">float</span> e, <span class="keywordtype">float</span> p)
<a name="l00543"></a>00543 <span class="preprocessor">#endif</span>
<a name="l00544"></a>00544 <span class="preprocessor"></span>{
<a name="l00545"></a>00545         <span class="keywordflow">if</span> (<a class="code" href="client_8cpp.html#ab9561565dc809c4fd607d84b43952c5a">viewing_only</a>) <span class="keywordflow">return</span> 0;
<a name="l00546"></a>00546         std::map&lt;std::string, BeamingFacialReplica*&gt;::iterator it = FacialNodeMap.find(<span class="keywordtype">id</span>);
<a name="l00547"></a>00547         <span class="keywordflow">if</span> (it != FacialNodeMap.end()) <span class="comment">//if id exists in node database, then update</span>
<a name="l00548"></a>00548         {
<a name="l00549"></a>00549                 strcpy(it-&gt;second-&gt;clientname,<a class="code" href="client_8cpp.html#a6118d7c546dddc5fa44618f15b1d96db">client_name</a>);
<a name="l00550"></a>00550                 strcpy(it-&gt;second-&gt;clientConfig,<a class="code" href="client_8cpp.html#a2c2eb166cc67e18c577471bea6cf78ea">my_config</a>.c_str());
<a name="l00551"></a>00551                 strcpy(it-&gt;second-&gt;facial_id,<span class="keywordtype">id</span>);
<a name="l00552"></a>00552                 it-&gt;second-&gt;blink = blink;
<a name="l00553"></a>00553                 <span class="comment">//rounding floats to 4 decimal places here to avoid network flooding due to very tiny differences</span>
<a name="l00554"></a>00554                 it-&gt;second-&gt;smile = floor((smile*10000.f)+0.5f)/10000.f; 
<a name="l00555"></a>00555                 it-&gt;second-&gt;frown = floor((frown*10000.f)+0.5f)/10000.f;
<a name="l00556"></a>00556                 it-&gt;second-&gt;o = floor((o*10000.f)+0.5f)/10000.f;
<a name="l00557"></a>00557                 it-&gt;second-&gt;e = floor((e*10000.f)+0.5f)/10000.f;
<a name="l00558"></a>00558                 it-&gt;second-&gt;p= floor((p*10000.f)+0.5f)/10000.f;
<a name="l00559"></a>00559                 <span class="keywordflow">return</span> 1;
<a name="l00560"></a>00560         }
<a name="l00561"></a>00561         <span class="keywordflow">else</span> {
<a name="l00562"></a>00562                 <span class="comment">//printf(&quot;no node %s to update\n&quot;,id);</span>
<a name="l00563"></a>00563                 <span class="keywordflow">return</span> 0;
<a name="l00564"></a>00564         }
<a name="l00565"></a>00565 }
<a name="l00566"></a>00566 
<a name="l00567"></a>00567 
<a name="l00568"></a>00568 <span class="preprocessor">#ifdef WIN32</span>
<a name="l00569"></a>00569 <span class="preprocessor"></span><a class="code" href="client_8h.html#acfdc053623a87a1a1d4adf03e6b6678d">CLIENT_LIB_EXPORT</a> <span class="keywordtype">int</span> <a class="code" href="client_8cpp.html#a23c8c932283df62cd85c36cea3db2a03" title="updateEmotionNodes(node_id, 3 doubles) updates the data for the EMOTION nodes that you created...">updateEmotionNodes</a>(<span class="keywordtype">char</span> *<span class="keywordtype">id</span>, <span class="keywordtype">double</span> valence, <span class="keywordtype">double</span> arousal, <span class="keywordtype">double</span> misc)
<a name="l00570"></a>00570 <span class="preprocessor">#else</span>
<a name="l00571"></a><a class="code" href="client_8h.html#a6fd495a10b15de6009d57e1ed54341f6">00571</a> <span class="preprocessor"></span><span class="keywordtype">int</span> <a class="code" href="client_8cpp.html#a23c8c932283df62cd85c36cea3db2a03" title="updateEmotionNodes(node_id, 3 doubles) updates the data for the EMOTION nodes that you created...">updateEmotionNodes</a>(<span class="keywordtype">char</span> *<span class="keywordtype">id</span>, <span class="keywordtype">double</span> valence, <span class="keywordtype">double</span> arousal, <span class="keywordtype">double</span> misc)
<a name="l00572"></a>00572 <span class="preprocessor">#endif</span>
<a name="l00573"></a>00573 <span class="preprocessor"></span>{
<a name="l00574"></a>00574         <span class="keywordflow">if</span> (<a class="code" href="client_8cpp.html#ab9561565dc809c4fd607d84b43952c5a">viewing_only</a>) <span class="keywordflow">return</span> 0;
<a name="l00575"></a>00575         std::map&lt;std::string, BeamingEmotionReplica*&gt;::iterator it = EmotionNodeMap.find(<span class="keywordtype">id</span>);
<a name="l00576"></a>00576         <span class="keywordflow">if</span> (it != EmotionNodeMap.end()) <span class="comment">//if id exists in node database, then update</span>
<a name="l00577"></a>00577         {
<a name="l00578"></a>00578                 strcpy(it-&gt;second-&gt;clientname,<a class="code" href="client_8cpp.html#a6118d7c546dddc5fa44618f15b1d96db">client_name</a>);
<a name="l00579"></a>00579                 strcpy(it-&gt;second-&gt;clientConfig,<a class="code" href="client_8cpp.html#a2c2eb166cc67e18c577471bea6cf78ea">my_config</a>.c_str());
<a name="l00580"></a>00580                 strcpy(it-&gt;second-&gt;emotion_id,<span class="keywordtype">id</span>);
<a name="l00581"></a>00581                 it-&gt;second-&gt;valence = valence;
<a name="l00582"></a>00582                 it-&gt;second-&gt;arousal = arousal;
<a name="l00583"></a>00583                 it-&gt;second-&gt;misc = misc;
<a name="l00584"></a>00584                 <span class="keywordflow">return</span> 1;
<a name="l00585"></a>00585         }
<a name="l00586"></a>00586         <span class="keywordflow">else</span> {
<a name="l00587"></a>00587                 <span class="comment">//printf(&quot;no node %s to update\n&quot;,id);</span>
<a name="l00588"></a>00588                 <span class="keywordflow">return</span> 0;
<a name="l00589"></a>00589         }
<a name="l00590"></a>00590 }
<a name="l00591"></a>00591 
<a name="l00592"></a>00592 
<a name="l00593"></a>00593 <span class="preprocessor">#ifdef WIN32</span>
<a name="l00594"></a>00594 <span class="preprocessor"></span><a class="code" href="client_8h.html#acfdc053623a87a1a1d4adf03e6b6678d">CLIENT_LIB_EXPORT</a> <span class="keywordtype">int</span> <a class="code" href="client_8cpp.html#abbb8dae5fba841e2d3851a5bbdbe71e2" title="updateTactileNodes(node_id, 1 float, 2 doubles) updates the data for the TACTILE nodes that you creat...">updateTactileNodes</a>(<span class="keywordtype">char</span> *<span class="keywordtype">id</span>, <span class="keywordtype">double</span> duration, <span class="keywordtype">float</span> intensity, <span class="keywordtype">float</span> temperature)
<a name="l00595"></a>00595 <span class="preprocessor">#else</span>
<a name="l00596"></a><a class="code" href="client_8h.html#a40cc866a67dbba1a3daafcca4dd61455">00596</a> <span class="preprocessor"></span><span class="keywordtype">int</span> <a class="code" href="client_8cpp.html#abbb8dae5fba841e2d3851a5bbdbe71e2" title="updateTactileNodes(node_id, 1 float, 2 doubles) updates the data for the TACTILE nodes that you creat...">updateTactileNodes</a>(<span class="keywordtype">char</span> *<span class="keywordtype">id</span>, <span class="keywordtype">double</span> duration, <span class="keywordtype">float</span> intensity, <span class="keywordtype">float</span> temperature)
<a name="l00597"></a>00597 <span class="preprocessor">#endif</span>
<a name="l00598"></a>00598 <span class="preprocessor"></span>{
<a name="l00599"></a>00599         <span class="keywordflow">if</span> (<a class="code" href="client_8cpp.html#ab9561565dc809c4fd607d84b43952c5a">viewing_only</a>) <span class="keywordflow">return</span> 0;
<a name="l00600"></a>00600         std::map&lt;std::string, BeamingTactileReplica*&gt;::iterator it = TactileNodeMap.find(<span class="keywordtype">id</span>);
<a name="l00601"></a>00601         <span class="keywordflow">if</span> (it != TactileNodeMap.end()) <span class="comment">//if id exists in node database, then update</span>
<a name="l00602"></a>00602         {
<a name="l00603"></a>00603                 strcpy(it-&gt;second-&gt;clientname,<a class="code" href="client_8cpp.html#a6118d7c546dddc5fa44618f15b1d96db">client_name</a>);
<a name="l00604"></a>00604                 strcpy(it-&gt;second-&gt;clientConfig,<a class="code" href="client_8cpp.html#a2c2eb166cc67e18c577471bea6cf78ea">my_config</a>.c_str());
<a name="l00605"></a>00605                 strcpy(it-&gt;second-&gt;tactile_id,<span class="keywordtype">id</span>);
<a name="l00606"></a>00606                 it-&gt;second-&gt;duration = duration;
<a name="l00607"></a>00607                 it-&gt;second-&gt;intensity = intensity;
<a name="l00608"></a>00608                 it-&gt;second-&gt;temperature = temperature;
<a name="l00609"></a>00609                 <span class="keywordflow">return</span> 1;
<a name="l00610"></a>00610         }
<a name="l00611"></a>00611         <span class="keywordflow">else</span> {
<a name="l00612"></a>00612                 <span class="comment">//printf(&quot;no node %s to update\n&quot;,id);</span>
<a name="l00613"></a>00613                 <span class="keywordflow">return</span> 0;
<a name="l00614"></a>00614         }
<a name="l00615"></a>00615 }
<a name="l00616"></a>00616 
<a name="l00617"></a>00617 
<a name="l00618"></a>00618 <span class="preprocessor">#ifdef WIN32</span>
<a name="l00619"></a>00619 <span class="preprocessor"></span><a class="code" href="client_8h.html#acfdc053623a87a1a1d4adf03e6b6678d">CLIENT_LIB_EXPORT</a> <span class="keywordtype">int</span> <a class="code" href="client_8cpp.html#aa43f89f2489afb160c61e0aae5780518" title="updateRobotNodes(node_id, 3 integers and 9 floats) updates the data for the ROBOT nodes that you crea...">updateRobotNodes</a>(<span class="keywordtype">char</span> *<span class="keywordtype">id</span>, <span class="keywordtype">int</span> type, <span class="keywordtype">int</span> details, <span class="keywordtype">float</span> freespace, <span class="keywordtype">float</span> x, <span class="keywordtype">float</span> y, <span class="keywordtype">float</span> z, <span class="keywordtype">float</span> rx, <span class="keywordtype">float</span> ry, <span class="keywordtype">float</span> rz, <span class="keywordtype">float</span> w, <span class="keywordtype">float</span> time_remain, <span class="keywordtype">int</span> contact_type)
<a name="l00620"></a>00620 <span class="preprocessor">#else</span>
<a name="l00621"></a><a class="code" href="client_8h.html#aebd3d274b7c46f7e7fbe60aab68ad1dd">00621</a> <span class="preprocessor"></span><span class="keywordtype">int</span> <a class="code" href="client_8cpp.html#aa43f89f2489afb160c61e0aae5780518" title="updateRobotNodes(node_id, 3 integers and 9 floats) updates the data for the ROBOT nodes that you crea...">updateRobotNodes</a>(<span class="keywordtype">char</span> *<span class="keywordtype">id</span>, <span class="keywordtype">int</span> type, <span class="keywordtype">int</span> details, <span class="keywordtype">float</span> freespace, <span class="keywordtype">float</span> x, <span class="keywordtype">float</span> y, <span class="keywordtype">float</span> z, <span class="keywordtype">float</span> rx, <span class="keywordtype">float</span> ry, <span class="keywordtype">float</span> rz, <span class="keywordtype">float</span> w, <span class="keywordtype">float</span> time_remain, <span class="keywordtype">int</span> contact_type)
<a name="l00622"></a>00622 <span class="preprocessor">#endif</span>
<a name="l00623"></a>00623 <span class="preprocessor"></span>{
<a name="l00624"></a>00624         <span class="keywordflow">if</span> (<a class="code" href="client_8cpp.html#ab9561565dc809c4fd607d84b43952c5a">viewing_only</a>) <span class="keywordflow">return</span> 0;
<a name="l00625"></a>00625         std::map&lt;std::string, BeamingRobotReplica*&gt;::iterator it = RobotNodeMap.find(<span class="keywordtype">id</span>);
<a name="l00626"></a>00626         <span class="keywordflow">if</span> (it != RobotNodeMap.end()) <span class="comment">//if id exists in node database, then update</span>
<a name="l00627"></a>00627         {
<a name="l00628"></a>00628                 strcpy(it-&gt;second-&gt;clientname,<a class="code" href="client_8cpp.html#a6118d7c546dddc5fa44618f15b1d96db">client_name</a>);
<a name="l00629"></a>00629                 strcpy(it-&gt;second-&gt;clientConfig,<a class="code" href="client_8cpp.html#a2c2eb166cc67e18c577471bea6cf78ea">my_config</a>.c_str());
<a name="l00630"></a>00630                 strcpy(it-&gt;second-&gt;robot_id,<span class="keywordtype">id</span>);
<a name="l00631"></a>00631                 it-&gt;second-&gt;type = type;
<a name="l00632"></a>00632                 it-&gt;second-&gt;details = details;
<a name="l00633"></a>00633                 it-&gt;second-&gt;freespace = freespace; 
<a name="l00634"></a>00634                 it-&gt;second-&gt;time_remain = time_remain; 
<a name="l00635"></a>00635                 it-&gt;second-&gt;contact_type = contact_type;
<a name="l00636"></a>00636                 <span class="comment">//rounding floats to 4 decimal places here to avoid network flooding due to very tiny differences</span>
<a name="l00637"></a>00637                 it-&gt;second-&gt;position.x = floor((x*10000.f)+0.5f)/10000.f; 
<a name="l00638"></a>00638                 it-&gt;second-&gt;position.y = floor((y*10000.f)+0.5f)/10000.f; 
<a name="l00639"></a>00639                 it-&gt;second-&gt;position.z = floor((z*10000.f)+0.5f)/10000.f;
<a name="l00640"></a>00640                 it-&gt;second-&gt;orientation.x = floor((rx*10000.f)+0.5f)/10000.f;
<a name="l00641"></a>00641                 it-&gt;second-&gt;orientation.y = floor((ry*10000.f)+0.5f)/10000.f;
<a name="l00642"></a>00642                 it-&gt;second-&gt;orientation.z = floor((rz*10000.f)+0.5f)/10000.f;
<a name="l00643"></a>00643                 it-&gt;second-&gt;orientation.w = floor((w*10000.f)+0.5f)/10000.f;
<a name="l00644"></a>00644                 <span class="keywordflow">return</span> 1;
<a name="l00645"></a>00645         }
<a name="l00646"></a>00646         <span class="keywordflow">else</span> {
<a name="l00647"></a>00647                 <span class="comment">//printf(&quot;no node %s to update\n&quot;,id);</span>
<a name="l00648"></a>00648                 <span class="keywordflow">return</span> 0;
<a name="l00649"></a>00649         }
<a name="l00650"></a>00650 }
<a name="l00651"></a>00651 
<a name="l00652"></a>00652 
<a name="l00653"></a>00653 <span class="preprocessor">#ifdef WIN32</span>
<a name="l00654"></a>00654 <span class="preprocessor"></span><a class="code" href="client_8h.html#acfdc053623a87a1a1d4adf03e6b6678d">CLIENT_LIB_EXPORT</a> <span class="keywordtype">int</span> <a class="code" href="client_8cpp.html#a09773e6b9675e966e270ef75445690df" title="updateAudioNodes(node_id, 3 strings and 1 integer) updates the data for the AUDIO nodes that you crea...">updateAudioNodes</a>(<span class="keywordtype">char</span> *<span class="keywordtype">id</span>, <span class="keywordtype">char</span> *<a class="code" href="class_beaming_room.html#aa9ab8fdaf95f74be1f74b6e97efc5bc5">host</a>, <span class="keywordtype">int</span> <a class="code" href="class_beaming_room.html#aa08457cfc3deb174954e0fb7f03918a6">port</a>, <span class="keywordtype">char</span> *<a class="code" href="class_beaming_room.html#acfd20fa26696359edf0e8f7fd1901540">file_url</a>, <span class="keywordtype">char</span> *config)
<a name="l00655"></a>00655 <span class="preprocessor">#else</span>
<a name="l00656"></a><a class="code" href="client_8h.html#a3d6a9d886d76289c49498e3c228f9e8d">00656</a> <span class="preprocessor"></span><span class="keywordtype">int</span> <a class="code" href="client_8cpp.html#a09773e6b9675e966e270ef75445690df" title="updateAudioNodes(node_id, 3 strings and 1 integer) updates the data for the AUDIO nodes that you crea...">updateAudioNodes</a>(<span class="keywordtype">char</span> *<span class="keywordtype">id</span>, <span class="keywordtype">char</span> *host, <span class="keywordtype">int</span> port, <span class="keywordtype">char</span> *file_url, <span class="keywordtype">char</span> *config)
<a name="l00657"></a>00657 <span class="preprocessor">#endif</span>
<a name="l00658"></a>00658 <span class="preprocessor"></span>{
<a name="l00659"></a>00659         <span class="keywordflow">if</span> (<a class="code" href="client_8cpp.html#ab9561565dc809c4fd607d84b43952c5a">viewing_only</a>) <span class="keywordflow">return</span> 0;
<a name="l00660"></a>00660         std::map&lt;std::string, BeamingAudioReplica*&gt;::iterator it = AudioNodeMap.find(<span class="keywordtype">id</span>);
<a name="l00661"></a>00661         <span class="keywordflow">if</span> (it != AudioNodeMap.end()) <span class="comment">//if id exists in node database, then update</span>
<a name="l00662"></a>00662         {
<a name="l00663"></a>00663                 strcpy(it-&gt;second-&gt;clientname,<a class="code" href="client_8cpp.html#a6118d7c546dddc5fa44618f15b1d96db">client_name</a>);
<a name="l00664"></a>00664                 strcpy(it-&gt;second-&gt;clientConfig,<a class="code" href="client_8cpp.html#a2c2eb166cc67e18c577471bea6cf78ea">my_config</a>.c_str());
<a name="l00665"></a>00665                 strcpy(it-&gt;second-&gt;audio_id,<span class="keywordtype">id</span>);
<a name="l00666"></a>00666                 strcpy(it-&gt;second-&gt;host,host);
<a name="l00667"></a>00667                 it-&gt;second-&gt;port = <a class="code" href="class_beaming_room.html#aa08457cfc3deb174954e0fb7f03918a6">port</a>;
<a name="l00668"></a>00668                 strcpy(it-&gt;second-&gt;file_url,file_url);
<a name="l00669"></a>00669                 strcpy(it-&gt;second-&gt;config,config);
<a name="l00670"></a>00670                 <span class="keywordflow">return</span> 1;
<a name="l00671"></a>00671         }
<a name="l00672"></a>00672         <span class="keywordflow">else</span> {
<a name="l00673"></a>00673                 <span class="comment">//printf(&quot;no node %s to update\n&quot;,id);</span>
<a name="l00674"></a>00674                 <span class="keywordflow">return</span> 0;
<a name="l00675"></a>00675         }
<a name="l00676"></a>00676 }
<a name="l00677"></a>00677 
<a name="l00678"></a>00678 
<a name="l00679"></a>00679 <span class="preprocessor">#ifdef WIN32</span>
<a name="l00680"></a>00680 <span class="preprocessor"></span><a class="code" href="client_8h.html#acfdc053623a87a1a1d4adf03e6b6678d">CLIENT_LIB_EXPORT</a> <span class="keywordtype">int</span> <a class="code" href="client_8cpp.html#a3f4d7d8172d87e298dba1f4bfdf27dc6" title="updateVideoNodes(node_id, 2 strings, 3 integers and 1 double) updates the data for the VIDEO nodes th...">updateVideoNodes</a>(<span class="keywordtype">char</span> *<span class="keywordtype">id</span>, <span class="keywordtype">char</span> *host, <span class="keywordtype">int</span> port, <span class="keywordtype">char</span> *file_url, <span class="keywordtype">int</span> frame_width, <span class="keywordtype">int</span> frame_height, <span class="keywordtype">double</span> <a class="code" href="class_beaming_point_cloud_replica.html#a16ab311b09d4430dcecf09f9d10bf978">bandwidth</a>)
<a name="l00681"></a>00681 <span class="preprocessor">#else</span>
<a name="l00682"></a><a class="code" href="client_8h.html#ab229fbdef80d7b9df10c0adfa6bd2e9c">00682</a> <span class="preprocessor"></span><span class="keywordtype">int</span> <a class="code" href="client_8cpp.html#a3f4d7d8172d87e298dba1f4bfdf27dc6" title="updateVideoNodes(node_id, 2 strings, 3 integers and 1 double) updates the data for the VIDEO nodes th...">updateVideoNodes</a>(<span class="keywordtype">char</span> *<span class="keywordtype">id</span>, <span class="keywordtype">char</span> *host, <span class="keywordtype">int</span> port, <span class="keywordtype">char</span> *file_url, <span class="keywordtype">int</span> frame_width, <span class="keywordtype">int</span> frame_height, <span class="keywordtype">double</span> bandwidth)
<a name="l00683"></a>00683 <span class="preprocessor">#endif</span>
<a name="l00684"></a>00684 <span class="preprocessor"></span>{
<a name="l00685"></a>00685         <span class="keywordflow">if</span> (<a class="code" href="client_8cpp.html#ab9561565dc809c4fd607d84b43952c5a">viewing_only</a>) <span class="keywordflow">return</span> 0;
<a name="l00686"></a>00686         std::map&lt;std::string, BeamingVideoReplica*&gt;::iterator it = VideoNodeMap.find(<span class="keywordtype">id</span>);
<a name="l00687"></a>00687         <span class="keywordflow">if</span> (it != VideoNodeMap.end()) <span class="comment">//if id exists in node database, then update</span>
<a name="l00688"></a>00688         {
<a name="l00689"></a>00689                 strcpy(it-&gt;second-&gt;clientname,<a class="code" href="client_8cpp.html#a6118d7c546dddc5fa44618f15b1d96db">client_name</a>);
<a name="l00690"></a>00690                 strcpy(it-&gt;second-&gt;clientConfig,<a class="code" href="client_8cpp.html#a2c2eb166cc67e18c577471bea6cf78ea">my_config</a>.c_str());
<a name="l00691"></a>00691                 strcpy(it-&gt;second-&gt;video_id,<span class="keywordtype">id</span>);
<a name="l00692"></a>00692                 strcpy(it-&gt;second-&gt;host,host);
<a name="l00693"></a>00693                 it-&gt;second-&gt;port = <a class="code" href="class_beaming_room.html#aa08457cfc3deb174954e0fb7f03918a6">port</a>;
<a name="l00694"></a>00694                 strcpy(it-&gt;second-&gt;file_url,file_url);
<a name="l00695"></a>00695                 it-&gt;second-&gt;frame_width = frame_width;
<a name="l00696"></a>00696                 it-&gt;second-&gt;frame_height = frame_height;
<a name="l00697"></a>00697                 it-&gt;second-&gt;bandwidth = <a class="code" href="class_beaming_point_cloud_replica.html#a16ab311b09d4430dcecf09f9d10bf978">bandwidth</a>;
<a name="l00698"></a>00698                 <span class="keywordflow">return</span> 1;
<a name="l00699"></a>00699         }
<a name="l00700"></a>00700         <span class="keywordflow">else</span> {
<a name="l00701"></a>00701                 <span class="comment">//printf(&quot;no node %s to update\n&quot;,id);</span>
<a name="l00702"></a>00702                 <span class="keywordflow">return</span> 0;
<a name="l00703"></a>00703         }
<a name="l00704"></a>00704 }
<a name="l00705"></a>00705 
<a name="l00706"></a>00706 
<a name="l00707"></a>00707 <span class="preprocessor">#ifdef WIN32</span>
<a name="l00708"></a>00708 <span class="preprocessor"></span><a class="code" href="client_8h.html#acfdc053623a87a1a1d4adf03e6b6678d">CLIENT_LIB_EXPORT</a> <span class="keywordtype">int</span> <a class="code" href="client_8cpp.html#af540238ffef4cb9d13381957d4e6545b" title="updateObjectNodes(node_id, 2 strings, 1 integer and 7 floats) updates the data for the OBJECT nodes t...">updateObjectNodes</a>(<span class="keywordtype">char</span> *<span class="keywordtype">id</span>, <span class="keywordtype">char</span> *host, <span class="keywordtype">int</span> port, <span class="keywordtype">char</span> *file_url, <span class="keywordtype">float</span> x, <span class="keywordtype">float</span> y, <span class="keywordtype">float</span> z, <span class="keywordtype">float</span> rx, <span class="keywordtype">float</span> ry, <span class="keywordtype">float</span> rz, <span class="keywordtype">float</span> w)
<a name="l00709"></a>00709 <span class="preprocessor">#else</span>
<a name="l00710"></a><a class="code" href="client_8h.html#a052c905d3393c16aefb4c24199c70954">00710</a> <span class="preprocessor"></span><span class="keywordtype">int</span> <a class="code" href="client_8cpp.html#af540238ffef4cb9d13381957d4e6545b" title="updateObjectNodes(node_id, 2 strings, 1 integer and 7 floats) updates the data for the OBJECT nodes t...">updateObjectNodes</a>(<span class="keywordtype">char</span> *<span class="keywordtype">id</span>, <span class="keywordtype">char</span> *host, <span class="keywordtype">int</span> port, <span class="keywordtype">char</span> *file_url, <span class="keywordtype">float</span> x, <span class="keywordtype">float</span> y, <span class="keywordtype">float</span> z, <span class="keywordtype">float</span> rx, <span class="keywordtype">float</span> ry, <span class="keywordtype">float</span> rz, <span class="keywordtype">float</span> w)
<a name="l00711"></a>00711 <span class="preprocessor">#endif</span>
<a name="l00712"></a>00712 <span class="preprocessor"></span>{
<a name="l00713"></a>00713         <span class="keywordflow">if</span> (<a class="code" href="client_8cpp.html#ab9561565dc809c4fd607d84b43952c5a">viewing_only</a>) <span class="keywordflow">return</span> 0;
<a name="l00714"></a>00714         std::map&lt;std::string, BeamingObjectReplica*&gt;::iterator it = ObjectNodeMap.find(<span class="keywordtype">id</span>);
<a name="l00715"></a>00715         <span class="keywordflow">if</span> (it != ObjectNodeMap.end()) <span class="comment">//if id exists in node database, then update</span>
<a name="l00716"></a>00716         {
<a name="l00717"></a>00717                 strcpy(it-&gt;second-&gt;clientname,<a class="code" href="client_8cpp.html#a6118d7c546dddc5fa44618f15b1d96db">client_name</a>);
<a name="l00718"></a>00718                 strcpy(it-&gt;second-&gt;clientConfig,<a class="code" href="client_8cpp.html#a2c2eb166cc67e18c577471bea6cf78ea">my_config</a>.c_str());
<a name="l00719"></a>00719                 strcpy(it-&gt;second-&gt;object_id,<span class="keywordtype">id</span>);
<a name="l00720"></a>00720                 strcpy(it-&gt;second-&gt;host,host);
<a name="l00721"></a>00721                 it-&gt;second-&gt;port = <a class="code" href="class_beaming_room.html#aa08457cfc3deb174954e0fb7f03918a6">port</a>;
<a name="l00722"></a>00722                 strcpy(it-&gt;second-&gt;file_url,file_url);
<a name="l00723"></a>00723                 <span class="comment">//rounding floats to 4 decimal places here to avoid network flooding due to very tiny differences</span>
<a name="l00724"></a>00724                 it-&gt;second-&gt;position.x = floor((x*10000.f)+0.5f)/10000.f; 
<a name="l00725"></a>00725                 it-&gt;second-&gt;position.y = floor((y*10000.f)+0.5f)/10000.f; 
<a name="l00726"></a>00726                 it-&gt;second-&gt;position.z = floor((z*10000.f)+0.5f)/10000.f;
<a name="l00727"></a>00727                 it-&gt;second-&gt;orientation.x = floor((rx*10000.f)+0.5f)/10000.f;
<a name="l00728"></a>00728                 it-&gt;second-&gt;orientation.y = floor((ry*10000.f)+0.5f)/10000.f;
<a name="l00729"></a>00729                 it-&gt;second-&gt;orientation.z = floor((rz*10000.f)+0.5f)/10000.f;
<a name="l00730"></a>00730                 it-&gt;second-&gt;orientation.w = floor((w*10000.f)+0.5f)/10000.f;
<a name="l00731"></a>00731                 <span class="keywordflow">return</span> 1;
<a name="l00732"></a>00732         }
<a name="l00733"></a>00733         <span class="keywordflow">else</span> {
<a name="l00734"></a>00734                 <span class="comment">//printf(&quot;no node %s to update\n&quot;,id);</span>
<a name="l00735"></a>00735                 <span class="keywordflow">return</span> 0;
<a name="l00736"></a>00736         }
<a name="l00737"></a>00737 }
<a name="l00738"></a>00738 
<a name="l00739"></a>00739 
<a name="l00740"></a>00740 <span class="preprocessor">#ifdef WIN32</span>
<a name="l00741"></a>00741 <span class="preprocessor"></span><a class="code" href="client_8h.html#acfdc053623a87a1a1d4adf03e6b6678d">CLIENT_LIB_EXPORT</a> <span class="keywordtype">int</span> <a class="code" href="client_8cpp.html#a52be732c7b63e4e1f28ff7d996f22141" title="updatePointCloudNodes(node_id, 2 strings, 2 integers, 1 double and 1 boolean) updates the data for th...">updatePointCloudNodes</a>(<span class="keywordtype">char</span> *<span class="keywordtype">id</span>, <span class="keywordtype">char</span> *host, <span class="keywordtype">int</span> port, <span class="keywordtype">char</span> *file_url, <span class="keywordtype">int</span> <a class="code" href="class_beaming_point_cloud_replica.html#ab0262a672044d98b3ddf5a97d7dc51c4">size</a>, <span class="keywordtype">double</span> bandwidth, <span class="keywordtype">bool</span> <a class="code" href="class_beaming_point_cloud_replica.html#aa06c0d239b711a17412a27c1f988448b">RGB_flag</a>)
<a name="l00742"></a>00742 <span class="preprocessor">#else</span>
<a name="l00743"></a><a class="code" href="client_8h.html#adec24d3abf11af3223b897f0c4f810e5">00743</a> <span class="preprocessor"></span><span class="keywordtype">int</span> <a class="code" href="client_8cpp.html#a52be732c7b63e4e1f28ff7d996f22141" title="updatePointCloudNodes(node_id, 2 strings, 2 integers, 1 double and 1 boolean) updates the data for th...">updatePointCloudNodes</a>(<span class="keywordtype">char</span> *<span class="keywordtype">id</span>, <span class="keywordtype">char</span> *host, <span class="keywordtype">int</span> port, <span class="keywordtype">char</span> *file_url, <span class="keywordtype">int</span> size, <span class="keywordtype">double</span> bandwidth, <span class="keywordtype">bool</span> RGB_flag)
<a name="l00744"></a>00744 <span class="preprocessor">#endif</span>
<a name="l00745"></a>00745 <span class="preprocessor"></span>{
<a name="l00746"></a>00746         <span class="keywordflow">if</span> (<a class="code" href="client_8cpp.html#ab9561565dc809c4fd607d84b43952c5a">viewing_only</a>) <span class="keywordflow">return</span> 0;
<a name="l00747"></a>00747         std::map&lt;std::string, BeamingPointCloudReplica*&gt;::iterator it = PointCloudNodeMap.find(<span class="keywordtype">id</span>);
<a name="l00748"></a>00748         <span class="keywordflow">if</span> (it != PointCloudNodeMap.end()) <span class="comment">//if id exists in node database, then update</span>
<a name="l00749"></a>00749         {
<a name="l00750"></a>00750                 strcpy(it-&gt;second-&gt;clientname,<a class="code" href="client_8cpp.html#a6118d7c546dddc5fa44618f15b1d96db">client_name</a>);
<a name="l00751"></a>00751                 strcpy(it-&gt;second-&gt;clientConfig,<a class="code" href="client_8cpp.html#a2c2eb166cc67e18c577471bea6cf78ea">my_config</a>.c_str());
<a name="l00752"></a>00752                 strcpy(it-&gt;second-&gt;pointcloud_id,<span class="keywordtype">id</span>);
<a name="l00753"></a>00753                 strcpy(it-&gt;second-&gt;host,host);
<a name="l00754"></a>00754                 it-&gt;second-&gt;port = <a class="code" href="class_beaming_room.html#aa08457cfc3deb174954e0fb7f03918a6">port</a>;
<a name="l00755"></a>00755                 strcpy(it-&gt;second-&gt;file_url,file_url);
<a name="l00756"></a>00756                 it-&gt;second-&gt;size = <a class="code" href="class_beaming_point_cloud_replica.html#ab0262a672044d98b3ddf5a97d7dc51c4">size</a>;
<a name="l00757"></a>00757                 it-&gt;second-&gt;bandwidth = <a class="code" href="class_beaming_point_cloud_replica.html#a16ab311b09d4430dcecf09f9d10bf978">bandwidth</a>;
<a name="l00758"></a>00758                 it-&gt;second-&gt;RGB_flag = <a class="code" href="class_beaming_point_cloud_replica.html#aa06c0d239b711a17412a27c1f988448b">RGB_flag</a>;
<a name="l00759"></a>00759                 <span class="keywordflow">return</span> 1;
<a name="l00760"></a>00760         }
<a name="l00761"></a>00761         <span class="keywordflow">else</span> {
<a name="l00762"></a>00762                 <span class="comment">//printf(&quot;no node %s to update\n&quot;,id);</span>
<a name="l00763"></a>00763                 <span class="keywordflow">return</span> 0;
<a name="l00764"></a>00764         }
<a name="l00765"></a>00765 }
<a name="l00766"></a>00766 
<a name="l00767"></a>00767 
<a name="l00768"></a>00768 <span class="preprocessor">#ifdef WIN32</span>
<a name="l00769"></a>00769 <span class="preprocessor"></span><a class="code" href="client_8h.html#acfdc053623a87a1a1d4adf03e6b6678d">CLIENT_LIB_EXPORT</a> <span class="keywordtype">int</span> <a class="code" href="client_8cpp.html#a087f5a4ba88c558785a157e96f3a1a3e">getPeersInfo</a>(<span class="keywordtype">char</span> *peers_info)
<a name="l00770"></a>00770 <span class="preprocessor">#else</span>
<a name="l00771"></a><a class="code" href="client_8h.html#af65916f1932cc0aea16cbf19b98624fe">00771</a> <span class="preprocessor"></span><span class="keywordtype">int</span> <a class="code" href="client_8cpp.html#a087f5a4ba88c558785a157e96f3a1a3e">getPeersInfo</a>(<span class="keywordtype">char</span> *peers_info)
<a name="l00772"></a>00772 <span class="preprocessor">#endif</span>
<a name="l00773"></a>00773 <span class="preprocessor"></span>{
<a name="l00774"></a>00774         strcpy(peers_info,<span class="stringliteral">&quot;&quot;</span>);
<a name="l00775"></a>00775         <span class="keywordflow">for</span> ( std::map&lt;std::string, std::vector&lt;node_info*&gt; &gt;::iterator cIter = <a class="code" href="_client_server_8h.html#aee6ed86d42821e392e49ae3ecb3f04b6">nodes_map</a>.begin(); cIter!=<a class="code" href="_client_server_8h.html#aee6ed86d42821e392e49ae3ecb3f04b6">nodes_map</a>.end(); cIter++ )
<a name="l00776"></a>00776         {
<a name="l00777"></a>00777                 <span class="keywordtype">char</span> tmpstr[64];
<a name="l00778"></a>00778                 sprintf(tmpstr,<span class="stringliteral">&quot;%s,%s,%s,%s;&quot;</span>,cIter-&gt;first.c_str(),cIter-&gt;second[0]-&gt;peername,cIter-&gt;second[0]-&gt;peertype,cIter-&gt;second[0]-&gt;peercfg);<span class="comment">//guid,client-name,client-type,client-config</span>
<a name="l00779"></a>00779                 strcat(peers_info,tmpstr);
<a name="l00780"></a>00780         }
<a name="l00781"></a>00781         <span class="keywordflow">return</span> <a class="code" href="_client_server_8h.html#aee6ed86d42821e392e49ae3ecb3f04b6">nodes_map</a>.size();
<a name="l00782"></a>00782 }
<a name="l00783"></a>00783 
<a name="l00784"></a>00784 
<a name="l00785"></a>00785 <span class="preprocessor">#ifdef WIN32</span>
<a name="l00786"></a>00786 <span class="preprocessor"></span><a class="code" href="client_8h.html#acfdc053623a87a1a1d4adf03e6b6678d">CLIENT_LIB_EXPORT</a> <span class="keywordtype">void</span> <a class="code" href="client_8cpp.html#ac1dd5fc2e432f4c27c4c6c8df1de72b6" title="returns the ip address and port of the specified GUID">getIPinfo</a>(<span class="keywordtype">char</span> strid[], <span class="keywordtype">char</span> *ipinfo)
<a name="l00787"></a>00787 <span class="preprocessor">#else</span>
<a name="l00788"></a><a class="code" href="client_8h.html#a4ca8b3287b62ce087bf9ccb79e576a19">00788</a> <span class="preprocessor"></span><span class="keywordtype">void</span> <a class="code" href="client_8cpp.html#ac1dd5fc2e432f4c27c4c6c8df1de72b6" title="returns the ip address and port of the specified GUID">getIPinfo</a>(<span class="keywordtype">char</span> strid[], <span class="keywordtype">char</span> *ipinfo)
<a name="l00789"></a>00789 <span class="preprocessor">#endif</span>
<a name="l00790"></a>00790 <span class="preprocessor"></span>{
<a name="l00791"></a>00791         <span class="comment">//RakNetGUID strguid;</span>
<a name="l00792"></a>00792         <span class="comment">//strguid.FromString(strid);</span>
<a name="l00793"></a>00793         std::map&lt;std::string, std::vector&lt;node_info*&gt; &gt;::iterator it = <a class="code" href="_client_server_8h.html#aee6ed86d42821e392e49ae3ecb3f04b6">nodes_map</a>.find(strid);
<a name="l00794"></a>00794         <span class="keywordflow">if</span> (it != <a class="code" href="_client_server_8h.html#aee6ed86d42821e392e49ae3ecb3f04b6">nodes_map</a>.end()) <span class="comment">//if id exists in node database, get ip</span>
<a name="l00795"></a>00795         {
<a name="l00796"></a>00796                 sprintf(ipinfo,<span class="stringliteral">&quot;%s&quot;</span>,it-&gt;second[0]-&gt;ipport);
<a name="l00797"></a>00797         }
<a name="l00798"></a>00798         <span class="comment">//SystemAddress address = rakPeer-&gt;GetSystemAddressFromGuid(strguid);</span>
<a name="l00799"></a>00799         <span class="comment">//sprintf(ipinfo,&quot;%s&quot;,address.ToString());</span>
<a name="l00800"></a>00800         <span class="comment">//printf(&quot;%s\n&quot;,address.ToString());</span>
<a name="l00801"></a>00801         <span class="comment">/*DataStructures::List&lt;SystemAddress&gt; connected_ips;</span>
<a name="l00802"></a>00802 <span class="comment">        DataStructures::List&lt;RakNetGUID&gt; connected_guids;</span>
<a name="l00803"></a>00803 <span class="comment">        unsigned short numConnections;</span>
<a name="l00804"></a>00804 <span class="comment">        SystemAddress *connectedSystems = new SystemAddress;</span>
<a name="l00805"></a>00805 <span class="comment">        printf(&quot;%d\n&quot;,replicaManager.GetConnectionCount());</span>
<a name="l00806"></a>00806 <span class="comment">        rakPeer-&gt;GetConnectionList(connectedSystems,&amp;numConnections);</span>
<a name="l00807"></a>00807 <span class="comment">        printf(&quot;%d\n&quot;,numConnections);</span>
<a name="l00808"></a>00808 <span class="comment">        for (int index=0; index &lt; connectedSystems-&gt;size(); index++)</span>
<a name="l00809"></a>00809 <span class="comment">        {</span>
<a name="l00810"></a>00810 <span class="comment">                printf(&quot;%s\n&quot;,connectedSystems[index].ToString());</span>
<a name="l00811"></a>00811 <span class="comment">        }</span>
<a name="l00812"></a>00812 <span class="comment">        rakPeer-&gt;GetSystemList(connected_ips,connected_guids);</span>
<a name="l00813"></a>00813 <span class="comment">        for (int index=0; index &lt; connected_guids.Size(); index++)</span>
<a name="l00814"></a>00814 <span class="comment">        {</span>
<a name="l00815"></a>00815 <span class="comment">                printf(&quot;%s\n&quot;,connected_guids[index].ToString());</span>
<a name="l00816"></a>00816 <span class="comment">        }*/</span>
<a name="l00817"></a>00817 }
<a name="l00818"></a>00818 
<a name="l00819"></a>00819 
<a name="l00820"></a>00820 <span class="preprocessor">#ifdef WIN32</span>
<a name="l00821"></a>00821 <span class="preprocessor"></span><a class="code" href="client_8h.html#acfdc053623a87a1a1d4adf03e6b6678d">CLIENT_LIB_EXPORT</a> <span class="keywordtype">int</span> <a class="code" href="client_8cpp.html#ae20598e6116c0ec6646fa9a0f886f027">getPeersID</a>(<span class="keywordtype">char</span> *peers_info)
<a name="l00822"></a>00822 <span class="preprocessor">#else</span>
<a name="l00823"></a><a class="code" href="client_8h.html#adc9fe27df05d9255c5d2d44714bddaea">00823</a> <span class="preprocessor"></span><span class="keywordtype">int</span> <a class="code" href="client_8cpp.html#ae20598e6116c0ec6646fa9a0f886f027">getPeersID</a>(<span class="keywordtype">char</span> *peers_info)
<a name="l00824"></a>00824 <span class="preprocessor">#endif</span>
<a name="l00825"></a>00825 <span class="preprocessor"></span>{
<a name="l00826"></a>00826         strcpy(peers_info,<span class="stringliteral">&quot;&quot;</span>);
<a name="l00827"></a>00827         <span class="keywordflow">for</span> ( std::map&lt;std::string, std::vector&lt;node_info*&gt; &gt;::iterator cIter = <a class="code" href="_client_server_8h.html#aee6ed86d42821e392e49ae3ecb3f04b6">nodes_map</a>.begin(); cIter!=<a class="code" href="_client_server_8h.html#aee6ed86d42821e392e49ae3ecb3f04b6">nodes_map</a>.end(); cIter++ )
<a name="l00828"></a>00828         {
<a name="l00829"></a>00829                 <span class="keywordtype">char</span> tmpstr[64];
<a name="l00830"></a>00830                 sprintf(tmpstr,<span class="stringliteral">&quot;%s;&quot;</span>,cIter-&gt;first.c_str());<span class="comment">//guid</span>
<a name="l00831"></a>00831                 strcat(peers_info,tmpstr);
<a name="l00832"></a>00832         }
<a name="l00833"></a>00833         <span class="keywordflow">return</span> <a class="code" href="_client_server_8h.html#aee6ed86d42821e392e49ae3ecb3f04b6">nodes_map</a>.size();
<a name="l00834"></a>00834 }
<a name="l00835"></a>00835 
<a name="l00836"></a>00836 
<a name="l00837"></a>00837 <span class="preprocessor">#ifdef WIN32</span>
<a name="l00838"></a>00838 <span class="preprocessor"></span><a class="code" href="client_8h.html#acfdc053623a87a1a1d4adf03e6b6678d">CLIENT_LIB_EXPORT</a> <span class="keywordtype">int</span> <a class="code" href="client_8cpp.html#af9b6a701fc265f98834b4d453718f831">getNodesInfo</a>(<span class="keywordtype">char</span> peer_guid[], <span class="keywordtype">char</span> *nodes_info)
<a name="l00839"></a>00839 <span class="preprocessor">#else</span>
<a name="l00840"></a><a class="code" href="client_8h.html#a7603466016a861384c4d34d84a1c6e13">00840</a> <span class="preprocessor"></span><span class="keywordtype">int</span> <a class="code" href="client_8cpp.html#af9b6a701fc265f98834b4d453718f831">getNodesInfo</a>(<span class="keywordtype">char</span> peer_guid[], <span class="keywordtype">char</span> *nodes_info)
<a name="l00841"></a>00841 <span class="preprocessor">#endif</span>
<a name="l00842"></a>00842 <span class="preprocessor"></span>{
<a name="l00843"></a>00843         <span class="keywordtype">int</span> x=0;
<a name="l00844"></a>00844         <span class="keywordtype">char</span> tmpstr[256];
<a name="l00845"></a>00845         strcpy(nodes_info,<span class="stringliteral">&quot;&quot;</span>);
<a name="l00846"></a>00846         std::map&lt;std::string, std::vector&lt;node_info*&gt; &gt;::iterator it = <a class="code" href="_client_server_8h.html#aee6ed86d42821e392e49ae3ecb3f04b6">nodes_map</a>.find(peer_guid);
<a name="l00847"></a>00847         <span class="keywordflow">if</span> (it != <a class="code" href="_client_server_8h.html#aee6ed86d42821e392e49ae3ecb3f04b6">nodes_map</a>.end()) <span class="comment">//if id exists in node database, add to nodes_info string</span>
<a name="l00848"></a>00848         {
<a name="l00849"></a>00849                 <span class="keywordflow">for</span> ( std::vector&lt;node_info*&gt;::iterator cIter = it-&gt;second.begin(); cIter!=it-&gt;second.end(); cIter++ )
<a name="l00850"></a>00850                 {
<a name="l00851"></a>00851                         <span class="comment">// presents one full rocketbox avatar as one node</span>
<a name="l00852"></a>00852                         <span class="keywordflow">if</span> ( ( (strcmp((*cIter)-&gt;name.c_str(),<span class="stringliteral">&quot;0&quot;</span>)==0) &amp;&amp; (strcmp((*cIter)-&gt;peertype,<span class="stringliteral">&quot;AVATAR&quot;</span>)==0) ) <span class="comment">//check for multiple avatars through unique root node </span>
<a name="l00853"></a>00853                                 || (strcmp((*cIter)-&gt;type.c_str(),<span class="stringliteral">&quot;AVATAR&quot;</span>)!=0) ) 
<a name="l00854"></a>00854                         {
<a name="l00855"></a>00855                                 sprintf(tmpstr,<span class="stringliteral">&quot;%s,%s,%s,%s;&quot;</span>,(*cIter)-&gt;peername,(*cIter)-&gt;name.c_str(),(*cIter)-&gt;type.c_str(),(*cIter)-&gt;peercfg);  
<a name="l00856"></a>00856                                 <span class="comment">//printf(&quot;%s,%s,%s,%s\n&quot;,(*cIter)-&gt;peername,(*cIter)-&gt;name.c_str(),(*cIter)-&gt;type.c_str(),(*cIter)-&gt;peercfg);</span>
<a name="l00857"></a>00857                                 strcat(nodes_info,tmpstr);
<a name="l00858"></a>00858                                 x++;
<a name="l00859"></a>00859                         }
<a name="l00860"></a>00860                 }
<a name="l00861"></a>00861                 <span class="comment">//printf(&quot;%s\t&quot;,nodes_info);</span>
<a name="l00862"></a>00862         }
<a name="l00863"></a>00863         <span class="keywordflow">return</span> x;
<a name="l00864"></a>00864 }
<a name="l00865"></a>00865 
<a name="l00866"></a>00866 <span class="preprocessor">#ifdef WIN32</span>
<a name="l00867"></a>00867 <span class="preprocessor"></span><a class="code" href="client_8h.html#acfdc053623a87a1a1d4adf03e6b6678d">CLIENT_LIB_EXPORT</a> <span class="keywordtype">void</span> <a class="code" href="client_8cpp.html#ad7a848f23c79ed5b15b655fa06c9c105" title="gets the firstname and lastname for the specified avatar">getAvatarName</a>(<span class="keywordtype">char</span> strid[], <span class="keywordtype">char</span> avatar_id[], <span class="keywordtype">char</span> *firstname, <span class="keywordtype">char</span> *lastname)
<a name="l00868"></a>00868 <span class="preprocessor">#else</span>
<a name="l00869"></a><a class="code" href="client_8h.html#acc1f40a4494f9cd82eb425bad2d53026">00869</a> <span class="preprocessor"></span><span class="keywordtype">void</span> <a class="code" href="client_8cpp.html#ad7a848f23c79ed5b15b655fa06c9c105" title="gets the firstname and lastname for the specified avatar">getAvatarName</a>(<span class="keywordtype">char</span> strid[], <span class="keywordtype">char</span> avatar_id[], <span class="keywordtype">char</span> *firstname, <span class="keywordtype">char</span> *lastname)
<a name="l00870"></a>00870 <span class="preprocessor">#endif</span>
<a name="l00871"></a>00871 <span class="preprocessor"></span>{
<a name="l00872"></a>00872         RakNetGUID strguid;
<a name="l00873"></a>00873         strguid.FromString(strid);
<a name="l00874"></a>00874         <span class="comment">//check to see if deleted</span>
<a name="l00875"></a>00875         DataStructures::Multilist&lt;ML_STACK, Replica3*&gt; replicaListOut;
<a name="l00876"></a>00876         replicaManager.GetReplicasCreatedByGuid(strguid,replicaListOut);
<a name="l00877"></a>00877         <span class="keywordflow">if</span> (replicaListOut.GetSize()==0) {
<a name="l00878"></a>00878                 <a class="code" href="_client_server_8h.html#a045310ed105e329426e31b89e065b05c">avatar_joint_replicas</a>.erase(strguid);
<a name="l00879"></a>00879                 <span class="keywordflow">return</span>;
<a name="l00880"></a>00880         }
<a name="l00881"></a>00881         strcpy(firstname,<span class="stringliteral">&quot;&quot;</span>);
<a name="l00882"></a>00882         strcpy(lastname,<span class="stringliteral">&quot;&quot;</span>);
<a name="l00883"></a>00883         <span class="keywordflow">for</span> ( std::vector&lt;BeamingAvatarJointReplica*&gt;::iterator cIter = <a class="code" href="_client_server_8h.html#a045310ed105e329426e31b89e065b05c">avatar_joint_replicas</a>[strguid].begin(); cIter!=<a class="code" href="_client_server_8h.html#a045310ed105e329426e31b89e065b05c">avatar_joint_replicas</a>[strguid].end(); cIter++ )
<a name="l00884"></a>00884         {
<a name="l00885"></a>00885                 <span class="keywordflow">if</span> (( strcmp((*cIter)-&gt;avatarjoint_id,<span class="stringliteral">&quot;0&quot;</span>) == 0 ) &amp;&amp; ( strcmp((*cIter)-&gt;clientname,avatar_id) == 0 ))
<a name="l00886"></a>00886                 {
<a name="l00887"></a>00887                         <span class="keywordtype">char</span> tmpstr[128];
<a name="l00888"></a>00888                         sprintf(firstname,<span class="stringliteral">&quot;%s&quot;</span>,(*cIter)-&gt;fname);  
<a name="l00889"></a>00889                         sprintf(lastname,<span class="stringliteral">&quot;%s&quot;</span>,(*cIter)-&gt;lname); 
<a name="l00890"></a>00890                         <span class="keywordflow">break</span>;
<a name="l00891"></a>00891                 }
<a name="l00892"></a>00892         }
<a name="l00893"></a>00893 }
<a name="l00894"></a>00894 
<a name="l00895"></a>00895 
<a name="l00896"></a>00896 <span class="preprocessor">#ifdef WIN32</span>
<a name="l00897"></a>00897 <span class="preprocessor"></span><a class="code" href="client_8h.html#acfdc053623a87a1a1d4adf03e6b6678d">CLIENT_LIB_EXPORT</a> <span class="keywordtype">int</span> <a class="code" href="client_8cpp.html#a08bdca402d4c72990f46c8e666e43f89">getAvatarData</a>(<span class="keywordtype">char</span> strid[], <span class="keywordtype">char</span> avatar_id[], <span class="keywordtype">char</span> *node_ids, <span class="keywordtype">float</span> *fa)
<a name="l00898"></a>00898 <span class="preprocessor">#else</span>
<a name="l00899"></a><a class="code" href="client_8h.html#ac815bf5ce454ef0c8d32ea5de6fcf735">00899</a> <span class="preprocessor"></span><span class="keywordtype">int</span> <a class="code" href="client_8cpp.html#a08bdca402d4c72990f46c8e666e43f89">getAvatarData</a>(<span class="keywordtype">char</span> strid[], <span class="keywordtype">char</span> avatar_id[], <span class="keywordtype">char</span> *node_ids,  <span class="keywordtype">float</span> *fa)
<a name="l00900"></a>00900 <span class="preprocessor">#endif</span>
<a name="l00901"></a>00901 <span class="preprocessor"></span>{
<a name="l00902"></a>00902         <span class="comment">//printf(&quot;fetching %s &quot;,strid);</span>
<a name="l00903"></a>00903         <span class="keywordtype">int</span> x = 0, y = 0;
<a name="l00904"></a>00904         RakNetGUID strguid;
<a name="l00905"></a>00905         strguid.FromString(strid);
<a name="l00906"></a>00906         <span class="comment">//check to see if deleted</span>
<a name="l00907"></a>00907         DataStructures::Multilist&lt;ML_STACK, Replica3*&gt; replicaListOut;
<a name="l00908"></a>00908         replicaManager.GetReplicasCreatedByGuid(strguid,replicaListOut);
<a name="l00909"></a>00909         <span class="keywordflow">if</span> (replicaListOut.GetSize()==0) {
<a name="l00910"></a>00910                 <a class="code" href="_client_server_8h.html#a045310ed105e329426e31b89e065b05c">avatar_joint_replicas</a>.erase(strguid);
<a name="l00911"></a>00911                 <span class="keywordflow">return</span> 0;
<a name="l00912"></a>00912         }
<a name="l00913"></a>00913         strcpy(node_ids,<span class="stringliteral">&quot;&quot;</span>);
<a name="l00914"></a>00914         <span class="keywordflow">for</span> ( std::vector&lt;BeamingAvatarJointReplica*&gt;::iterator cIter = <a class="code" href="_client_server_8h.html#a045310ed105e329426e31b89e065b05c">avatar_joint_replicas</a>[strguid].begin(); cIter!=<a class="code" href="_client_server_8h.html#a045310ed105e329426e31b89e065b05c">avatar_joint_replicas</a>[strguid].end(); cIter++ )
<a name="l00915"></a>00915         {
<a name="l00916"></a>00916                 <span class="keywordflow">if</span> ( strcmp((*cIter)-&gt;clientname,avatar_id) == 0 )
<a name="l00917"></a>00917                 {
<a name="l00918"></a>00918                         <span class="keywordtype">char</span> tmpstr[128];
<a name="l00919"></a>00919                         sprintf(tmpstr,<span class="stringliteral">&quot;%s,&quot;</span>,(*cIter)-&gt;avatarjoint_id); <span class="comment">//return node-ids as comma-delimited strings </span>
<a name="l00920"></a>00920                         strcat(node_ids,tmpstr);
<a name="l00921"></a>00921                         fa[x] = (*cIter)-&gt;position.x;
<a name="l00922"></a>00922                         fa[++x] = (*cIter)-&gt;position.y;
<a name="l00923"></a>00923                         fa[++x] = (*cIter)-&gt;position.z;
<a name="l00924"></a>00924                         fa[++x] = (*cIter)-&gt;orientation.x;
<a name="l00925"></a>00925                         fa[++x] = (*cIter)-&gt;orientation.y;
<a name="l00926"></a>00926                         fa[++x] = (*cIter)-&gt;orientation.z;
<a name="l00927"></a>00927                         fa[++x] = (*cIter)-&gt;orientation.w;
<a name="l00928"></a>00928                         x++;
<a name="l00929"></a>00929                         y++;
<a name="l00930"></a>00930                 }
<a name="l00931"></a>00931         }
<a name="l00932"></a>00932         <span class="comment">//printf(&quot;%s\n&quot;,node_ids);</span>
<a name="l00933"></a>00933         <span class="keywordflow">return</span> y;
<a name="l00934"></a>00934 }
<a name="l00935"></a>00935 
<a name="l00936"></a>00936 
<a name="l00937"></a>00937 <span class="preprocessor">#ifdef WIN32</span>
<a name="l00938"></a>00938 <span class="preprocessor"></span><a class="code" href="client_8h.html#acfdc053623a87a1a1d4adf03e6b6678d">CLIENT_LIB_EXPORT</a> <span class="keywordtype">int</span> <a class="code" href="client_8cpp.html#a0e2008ee14c15960cf34436dde0e587b" title="getFacialData(guid, node_id, bool, 5 floats) Gets the FACIAL data for the specified client/peer...">getFacialData</a>(<span class="keywordtype">char</span> strid[], <span class="keywordtype">char</span> *node_ids, <span class="keywordtype">bool</span> *blink, <span class="keywordtype">float</span> *smile, <span class="keywordtype">float</span> *frown, <span class="keywordtype">float</span> *o, <span class="keywordtype">float</span> *e, <span class="keywordtype">float</span> *p)
<a name="l00939"></a>00939 <span class="preprocessor">#else</span>
<a name="l00940"></a><a class="code" href="client_8h.html#ac35133228bbd31054b6694ec8e05cea3">00940</a> <span class="preprocessor"></span><span class="keywordtype">int</span> <a class="code" href="client_8cpp.html#a0e2008ee14c15960cf34436dde0e587b" title="getFacialData(guid, node_id, bool, 5 floats) Gets the FACIAL data for the specified client/peer...">getFacialData</a>(<span class="keywordtype">char</span> strid[], <span class="keywordtype">char</span> *node_ids, <span class="keywordtype">bool</span> *blink, <span class="keywordtype">float</span> *smile, <span class="keywordtype">float</span> *frown, <span class="keywordtype">float</span> *o, <span class="keywordtype">float</span> *e, <span class="keywordtype">float</span> *p)
<a name="l00941"></a>00941 <span class="preprocessor">#endif</span>
<a name="l00942"></a>00942 <span class="preprocessor"></span>{
<a name="l00943"></a>00943         <span class="comment">//printf(&quot;fetching %s &quot;,strid);</span>
<a name="l00944"></a>00944         <span class="keywordtype">int</span> y = 0;
<a name="l00945"></a>00945         RakNetGUID strguid;
<a name="l00946"></a>00946         strguid.FromString(strid);
<a name="l00947"></a>00947         <span class="comment">//check to see if deleted</span>
<a name="l00948"></a>00948         DataStructures::Multilist&lt;ML_STACK, Replica3*&gt; replicaListOut;
<a name="l00949"></a>00949         replicaManager.GetReplicasCreatedByGuid(strguid,replicaListOut);
<a name="l00950"></a>00950         <span class="keywordflow">if</span> (replicaListOut.GetSize()==0) {
<a name="l00951"></a>00951                 <a class="code" href="_client_server_8h.html#a3ebf39ed2989b10581f8f5ef1b977b38">facial_replicas</a>.erase(strguid);
<a name="l00952"></a>00952                 <span class="keywordflow">return</span> 0;
<a name="l00953"></a>00953         }
<a name="l00954"></a>00954         strcpy(node_ids,<span class="stringliteral">&quot;&quot;</span>);
<a name="l00955"></a>00955         <span class="keywordflow">for</span> ( std::vector&lt;BeamingFacialReplica*&gt;::iterator cIter = <a class="code" href="_client_server_8h.html#a3ebf39ed2989b10581f8f5ef1b977b38">facial_replicas</a>[strguid].begin(); cIter!=<a class="code" href="_client_server_8h.html#a3ebf39ed2989b10581f8f5ef1b977b38">facial_replicas</a>[strguid].end(); cIter++ )
<a name="l00956"></a>00956         {
<a name="l00957"></a>00957                 <span class="keywordtype">char</span> tmpstr[128];
<a name="l00958"></a>00958                 sprintf(tmpstr,<span class="stringliteral">&quot;%s,&quot;</span>,(*cIter)-&gt;facial_id); <span class="comment">//return node-ids as comma-delimited strings </span>
<a name="l00959"></a>00959                 strcat(node_ids,tmpstr);
<a name="l00960"></a>00960                 blink[y] = (*cIter)-&gt;blink;
<a name="l00961"></a>00961                 smile[y] = (*cIter)-&gt;smile;
<a name="l00962"></a>00962                 frown[y] = (*cIter)-&gt;frown;
<a name="l00963"></a>00963                 o[y] = (*cIter)-&gt;o;
<a name="l00964"></a>00964                 e[y] = (*cIter)-&gt;e;
<a name="l00965"></a>00965                 p[y] = (*cIter)-&gt;p;
<a name="l00966"></a>00966                 y++;
<a name="l00967"></a>00967         }
<a name="l00968"></a>00968         <span class="comment">//printf(&quot;%s\n&quot;,node_ids);</span>
<a name="l00969"></a>00969         <span class="keywordflow">return</span> y;
<a name="l00970"></a>00970 }
<a name="l00971"></a>00971 
<a name="l00972"></a>00972 
<a name="l00973"></a>00973 <span class="preprocessor">#ifdef WIN32</span>
<a name="l00974"></a>00974 <span class="preprocessor"></span><a class="code" href="client_8h.html#acfdc053623a87a1a1d4adf03e6b6678d">CLIENT_LIB_EXPORT</a> <span class="keywordtype">int</span> <a class="code" href="client_8cpp.html#a7d62d01a5f46150d8a58f1ebe275c704" title="getEmotionData(guid, node_id, 3 doubles) Gets the EMOTION data for the specified client/peer.">getEmotionData</a>(<span class="keywordtype">char</span> strid[], <span class="keywordtype">char</span> *node_ids, <span class="keywordtype">double</span> *valence, <span class="keywordtype">double</span> *arousal, <span class="keywordtype">double</span> *misc)
<a name="l00975"></a>00975 <span class="preprocessor">#else</span>
<a name="l00976"></a><a class="code" href="client_8h.html#a20b99139ca51b1186034a9aef721fde7">00976</a> <span class="preprocessor"></span><span class="keywordtype">int</span> <a class="code" href="client_8cpp.html#a7d62d01a5f46150d8a58f1ebe275c704" title="getEmotionData(guid, node_id, 3 doubles) Gets the EMOTION data for the specified client/peer.">getEmotionData</a>(<span class="keywordtype">char</span> strid[], <span class="keywordtype">char</span> *node_ids, <span class="keywordtype">double</span> *valence, <span class="keywordtype">double</span> *arousal, <span class="keywordtype">double</span> *misc)
<a name="l00977"></a>00977 <span class="preprocessor">#endif</span>
<a name="l00978"></a>00978 <span class="preprocessor"></span>{
<a name="l00979"></a>00979         <span class="comment">//printf(&quot;fetching %s &quot;,strid);</span>
<a name="l00980"></a>00980         <span class="keywordtype">int</span> y = 0;
<a name="l00981"></a>00981         RakNetGUID strguid;
<a name="l00982"></a>00982         strguid.FromString(strid);
<a name="l00983"></a>00983         <span class="comment">//check to see if deleted</span>
<a name="l00984"></a>00984         DataStructures::Multilist&lt;ML_STACK, Replica3*&gt; replicaListOut;
<a name="l00985"></a>00985         replicaManager.GetReplicasCreatedByGuid(strguid,replicaListOut);
<a name="l00986"></a>00986         <span class="keywordflow">if</span> (replicaListOut.GetSize()==0) {
<a name="l00987"></a>00987                 <a class="code" href="_client_server_8h.html#a09e5b19ea35b0333e0b25fbe166acdfc">emotion_replicas</a>.erase(strguid);
<a name="l00988"></a>00988                 <span class="keywordflow">return</span> 0;
<a name="l00989"></a>00989         }
<a name="l00990"></a>00990         strcpy(node_ids,<span class="stringliteral">&quot;&quot;</span>);
<a name="l00991"></a>00991         <span class="keywordflow">for</span> ( std::vector&lt;BeamingEmotionReplica*&gt;::iterator cIter = <a class="code" href="_client_server_8h.html#a09e5b19ea35b0333e0b25fbe166acdfc">emotion_replicas</a>[strguid].begin(); cIter!=<a class="code" href="_client_server_8h.html#a09e5b19ea35b0333e0b25fbe166acdfc">emotion_replicas</a>[strguid].end(); cIter++ )
<a name="l00992"></a>00992         {
<a name="l00993"></a>00993                 <span class="keywordtype">char</span> tmpstr[128];
<a name="l00994"></a>00994                 sprintf(tmpstr,<span class="stringliteral">&quot;%s,&quot;</span>,(*cIter)-&gt;emotion_id); <span class="comment">//return node-ids as comma-delimited strings </span>
<a name="l00995"></a>00995                 strcat(node_ids,tmpstr);
<a name="l00996"></a>00996                 valence[y] = (*cIter)-&gt;valence;
<a name="l00997"></a>00997                 arousal[y] = (*cIter)-&gt;arousal;
<a name="l00998"></a>00998                 misc[y] = (*cIter)-&gt;misc;
<a name="l00999"></a>00999                 y++;
<a name="l01000"></a>01000         }
<a name="l01001"></a>01001         <span class="comment">//printf(&quot;%s\n&quot;,node_ids);</span>
<a name="l01002"></a>01002         <span class="keywordflow">return</span> y;
<a name="l01003"></a>01003 }
<a name="l01004"></a>01004 
<a name="l01005"></a>01005 
<a name="l01006"></a>01006 <span class="preprocessor">#ifdef WIN32</span>
<a name="l01007"></a>01007 <span class="preprocessor"></span><a class="code" href="client_8h.html#acfdc053623a87a1a1d4adf03e6b6678d">CLIENT_LIB_EXPORT</a> <span class="keywordtype">int</span> <a class="code" href="client_8cpp.html#afbfcca66149559d82896aaa9f73aca9c" title="getTactileData(guid, node_id, 1 float, 2 doubles) Gets the TACTILE data for the specified client/peer...">getTactileData</a>(<span class="keywordtype">char</span> strid[], <span class="keywordtype">char</span> *node_ids, <span class="keywordtype">double</span> *duration, <span class="keywordtype">float</span> *intensity, <span class="keywordtype">float</span> *temperature)
<a name="l01008"></a>01008 <span class="preprocessor">#else</span>
<a name="l01009"></a><a class="code" href="client_8h.html#a0a963762da0bae3e5fd5521a4fe23425">01009</a> <span class="preprocessor"></span><span class="keywordtype">int</span> <a class="code" href="client_8cpp.html#afbfcca66149559d82896aaa9f73aca9c" title="getTactileData(guid, node_id, 1 float, 2 doubles) Gets the TACTILE data for the specified client/peer...">getTactileData</a>(<span class="keywordtype">char</span> strid[], <span class="keywordtype">char</span> *node_ids, <span class="keywordtype">double</span> *duration, <span class="keywordtype">float</span> *intensity, <span class="keywordtype">float</span> *temperature)
<a name="l01010"></a>01010 <span class="preprocessor">#endif</span>
<a name="l01011"></a>01011 <span class="preprocessor"></span>{
<a name="l01012"></a>01012         <span class="comment">//printf(&quot;fetching %s &quot;,strid);</span>
<a name="l01013"></a>01013         <span class="keywordtype">int</span> x = 0, y = 0;
<a name="l01014"></a>01014         RakNetGUID strguid;
<a name="l01015"></a>01015         strguid.FromString(strid);
<a name="l01016"></a>01016         <span class="comment">//check to see if deleted</span>
<a name="l01017"></a>01017         DataStructures::Multilist&lt;ML_STACK, Replica3*&gt; replicaListOut;
<a name="l01018"></a>01018         replicaManager.GetReplicasCreatedByGuid(strguid,replicaListOut);
<a name="l01019"></a>01019         <span class="keywordflow">if</span> (replicaListOut.GetSize()==0) {
<a name="l01020"></a>01020                 <a class="code" href="_client_server_8h.html#a6822ba84ee75da64dc977e6bc3646328">tactile_replicas</a>.erase(strguid);
<a name="l01021"></a>01021                 <span class="keywordflow">return</span> 0;
<a name="l01022"></a>01022         }
<a name="l01023"></a>01023         strcpy(node_ids,<span class="stringliteral">&quot;&quot;</span>);
<a name="l01024"></a>01024         <span class="keywordflow">for</span> ( std::vector&lt;BeamingTactileReplica*&gt;::iterator cIter = <a class="code" href="_client_server_8h.html#a6822ba84ee75da64dc977e6bc3646328">tactile_replicas</a>[strguid].begin(); cIter!=<a class="code" href="_client_server_8h.html#a6822ba84ee75da64dc977e6bc3646328">tactile_replicas</a>[strguid].end(); cIter++ )
<a name="l01025"></a>01025         {
<a name="l01026"></a>01026                 <span class="keywordtype">char</span> tmpstr[128];
<a name="l01027"></a>01027                 sprintf(tmpstr,<span class="stringliteral">&quot;%s,&quot;</span>,(*cIter)-&gt;tactile_id); <span class="comment">//return node-ids as comma-delimited strings </span>
<a name="l01028"></a>01028                 strcat(node_ids,tmpstr);
<a name="l01029"></a>01029                 duration[y] = (*cIter)-&gt;duration;
<a name="l01030"></a>01030                 intensity[y] = (*cIter)-&gt;intensity;
<a name="l01031"></a>01031                 temperature[y] = (*cIter)-&gt;temperature;
<a name="l01032"></a>01032                 y++;
<a name="l01033"></a>01033         }
<a name="l01034"></a>01034         <span class="comment">//printf(&quot;%s\n&quot;,node_ids);</span>
<a name="l01035"></a>01035         <span class="keywordflow">return</span> y;
<a name="l01036"></a>01036 }
<a name="l01037"></a>01037 
<a name="l01038"></a>01038 
<a name="l01039"></a>01039 <span class="preprocessor">#ifdef WIN32</span>
<a name="l01040"></a>01040 <span class="preprocessor"></span><a class="code" href="client_8h.html#acfdc053623a87a1a1d4adf03e6b6678d">CLIENT_LIB_EXPORT</a> <span class="keywordtype">int</span> <a class="code" href="client_8cpp.html#aa596ccd33ab954cb507f6f7c16fb5307">getRobotData</a>(<span class="keywordtype">char</span> strid[], <span class="keywordtype">char</span> *node_ids, <span class="keywordtype">int</span> *type, <span class="keywordtype">int</span> *details, <span class="keywordtype">float</span> *freespace, <span class="keywordtype">float</span> *fa, <span class="keywordtype">float</span> *time_remain, <span class="keywordtype">int</span> *contact_type)
<a name="l01041"></a>01041 <span class="preprocessor">#else</span>
<a name="l01042"></a><a class="code" href="client_8cpp.html#aa596ccd33ab954cb507f6f7c16fb5307">01042</a> <span class="preprocessor"></span><span class="keywordtype">int</span> <a class="code" href="client_8cpp.html#aa596ccd33ab954cb507f6f7c16fb5307">getRobotData</a>(<span class="keywordtype">char</span> strid[], <span class="keywordtype">char</span> *node_ids, <span class="keywordtype">int</span> *type, <span class="keywordtype">int</span> *details, <span class="keywordtype">float</span> *freespace, <span class="keywordtype">float</span> *fa, <span class="keywordtype">float</span> *time_remain, <span class="keywordtype">int</span> *contact_type)
<a name="l01043"></a>01043 <span class="preprocessor">#endif</span>
<a name="l01044"></a>01044 <span class="preprocessor"></span>{
<a name="l01045"></a>01045         <span class="comment">//printf(&quot;fetching %s &quot;,strid);</span>
<a name="l01046"></a>01046         <span class="keywordtype">int</span> x = 0, y = 0;
<a name="l01047"></a>01047         RakNetGUID strguid;
<a name="l01048"></a>01048         strguid.FromString(strid);
<a name="l01049"></a>01049         <span class="comment">//check to see if deleted</span>
<a name="l01050"></a>01050         DataStructures::Multilist&lt;ML_STACK, Replica3*&gt; replicaListOut;
<a name="l01051"></a>01051         replicaManager.GetReplicasCreatedByGuid(strguid,replicaListOut);
<a name="l01052"></a>01052         <span class="keywordflow">if</span> (replicaListOut.GetSize()==0) {
<a name="l01053"></a>01053                 <a class="code" href="_client_server_8h.html#a8f02b9433307fc8567cc587ed4be14bd">robot_replicas</a>.erase(strguid);
<a name="l01054"></a>01054                 <span class="keywordflow">return</span> 0;
<a name="l01055"></a>01055         }
<a name="l01056"></a>01056         strcpy(node_ids,<span class="stringliteral">&quot;&quot;</span>);
<a name="l01057"></a>01057         <span class="keywordflow">for</span> ( std::vector&lt;BeamingRobotReplica*&gt;::iterator cIter = <a class="code" href="_client_server_8h.html#a8f02b9433307fc8567cc587ed4be14bd">robot_replicas</a>[strguid].begin(); cIter!=<a class="code" href="_client_server_8h.html#a8f02b9433307fc8567cc587ed4be14bd">robot_replicas</a>[strguid].end(); cIter++ )
<a name="l01058"></a>01058         {
<a name="l01059"></a>01059                 <span class="keywordtype">char</span> tmpstr[128];
<a name="l01060"></a>01060                 sprintf(tmpstr,<span class="stringliteral">&quot;%s,&quot;</span>,(*cIter)-&gt;robot_id); <span class="comment">//return node-ids as comma-delimited strings </span>
<a name="l01061"></a>01061                 strcat(node_ids,tmpstr);
<a name="l01062"></a>01062                 type[y] = (*cIter)-&gt;type;
<a name="l01063"></a>01063                 details[y] = (*cIter)-&gt;details;
<a name="l01064"></a>01064                 freespace[y] = (*cIter)-&gt;freespace;
<a name="l01065"></a>01065                 fa[x] = (*cIter)-&gt;position.x;
<a name="l01066"></a>01066                 fa[++x] = (*cIter)-&gt;position.y;
<a name="l01067"></a>01067                 fa[++x] = (*cIter)-&gt;position.z;
<a name="l01068"></a>01068                 fa[++x] = (*cIter)-&gt;orientation.x;
<a name="l01069"></a>01069                 fa[++x] = (*cIter)-&gt;orientation.y;
<a name="l01070"></a>01070                 fa[++x] = (*cIter)-&gt;orientation.z;
<a name="l01071"></a>01071                 fa[++x] = (*cIter)-&gt;orientation.w;
<a name="l01072"></a>01072                 time_remain[y] = (*cIter)-&gt;time_remain;
<a name="l01073"></a>01073                 contact_type[y] = (*cIter)-&gt;contact_type;
<a name="l01074"></a>01074                 x++;
<a name="l01075"></a>01075                 y++;
<a name="l01076"></a>01076         }
<a name="l01077"></a>01077         <span class="comment">//printf(&quot;%s\n&quot;,node_ids);</span>
<a name="l01078"></a>01078         <span class="keywordflow">return</span> y;
<a name="l01079"></a>01079 }
<a name="l01080"></a>01080 
<a name="l01081"></a>01081 
<a name="l01082"></a>01082 <span class="preprocessor">#ifdef WIN32</span>
<a name="l01083"></a>01083 <span class="preprocessor"></span><a class="code" href="client_8h.html#acfdc053623a87a1a1d4adf03e6b6678d">CLIENT_LIB_EXPORT</a> <span class="keywordtype">int</span> <a class="code" href="client_8cpp.html#a92f8a9adb43986bb8f888fa33d54e616" title="getAudioData(guid, node_id, 3 strings and 1 integer) Gets the AUDIO data for the specified client/pee...">getAudioData</a>(<span class="keywordtype">char</span> strid[], <span class="keywordtype">char</span> *node_ids, <span class="keywordtype">char</span> *host, <span class="keywordtype">int</span> *port, <span class="keywordtype">char</span> *file_url, <span class="keywordtype">char</span> *config)
<a name="l01084"></a>01084 <span class="preprocessor">#else</span>
<a name="l01085"></a><a class="code" href="client_8h.html#a32ad28a447b1d5bb67411b90058a8043">01085</a> <span class="preprocessor"></span><span class="keywordtype">int</span> <a class="code" href="client_8cpp.html#a92f8a9adb43986bb8f888fa33d54e616" title="getAudioData(guid, node_id, 3 strings and 1 integer) Gets the AUDIO data for the specified client/pee...">getAudioData</a>(<span class="keywordtype">char</span> strid[], <span class="keywordtype">char</span> *node_ids, <span class="keywordtype">char</span> *host, <span class="keywordtype">int</span> *port, <span class="keywordtype">char</span> *file_url, <span class="keywordtype">char</span> *config)
<a name="l01086"></a>01086 <span class="preprocessor">#endif</span>
<a name="l01087"></a>01087 <span class="preprocessor"></span>{
<a name="l01088"></a>01088         <span class="comment">//printf(&quot;fetching %s &quot;,strid);</span>
<a name="l01089"></a>01089         <span class="keywordtype">int</span> y = 0;
<a name="l01090"></a>01090         RakNetGUID strguid;
<a name="l01091"></a>01091         strguid.FromString(strid);
<a name="l01092"></a>01092         <span class="comment">//check to see if deleted</span>
<a name="l01093"></a>01093         DataStructures::Multilist&lt;ML_STACK, Replica3*&gt; replicaListOut;
<a name="l01094"></a>01094         replicaManager.GetReplicasCreatedByGuid(strguid,replicaListOut);
<a name="l01095"></a>01095         <span class="keywordflow">if</span> (replicaListOut.GetSize()==0) {
<a name="l01096"></a>01096                 <a class="code" href="_client_server_8h.html#a40bd55104716ac13ddbfe90bf63f60da">audio_replicas</a>.erase(strguid);
<a name="l01097"></a>01097                 <span class="keywordflow">return</span> 0;
<a name="l01098"></a>01098         }
<a name="l01099"></a>01099         strcpy(node_ids,<span class="stringliteral">&quot;&quot;</span>);
<a name="l01100"></a>01100         <span class="keywordflow">for</span> ( std::vector&lt;BeamingAudioReplica*&gt;::iterator cIter = <a class="code" href="_client_server_8h.html#a40bd55104716ac13ddbfe90bf63f60da">audio_replicas</a>[strguid].begin(); cIter!=<a class="code" href="_client_server_8h.html#a40bd55104716ac13ddbfe90bf63f60da">audio_replicas</a>[strguid].end(); cIter++ )
<a name="l01101"></a>01101         {
<a name="l01102"></a>01102                 <span class="keywordtype">char</span> tmpstr[128];
<a name="l01103"></a>01103                 sprintf(tmpstr,<span class="stringliteral">&quot;%s,&quot;</span>,(*cIter)-&gt;audio_id); <span class="comment">//return node-ids as comma-delimited strings </span>
<a name="l01104"></a>01104                 strcat(node_ids,tmpstr);
<a name="l01105"></a>01105                 sprintf(tmpstr,<span class="stringliteral">&quot;%s,&quot;</span>,(*cIter)-&gt;host); <span class="comment">//return hosts as comma-delimited strings </span>
<a name="l01106"></a>01106                 strcat(host,tmpstr);
<a name="l01107"></a>01107                 port[y] = (*cIter)-&gt;port;
<a name="l01108"></a>01108                 sprintf(tmpstr,<span class="stringliteral">&quot;%s,&quot;</span>,(*cIter)-&gt;file_url); <span class="comment">//return file_url as comma-delimited strings </span>
<a name="l01109"></a>01109                 strcat(file_url,tmpstr);
<a name="l01110"></a>01110                 sprintf(tmpstr,<span class="stringliteral">&quot;%s,&quot;</span>,(*cIter)-&gt;config); <span class="comment">//return config as comma-delimited strings </span>
<a name="l01111"></a>01111                 strcat(config,tmpstr);
<a name="l01112"></a>01112                 y++;
<a name="l01113"></a>01113         }
<a name="l01114"></a>01114         <span class="comment">//printf(&quot;%s\n&quot;,node_ids);</span>
<a name="l01115"></a>01115         <span class="keywordflow">return</span> y;
<a name="l01116"></a>01116 }
<a name="l01117"></a>01117 
<a name="l01118"></a>01118 
<a name="l01119"></a>01119 <span class="preprocessor">#ifdef WIN32</span>
<a name="l01120"></a>01120 <span class="preprocessor"></span><a class="code" href="client_8h.html#acfdc053623a87a1a1d4adf03e6b6678d">CLIENT_LIB_EXPORT</a> <span class="keywordtype">int</span> <a class="code" href="client_8cpp.html#a5ab2a66eaf31e1b16188f534a75d7f19" title="getVideoData(guid, node_id, 2 strings, 3 integers and 1 double) Gets the VIDEO data for the specified...">getVideoData</a>(<span class="keywordtype">char</span> strid[], <span class="keywordtype">char</span> *node_ids, <span class="keywordtype">char</span> *host, <span class="keywordtype">int</span> *port, <span class="keywordtype">char</span> *file_url, <span class="keywordtype">int</span> *frame_width, <span class="keywordtype">int</span> *frame_height, <span class="keywordtype">double</span> *bandwidth)
<a name="l01121"></a>01121 <span class="preprocessor">#else</span>
<a name="l01122"></a><a class="code" href="client_8h.html#ad1fe43b4d059bfa7cb2a280f6caf5fca">01122</a> <span class="preprocessor"></span><span class="keywordtype">int</span> <a class="code" href="client_8cpp.html#a5ab2a66eaf31e1b16188f534a75d7f19" title="getVideoData(guid, node_id, 2 strings, 3 integers and 1 double) Gets the VIDEO data for the specified...">getVideoData</a>(<span class="keywordtype">char</span> strid[], <span class="keywordtype">char</span> *node_ids, <span class="keywordtype">char</span> *host, <span class="keywordtype">int</span> *port, <span class="keywordtype">char</span> *file_url, <span class="keywordtype">int</span> *frame_width, <span class="keywordtype">int</span> *frame_height, <span class="keywordtype">double</span> *bandwidth)
<a name="l01123"></a>01123 <span class="preprocessor">#endif</span>
<a name="l01124"></a>01124 <span class="preprocessor"></span>{
<a name="l01125"></a>01125         <span class="comment">//printf(&quot;fetching %s &quot;,strid);</span>
<a name="l01126"></a>01126         <span class="keywordtype">int</span> y = 0;
<a name="l01127"></a>01127         RakNetGUID strguid;
<a name="l01128"></a>01128         strguid.FromString(strid);
<a name="l01129"></a>01129         <span class="comment">//check to see if deleted</span>
<a name="l01130"></a>01130         DataStructures::Multilist&lt;ML_STACK, Replica3*&gt; replicaListOut;
<a name="l01131"></a>01131         replicaManager.GetReplicasCreatedByGuid(strguid,replicaListOut);
<a name="l01132"></a>01132         <span class="keywordflow">if</span> (replicaListOut.GetSize()==0) {
<a name="l01133"></a>01133                 <a class="code" href="_client_server_8h.html#a0b1a936c33cf846d256dd0a4f8cab0de">video_replicas</a>.erase(strguid);
<a name="l01134"></a>01134                 <span class="keywordflow">return</span> 0;
<a name="l01135"></a>01135         }
<a name="l01136"></a>01136         strcpy(node_ids,<span class="stringliteral">&quot;&quot;</span>);
<a name="l01137"></a>01137         <span class="keywordflow">for</span> ( std::vector&lt;BeamingVideoReplica*&gt;::iterator cIter = <a class="code" href="_client_server_8h.html#a0b1a936c33cf846d256dd0a4f8cab0de">video_replicas</a>[strguid].begin(); cIter!=<a class="code" href="_client_server_8h.html#a0b1a936c33cf846d256dd0a4f8cab0de">video_replicas</a>[strguid].end(); cIter++ )
<a name="l01138"></a>01138         {
<a name="l01139"></a>01139                 <span class="keywordtype">char</span> tmpstr[128];
<a name="l01140"></a>01140                 sprintf(tmpstr,<span class="stringliteral">&quot;%s,&quot;</span>,(*cIter)-&gt;video_id); <span class="comment">//return node-ids as strings </span>
<a name="l01141"></a>01141                 strcat(node_ids,tmpstr);
<a name="l01142"></a>01142                 sprintf(tmpstr,<span class="stringliteral">&quot;%s,&quot;</span>,(*cIter)-&gt;host); <span class="comment">//return hosts as comma-delimited strings </span>
<a name="l01143"></a>01143                 strcat(host,tmpstr);
<a name="l01144"></a>01144                 port[y] = (*cIter)-&gt;port;
<a name="l01145"></a>01145                 sprintf(tmpstr,<span class="stringliteral">&quot;%s,&quot;</span>,(*cIter)-&gt;file_url); <span class="comment">//return file_url as comma-delimited strings </span>
<a name="l01146"></a>01146                 strcat(file_url,tmpstr);
<a name="l01147"></a>01147                 frame_width[y] = (*cIter)-&gt;frame_width;
<a name="l01148"></a>01148                 frame_height[y] = (*cIter)-&gt;frame_height;
<a name="l01149"></a>01149                 bandwidth[y] = (*cIter)-&gt;bandwidth;
<a name="l01150"></a>01150                 y++;
<a name="l01151"></a>01151         }
<a name="l01152"></a>01152         <span class="comment">//printf(&quot;%s\n&quot;,node_ids);</span>
<a name="l01153"></a>01153         <span class="keywordflow">return</span> y;
<a name="l01154"></a>01154 }
<a name="l01155"></a>01155 
<a name="l01156"></a>01156 
<a name="l01157"></a>01157 <span class="preprocessor">#ifdef WIN32</span>
<a name="l01158"></a>01158 <span class="preprocessor"></span><a class="code" href="client_8h.html#acfdc053623a87a1a1d4adf03e6b6678d">CLIENT_LIB_EXPORT</a> <span class="keywordtype">int</span> <a class="code" href="client_8cpp.html#a0dde703e0ee1961e54c33e0c65e8077a" title="getObjectData(guid, node_id, 2 strings, 1 integer and 7 floats) Gets the OBJECT data for the specifie...">getObjectData</a>(<span class="keywordtype">char</span> strid[], <span class="keywordtype">char</span> *node_ids, <span class="keywordtype">char</span> *host, <span class="keywordtype">int</span> *port, <span class="keywordtype">char</span> *file_url, <span class="keywordtype">float</span> *fa)
<a name="l01159"></a>01159 <span class="preprocessor">#else</span>
<a name="l01160"></a><a class="code" href="client_8h.html#af6da80d8ac56527e14ceaa77635abfc7">01160</a> <span class="preprocessor"></span><span class="keywordtype">int</span> <a class="code" href="client_8cpp.html#a0dde703e0ee1961e54c33e0c65e8077a" title="getObjectData(guid, node_id, 2 strings, 1 integer and 7 floats) Gets the OBJECT data for the specifie...">getObjectData</a>(<span class="keywordtype">char</span> strid[], <span class="keywordtype">char</span> *node_ids, <span class="keywordtype">char</span> *host, <span class="keywordtype">int</span> *port, <span class="keywordtype">char</span> *file_url, <span class="keywordtype">float</span> *fa)
<a name="l01161"></a>01161 <span class="preprocessor">#endif</span>
<a name="l01162"></a>01162 <span class="preprocessor"></span>{
<a name="l01163"></a>01163         <span class="comment">//printf(&quot;fetching %s &quot;,strid);</span>
<a name="l01164"></a>01164         <span class="keywordtype">int</span> x = 0, y = 0;
<a name="l01165"></a>01165         RakNetGUID strguid;
<a name="l01166"></a>01166         strguid.FromString(strid);
<a name="l01167"></a>01167         <span class="comment">//check to see if deleted</span>
<a name="l01168"></a>01168         DataStructures::Multilist&lt;ML_STACK, Replica3*&gt; replicaListOut;
<a name="l01169"></a>01169         replicaManager.GetReplicasCreatedByGuid(strguid,replicaListOut);
<a name="l01170"></a>01170         <span class="keywordflow">if</span> (replicaListOut.GetSize()==0) {
<a name="l01171"></a>01171                 <a class="code" href="_client_server_8h.html#aaac52d5fa5b61e29925ed124fe03d35d">object_replicas</a>.erase(strguid);
<a name="l01172"></a>01172                 <span class="keywordflow">return</span> 0;
<a name="l01173"></a>01173         }
<a name="l01174"></a>01174         strcpy(node_ids,<span class="stringliteral">&quot;&quot;</span>);
<a name="l01175"></a>01175         <span class="keywordflow">for</span> ( std::vector&lt;BeamingObjectReplica*&gt;::iterator cIter = <a class="code" href="_client_server_8h.html#aaac52d5fa5b61e29925ed124fe03d35d">object_replicas</a>[strguid].begin(); cIter!=<a class="code" href="_client_server_8h.html#aaac52d5fa5b61e29925ed124fe03d35d">object_replicas</a>[strguid].end(); cIter++ )
<a name="l01176"></a>01176         {
<a name="l01177"></a>01177                 <span class="keywordtype">char</span> tmpstr[128];
<a name="l01178"></a>01178                 sprintf(tmpstr,<span class="stringliteral">&quot;%s,&quot;</span>,(*cIter)-&gt;object_id); <span class="comment">//return node-ids as strings </span>
<a name="l01179"></a>01179                 strcat(node_ids,tmpstr);
<a name="l01180"></a>01180                 sprintf(tmpstr,<span class="stringliteral">&quot;%s,&quot;</span>,(*cIter)-&gt;host); <span class="comment">//return hosts as comma-delimited strings </span>
<a name="l01181"></a>01181                 strcat(host,tmpstr);
<a name="l01182"></a>01182                 port[y] = (*cIter)-&gt;port;
<a name="l01183"></a>01183                 sprintf(tmpstr,<span class="stringliteral">&quot;%s,&quot;</span>,(*cIter)-&gt;file_url); <span class="comment">//return file_url as comma-delimited strings </span>
<a name="l01184"></a>01184                 strcat(file_url,tmpstr);
<a name="l01185"></a>01185                 fa[x] = (*cIter)-&gt;position.x;
<a name="l01186"></a>01186                 fa[++x] = (*cIter)-&gt;position.y;
<a name="l01187"></a>01187                 fa[++x] = (*cIter)-&gt;position.z;
<a name="l01188"></a>01188                 fa[++x] = (*cIter)-&gt;orientation.x;
<a name="l01189"></a>01189                 fa[++x] = (*cIter)-&gt;orientation.y;
<a name="l01190"></a>01190                 fa[++x] = (*cIter)-&gt;orientation.z;
<a name="l01191"></a>01191                 fa[++x] = (*cIter)-&gt;orientation.w;
<a name="l01192"></a>01192                 x++;
<a name="l01193"></a>01193                 y++;
<a name="l01194"></a>01194         }
<a name="l01195"></a>01195         <span class="comment">//printf(&quot;%s\n&quot;,node_ids);</span>
<a name="l01196"></a>01196         <span class="keywordflow">return</span> y;
<a name="l01197"></a>01197 }
<a name="l01198"></a>01198 
<a name="l01199"></a>01199 
<a name="l01200"></a>01200 <span class="preprocessor">#ifdef WIN32</span>
<a name="l01201"></a>01201 <span class="preprocessor"></span><a class="code" href="client_8h.html#acfdc053623a87a1a1d4adf03e6b6678d">CLIENT_LIB_EXPORT</a> <span class="keywordtype">int</span> <a class="code" href="client_8cpp.html#a9c0c668613f1902aa605c4320d41116e" title="getPointCloudData(guid, node_id, 2 strings, 2 integers, 1 double and 1 boolean) Gets the POINTCLOUD d...">getPointCloudData</a>(<span class="keywordtype">char</span> strid[], <span class="keywordtype">char</span> *node_ids, <span class="keywordtype">char</span> *host, <span class="keywordtype">int</span> *port, <span class="keywordtype">char</span> *file_url, <span class="keywordtype">int</span> *size, <span class="keywordtype">double</span> *bandwidth, <span class="keywordtype">bool</span> *RGB_flag)
<a name="l01202"></a>01202 <span class="preprocessor">#else</span>
<a name="l01203"></a><a class="code" href="client_8h.html#ac519432b0c4fc0e0eea990b6e5f967b7">01203</a> <span class="preprocessor"></span><span class="keywordtype">int</span> <a class="code" href="client_8cpp.html#a9c0c668613f1902aa605c4320d41116e" title="getPointCloudData(guid, node_id, 2 strings, 2 integers, 1 double and 1 boolean) Gets the POINTCLOUD d...">getPointCloudData</a>(<span class="keywordtype">char</span> strid[], <span class="keywordtype">char</span> *node_ids, <span class="keywordtype">char</span> *host, <span class="keywordtype">int</span> *port, <span class="keywordtype">char</span> *file_url, <span class="keywordtype">int</span> *size, <span class="keywordtype">double</span> *bandwidth, <span class="keywordtype">bool</span> *RGB_flag)
<a name="l01204"></a>01204 <span class="preprocessor">#endif</span>
<a name="l01205"></a>01205 <span class="preprocessor"></span>{
<a name="l01206"></a>01206         <span class="comment">//printf(&quot;fetching %s &quot;,strid);</span>
<a name="l01207"></a>01207         <span class="keywordtype">int</span> y = 0;
<a name="l01208"></a>01208         RakNetGUID strguid;
<a name="l01209"></a>01209         strguid.FromString(strid);
<a name="l01210"></a>01210         <span class="comment">//check to see if deleted</span>
<a name="l01211"></a>01211         DataStructures::Multilist&lt;ML_STACK, Replica3*&gt; replicaListOut;
<a name="l01212"></a>01212         replicaManager.GetReplicasCreatedByGuid(strguid,replicaListOut);
<a name="l01213"></a>01213         <span class="keywordflow">if</span> (replicaListOut.GetSize()==0) {
<a name="l01214"></a>01214                 <a class="code" href="_client_server_8h.html#a7c73662d8d9072e714396d76b8b98a1f">point_cloud_replicas</a>.erase(strguid);
<a name="l01215"></a>01215                 <span class="keywordflow">return</span> 0;
<a name="l01216"></a>01216         }
<a name="l01217"></a>01217         strcpy(node_ids,<span class="stringliteral">&quot;&quot;</span>);
<a name="l01218"></a>01218         <span class="keywordflow">for</span> ( std::vector&lt;BeamingPointCloudReplica*&gt;::iterator cIter = <a class="code" href="_client_server_8h.html#a7c73662d8d9072e714396d76b8b98a1f">point_cloud_replicas</a>[strguid].begin(); cIter!=<a class="code" href="_client_server_8h.html#a7c73662d8d9072e714396d76b8b98a1f">point_cloud_replicas</a>[strguid].end(); cIter++ )
<a name="l01219"></a>01219         {
<a name="l01220"></a>01220                 <span class="keywordtype">char</span> tmpstr[128];
<a name="l01221"></a>01221                 sprintf(tmpstr,<span class="stringliteral">&quot;%s,&quot;</span>,(*cIter)-&gt;pointcloud_id); <span class="comment">//return node-ids as strings </span>
<a name="l01222"></a>01222                 strcat(node_ids,tmpstr);
<a name="l01223"></a>01223                 sprintf(tmpstr,<span class="stringliteral">&quot;%s,&quot;</span>,(*cIter)-&gt;host); <span class="comment">//return hosts as comma-delimited strings </span>
<a name="l01224"></a>01224                 strcat(host,tmpstr);
<a name="l01225"></a>01225                 port[y] = (*cIter)-&gt;port;
<a name="l01226"></a>01226                 sprintf(tmpstr,<span class="stringliteral">&quot;%s,&quot;</span>,(*cIter)-&gt;file_url); <span class="comment">//return file_url as comma-delimited strings </span>
<a name="l01227"></a>01227                 strcat(file_url,tmpstr);
<a name="l01228"></a>01228                 size[y] = (*cIter)-&gt;size;
<a name="l01229"></a>01229                 RGB_flag[y] = (*cIter)-&gt;RGB_flag;
<a name="l01230"></a>01230                 bandwidth[y] = (*cIter)-&gt;bandwidth;
<a name="l01231"></a>01231                 y++;
<a name="l01232"></a>01232         }
<a name="l01233"></a>01233         <span class="comment">//printf(&quot;%s\n&quot;,node_ids);</span>
<a name="l01234"></a>01234         <span class="keywordflow">return</span> y;
<a name="l01235"></a>01235 }
<a name="l01236"></a>01236 
<a name="l01237"></a>01237 
<a name="l01238"></a>01238 <span class="preprocessor">#ifdef WIN32</span>
<a name="l01239"></a>01239 <span class="preprocessor"></span><a class="code" href="client_8h.html#acfdc053623a87a1a1d4adf03e6b6678d">CLIENT_LIB_EXPORT</a> <span class="keywordtype">bool</span> <a class="code" href="client_8cpp.html#a142b482930bea3a0a563337dc68540b2">getAvatarSpecificData</a>(<span class="keywordtype">char</span> strid[], <span class="keywordtype">char</span> avatar_id[], <span class="keywordtype">char</span> node_id[], <span class="keywordtype">float</span> *fa)
<a name="l01240"></a>01240 <span class="preprocessor">#else</span>
<a name="l01241"></a><a class="code" href="client_8h.html#a151dca9bc20d2134d865dc89778f4712">01241</a> <span class="preprocessor"></span><span class="keywordtype">bool</span> <a class="code" href="client_8cpp.html#a142b482930bea3a0a563337dc68540b2">getAvatarSpecificData</a>(<span class="keywordtype">char</span> strid[], <span class="keywordtype">char</span> avatar_id[], <span class="keywordtype">char</span> node_id[], <span class="keywordtype">float</span> *fa)
<a name="l01242"></a>01242 <span class="preprocessor">#endif</span>
<a name="l01243"></a>01243 <span class="preprocessor"></span>{
<a name="l01244"></a>01244         RakNetGUID strguid;
<a name="l01245"></a>01245         strguid.FromString(strid);
<a name="l01246"></a>01246         <span class="comment">//check to see if deleted</span>
<a name="l01247"></a>01247         DataStructures::Multilist&lt;ML_STACK, Replica3*&gt; replicaListOut;
<a name="l01248"></a>01248         replicaManager.GetReplicasCreatedByGuid(strguid,replicaListOut);
<a name="l01249"></a>01249         <span class="keywordflow">if</span> (replicaListOut.GetSize()==0) {
<a name="l01250"></a>01250                 <a class="code" href="_client_server_8h.html#a045310ed105e329426e31b89e065b05c">avatar_joint_replicas</a>.erase(strguid);
<a name="l01251"></a>01251                 <span class="keywordflow">return</span> 0;
<a name="l01252"></a>01252         }
<a name="l01253"></a>01253         <span class="keywordflow">for</span> ( std::vector&lt;BeamingAvatarJointReplica*&gt;::iterator cIter = <a class="code" href="_client_server_8h.html#a045310ed105e329426e31b89e065b05c">avatar_joint_replicas</a>[strguid].begin(); cIter!=<a class="code" href="_client_server_8h.html#a045310ed105e329426e31b89e065b05c">avatar_joint_replicas</a>[strguid].end(); cIter++ )
<a name="l01254"></a>01254         {
<a name="l01255"></a>01255                 <span class="keywordflow">if</span> (( strcmp((*cIter)-&gt;avatarjoint_id,node_id) == 0 ) &amp;&amp; ( strcmp((*cIter)-&gt;clientname,avatar_id) == 0 ))
<a name="l01256"></a>01256                 {
<a name="l01257"></a>01257                         fa[0] = (*cIter)-&gt;position.x;
<a name="l01258"></a>01258                         fa[1] = (*cIter)-&gt;position.y;
<a name="l01259"></a>01259                         fa[2] = (*cIter)-&gt;position.z;
<a name="l01260"></a>01260                         fa[3] = (*cIter)-&gt;orientation.x;
<a name="l01261"></a>01261                         fa[4] = (*cIter)-&gt;orientation.y;
<a name="l01262"></a>01262                         fa[5] = (*cIter)-&gt;orientation.z;
<a name="l01263"></a>01263                         fa[6] = (*cIter)-&gt;orientation.w;
<a name="l01264"></a>01264                         <span class="keywordflow">break</span>;
<a name="l01265"></a>01265                 }
<a name="l01266"></a>01266         }
<a name="l01267"></a>01267         <span class="keywordflow">return</span> 1;
<a name="l01268"></a>01268 }
<a name="l01269"></a>01269 
<a name="l01270"></a>01270 
<a name="l01271"></a>01271 <span class="comment">//NOTE: I haven&#39;t tested this function visually to ensure it works as expected.</span>
<a name="l01272"></a>01272 <span class="preprocessor">#ifdef WIN32</span>
<a name="l01273"></a>01273 <span class="preprocessor"></span><a class="code" href="client_8h.html#acfdc053623a87a1a1d4adf03e6b6678d">CLIENT_LIB_EXPORT</a> <span class="keywordtype">bool</span> <a class="code" href="client_8cpp.html#aa75716d1aa3eca8cc53312d98d32073b">getAvatarSpecificGlobalData</a>(<span class="keywordtype">char</span> strid[], <span class="keywordtype">char</span> avatar_id[], <span class="keywordtype">char</span> node_id[], <span class="keywordtype">float</span> *fa)
<a name="l01274"></a>01274 <span class="preprocessor">#else</span>
<a name="l01275"></a><a class="code" href="client_8h.html#a93922e418abef075d75bcd38d856b79b">01275</a> <span class="preprocessor"></span><span class="keywordtype">bool</span> <a class="code" href="client_8cpp.html#aa75716d1aa3eca8cc53312d98d32073b">getAvatarSpecificGlobalData</a>(<span class="keywordtype">char</span> strid[], <span class="keywordtype">char</span> avatar_id[], <span class="keywordtype">char</span> node_id[], <span class="keywordtype">float</span> *fa)
<a name="l01276"></a>01276 <span class="preprocessor">#endif</span>
<a name="l01277"></a>01277 <span class="preprocessor"></span>{
<a name="l01278"></a>01278         std::map&lt;std::string, std::vector&lt;float&gt; &gt; global_vars;
<a name="l01279"></a>01279         std::map&lt;std::string, std::string &gt; parent;
<a name="l01280"></a>01280         std::list&lt;std::string&gt; parents;
<a name="l01281"></a>01281         RakNetGUID strguid;
<a name="l01282"></a>01282         strguid.FromString(strid);
<a name="l01283"></a>01283         <span class="comment">//check to see if deleted</span>
<a name="l01284"></a>01284         DataStructures::Multilist&lt;ML_STACK, Replica3*&gt; replicaListOut;
<a name="l01285"></a>01285         replicaManager.GetReplicasCreatedByGuid(strguid,replicaListOut);
<a name="l01286"></a>01286         <span class="keywordflow">if</span> (replicaListOut.GetSize()==0) {
<a name="l01287"></a>01287                 <a class="code" href="_client_server_8h.html#a045310ed105e329426e31b89e065b05c">avatar_joint_replicas</a>.erase(strguid);
<a name="l01288"></a>01288                 <span class="keywordflow">return</span> 0;
<a name="l01289"></a>01289         }
<a name="l01290"></a>01290         <span class="keywordflow">for</span> ( std::vector&lt;BeamingAvatarJointReplica*&gt;::iterator cIter = <a class="code" href="_client_server_8h.html#a045310ed105e329426e31b89e065b05c">avatar_joint_replicas</a>[strguid].begin(); cIter!=<a class="code" href="_client_server_8h.html#a045310ed105e329426e31b89e065b05c">avatar_joint_replicas</a>[strguid].end(); cIter++ )
<a name="l01291"></a>01291         {
<a name="l01292"></a>01292                 global_vars[(*cIter)-&gt;avatarjoint_id].push_back((*cIter)-&gt;position.x);
<a name="l01293"></a>01293                 global_vars[(*cIter)-&gt;avatarjoint_id].push_back((*cIter)-&gt;position.y);
<a name="l01294"></a>01294                 global_vars[(*cIter)-&gt;avatarjoint_id].push_back((*cIter)-&gt;position.z);
<a name="l01295"></a>01295                 global_vars[(*cIter)-&gt;avatarjoint_id].push_back((*cIter)-&gt;orientation.x);
<a name="l01296"></a>01296                 global_vars[(*cIter)-&gt;avatarjoint_id].push_back((*cIter)-&gt;orientation.y);
<a name="l01297"></a>01297                 global_vars[(*cIter)-&gt;avatarjoint_id].push_back((*cIter)-&gt;orientation.z);
<a name="l01298"></a>01298                 global_vars[(*cIter)-&gt;avatarjoint_id].push_back((*cIter)-&gt;orientation.w);
<a name="l01299"></a>01299                 parent[(*cIter)-&gt;avatarjoint_id] = (*cIter)-&gt;parentbone;
<a name="l01300"></a>01300                 <span class="comment">//printf(&quot;%s,%s\n&quot;,(*cIter)-&gt;avatarjoint_id,(*cIter)-&gt;parentbone.c_str());</span>
<a name="l01301"></a>01301                 <span class="keywordflow">if</span> (( strcmp((*cIter)-&gt;avatarjoint_id,node_id) == 0 ) &amp;&amp; ( strcmp((*cIter)-&gt;clientname,avatar_id) == 0 ))
<a name="l01302"></a>01302                 {
<a name="l01303"></a>01303                         <span class="comment">//printf(&quot;%s&quot;,(*cIter)-&gt;avatarjoint_id);</span>
<a name="l01304"></a>01304                         parents.push_front((*cIter)-&gt;avatarjoint_id);
<a name="l01305"></a>01305                         std::string avatarbone = (*cIter)-&gt;parentbone;
<a name="l01306"></a>01306                         <span class="keywordflow">while</span>(!avatarbone.empty())
<a name="l01307"></a>01307                         {
<a name="l01308"></a>01308                                 <span class="comment">//printf(&quot;\t%s&quot;,avatarbone.c_str());</span>
<a name="l01309"></a>01309                                 parents.push_front(avatarbone);
<a name="l01310"></a>01310                                 avatarbone = parent[avatarbone];
<a name="l01311"></a>01311                         }
<a name="l01312"></a>01312                         <span class="comment">//printf(&quot;\n&quot;);</span>
<a name="l01313"></a>01313                         <span class="keywordflow">break</span>;
<a name="l01314"></a>01314                 }
<a name="l01315"></a>01315         }
<a name="l01316"></a>01316         <a class="code" href="class_c_vec3.html">CVec3</a> pos = <a class="code" href="class_c_vec3.html">CVec3</a>();
<a name="l01317"></a>01317         <a class="code" href="class_c_quat.html" title="math helper class for quaternions">CQuat</a> rot = <a class="code" href="class_c_quat.html" title="math helper class for quaternions">CQuat</a>();
<a name="l01318"></a>01318         <span class="keywordflow">for</span> (std::list&lt;std::string&gt;::iterator it=parents.begin(); it!=parents.end(); ++it)
<a name="l01319"></a>01319         {
<a name="l01320"></a>01320                 pos = pos + <a class="code" href="class_c_vec3.html">CVec3</a>(global_vars[*it][0],global_vars[*it][1],global_vars[*it][2]);
<a name="l01321"></a>01321                 rot = rot * <a class="code" href="class_c_quat.html" title="math helper class for quaternions">CQuat</a>(global_vars[*it][3],global_vars[*it][4],global_vars[*it][5],global_vars[*it][6]);
<a name="l01322"></a>01322         }
<a name="l01323"></a>01323         fa[0] = pos.<a class="code" href="class_c_vec3.html#a1c0e3996191bae6f0dcbf9d83a2e6227">x</a>;
<a name="l01324"></a>01324         fa[1] = pos.<a class="code" href="class_c_vec3.html#a85db4620953c8fa7332b5727c4b0da92">y</a>;
<a name="l01325"></a>01325         fa[2] = pos.<a class="code" href="class_c_vec3.html#a3e475b99964e1888dbaf4e834556f24c">z</a>;
<a name="l01326"></a>01326         fa[3] = rot.<a class="code" href="class_c_quat.html#aebcbc6890d3ecebfcbcb0bdc08a6f9e9">x</a>;
<a name="l01327"></a>01327         fa[4] = rot.<a class="code" href="class_c_quat.html#a22cd9ef388782b02552f2de77ba8ea51">y</a>;
<a name="l01328"></a>01328         fa[5] = rot.<a class="code" href="class_c_quat.html#aaf17f567347789a7a50a31638b755e4d">z</a>;
<a name="l01329"></a>01329         fa[6] = rot.<a class="code" href="class_c_quat.html#a58e4f7e62b3c122a8afe3d39205dff6d">w</a>;
<a name="l01330"></a>01330         <span class="keywordflow">return</span> 1;
<a name="l01331"></a>01331 }
<a name="l01332"></a>01332 
<a name="l01333"></a>01333 
<a name="l01334"></a>01334 <span class="preprocessor">#ifdef WIN32</span>
<a name="l01335"></a>01335 <span class="preprocessor"></span><a class="code" href="client_8h.html#acfdc053623a87a1a1d4adf03e6b6678d">CLIENT_LIB_EXPORT</a> <span class="keywordtype">bool</span> <a class="code" href="client_8cpp.html#a08d06d96598de9fd6b42138236930650" title="Returns FACIAL data of specified nodes for the specified client peer.">getFacialSpecificData</a>(<span class="keywordtype">char</span> strid[], <span class="keywordtype">char</span> node_id[], <span class="keywordtype">bool</span> *blink, <span class="keywordtype">float</span> *smile, <span class="keywordtype">float</span> *frown, <span class="keywordtype">float</span> *o, <span class="keywordtype">float</span> *e, <span class="keywordtype">float</span> *p)
<a name="l01336"></a>01336 <span class="preprocessor">#else</span>
<a name="l01337"></a><a class="code" href="client_8h.html#a4610c9ee5f45067a650835d1941b66d7">01337</a> <span class="preprocessor"></span><span class="keywordtype">bool</span> <a class="code" href="client_8cpp.html#a08d06d96598de9fd6b42138236930650" title="Returns FACIAL data of specified nodes for the specified client peer.">getFacialSpecificData</a>(<span class="keywordtype">char</span> strid[], <span class="keywordtype">char</span> node_id[], <span class="keywordtype">bool</span> *blink, <span class="keywordtype">float</span> *smile, <span class="keywordtype">float</span> *frown, <span class="keywordtype">float</span> *o, <span class="keywordtype">float</span> *e, <span class="keywordtype">float</span> *p)
<a name="l01338"></a>01338 <span class="preprocessor">#endif</span>
<a name="l01339"></a>01339 <span class="preprocessor"></span>{
<a name="l01340"></a>01340         <span class="keywordtype">int</span> y = 0;
<a name="l01341"></a>01341         RakNetGUID strguid;
<a name="l01342"></a>01342         strguid.FromString(strid);
<a name="l01343"></a>01343         <span class="comment">//check to see if deleted</span>
<a name="l01344"></a>01344         DataStructures::Multilist&lt;ML_STACK, Replica3*&gt; replicaListOut;
<a name="l01345"></a>01345         replicaManager.GetReplicasCreatedByGuid(strguid,replicaListOut);
<a name="l01346"></a>01346         <span class="keywordflow">if</span> (replicaListOut.GetSize()==0) {
<a name="l01347"></a>01347                 <a class="code" href="_client_server_8h.html#a3ebf39ed2989b10581f8f5ef1b977b38">facial_replicas</a>.erase(strguid);
<a name="l01348"></a>01348                 <span class="keywordflow">return</span> 0;
<a name="l01349"></a>01349         }
<a name="l01350"></a>01350         <span class="keywordflow">for</span> ( std::vector&lt;BeamingFacialReplica*&gt;::iterator cIter = <a class="code" href="_client_server_8h.html#a3ebf39ed2989b10581f8f5ef1b977b38">facial_replicas</a>[strguid].begin(); cIter!=<a class="code" href="_client_server_8h.html#a3ebf39ed2989b10581f8f5ef1b977b38">facial_replicas</a>[strguid].end(); cIter++ )
<a name="l01351"></a>01351         {
<a name="l01352"></a>01352                 <span class="keywordflow">if</span> ( strcmp((*cIter)-&gt;facial_id,node_id) == 0 )
<a name="l01353"></a>01353                 {
<a name="l01354"></a>01354                         *blink = (*cIter)-&gt;blink;
<a name="l01355"></a>01355                         *smile = (*cIter)-&gt;smile;
<a name="l01356"></a>01356                         *frown = (*cIter)-&gt;frown;
<a name="l01357"></a>01357                         *o = (*cIter)-&gt;o;
<a name="l01358"></a>01358                         *e = (*cIter)-&gt;e;
<a name="l01359"></a>01359                         *p = (*cIter)-&gt;p;
<a name="l01360"></a>01360                         <span class="keywordflow">break</span>;
<a name="l01361"></a>01361                 }
<a name="l01362"></a>01362         }
<a name="l01363"></a>01363         <span class="keywordflow">return</span> 1;
<a name="l01364"></a>01364 }
<a name="l01365"></a>01365 
<a name="l01366"></a>01366 
<a name="l01367"></a>01367 <span class="preprocessor">#ifdef WIN32</span>
<a name="l01368"></a>01368 <span class="preprocessor"></span><a class="code" href="client_8h.html#acfdc053623a87a1a1d4adf03e6b6678d">CLIENT_LIB_EXPORT</a> <span class="keywordtype">bool</span> <a class="code" href="client_8cpp.html#a5b011c647da354d974bb1a2483dfbd72" title="Returns EMOTION data of specified nodes for the specified client peer.">getEmotionSpecificData</a>(<span class="keywordtype">char</span> strid[], <span class="keywordtype">char</span> node_id[], <span class="keywordtype">double</span> *valence, <span class="keywordtype">double</span> *arousal, <span class="keywordtype">double</span> *misc)
<a name="l01369"></a>01369 <span class="preprocessor">#else</span>
<a name="l01370"></a><a class="code" href="client_8h.html#a9918936d9b829ab6a6c1a92cd37514be">01370</a> <span class="preprocessor"></span><span class="keywordtype">bool</span> <a class="code" href="client_8cpp.html#a5b011c647da354d974bb1a2483dfbd72" title="Returns EMOTION data of specified nodes for the specified client peer.">getEmotionSpecificData</a>(<span class="keywordtype">char</span> strid[], <span class="keywordtype">char</span> node_id[], <span class="keywordtype">double</span> *valence, <span class="keywordtype">double</span> *arousal, <span class="keywordtype">double</span> *misc)
<a name="l01371"></a>01371 <span class="preprocessor">#endif</span>
<a name="l01372"></a>01372 <span class="preprocessor"></span>{
<a name="l01373"></a>01373         RakNetGUID strguid;
<a name="l01374"></a>01374         strguid.FromString(strid);
<a name="l01375"></a>01375         <span class="comment">//check to see if deleted</span>
<a name="l01376"></a>01376         DataStructures::Multilist&lt;ML_STACK, Replica3*&gt; replicaListOut;
<a name="l01377"></a>01377         replicaManager.GetReplicasCreatedByGuid(strguid,replicaListOut);
<a name="l01378"></a>01378         <span class="keywordflow">if</span> (replicaListOut.GetSize()==0) {
<a name="l01379"></a>01379                 <a class="code" href="_client_server_8h.html#a09e5b19ea35b0333e0b25fbe166acdfc">emotion_replicas</a>.erase(strguid);
<a name="l01380"></a>01380                 <span class="keywordflow">return</span> 0;
<a name="l01381"></a>01381         }
<a name="l01382"></a>01382         <span class="keywordflow">for</span> ( std::vector&lt;BeamingEmotionReplica*&gt;::iterator cIter = <a class="code" href="_client_server_8h.html#a09e5b19ea35b0333e0b25fbe166acdfc">emotion_replicas</a>[strguid].begin(); cIter!=<a class="code" href="_client_server_8h.html#a09e5b19ea35b0333e0b25fbe166acdfc">emotion_replicas</a>[strguid].end(); cIter++ )
<a name="l01383"></a>01383         {
<a name="l01384"></a>01384                 <span class="keywordflow">if</span> ( strcmp((*cIter)-&gt;emotion_id,node_id) == 0 )
<a name="l01385"></a>01385                 {
<a name="l01386"></a>01386                         *valence = (*cIter)-&gt;valence;
<a name="l01387"></a>01387                         *arousal = (*cIter)-&gt;arousal;
<a name="l01388"></a>01388                         *misc = (*cIter)-&gt;misc;
<a name="l01389"></a>01389                         <span class="keywordflow">break</span>;
<a name="l01390"></a>01390                 }
<a name="l01391"></a>01391         }
<a name="l01392"></a>01392         <span class="keywordflow">return</span> 1;
<a name="l01393"></a>01393 }
<a name="l01394"></a>01394 
<a name="l01395"></a>01395 <span class="preprocessor">#ifdef WIN32</span>
<a name="l01396"></a>01396 <span class="preprocessor"></span><a class="code" href="client_8h.html#acfdc053623a87a1a1d4adf03e6b6678d">CLIENT_LIB_EXPORT</a> <span class="keywordtype">bool</span> <a class="code" href="client_8cpp.html#a29a1f7ebff544b9711251ee3001b8214" title="Returns TACTILE data of specified nodes for the specified client peer.">getTactileSpecificData</a>(<span class="keywordtype">char</span> strid[], <span class="keywordtype">char</span> node_id[], <span class="keywordtype">double</span> *duration, <span class="keywordtype">float</span> *intensity, <span class="keywordtype">float</span> *temperature)
<a name="l01397"></a>01397 <span class="preprocessor">#else</span>
<a name="l01398"></a><a class="code" href="client_8h.html#af3b241625e525928f9da506b68ab67d1">01398</a> <span class="preprocessor"></span><span class="keywordtype">bool</span> <a class="code" href="client_8cpp.html#a29a1f7ebff544b9711251ee3001b8214" title="Returns TACTILE data of specified nodes for the specified client peer.">getTactileSpecificData</a>(<span class="keywordtype">char</span> strid[], <span class="keywordtype">char</span> node_id[], <span class="keywordtype">double</span> *duration, <span class="keywordtype">float</span> *intensity, <span class="keywordtype">float</span> *temperature)
<a name="l01399"></a>01399 <span class="preprocessor">#endif</span>
<a name="l01400"></a>01400 <span class="preprocessor"></span>{
<a name="l01401"></a>01401         RakNetGUID strguid;
<a name="l01402"></a>01402         strguid.FromString(strid);
<a name="l01403"></a>01403         <span class="comment">//check to see if deleted</span>
<a name="l01404"></a>01404         DataStructures::Multilist&lt;ML_STACK, Replica3*&gt; replicaListOut;
<a name="l01405"></a>01405         replicaManager.GetReplicasCreatedByGuid(strguid,replicaListOut);
<a name="l01406"></a>01406         <span class="keywordflow">if</span> (replicaListOut.GetSize()==0) {
<a name="l01407"></a>01407                 <a class="code" href="_client_server_8h.html#a6822ba84ee75da64dc977e6bc3646328">tactile_replicas</a>.erase(strguid);
<a name="l01408"></a>01408                 <span class="keywordflow">return</span> 0;
<a name="l01409"></a>01409         }
<a name="l01410"></a>01410         <span class="keywordflow">for</span> ( std::vector&lt;BeamingTactileReplica*&gt;::iterator cIter = <a class="code" href="_client_server_8h.html#a6822ba84ee75da64dc977e6bc3646328">tactile_replicas</a>[strguid].begin(); cIter!=<a class="code" href="_client_server_8h.html#a6822ba84ee75da64dc977e6bc3646328">tactile_replicas</a>[strguid].end(); cIter++ )
<a name="l01411"></a>01411         {
<a name="l01412"></a>01412                 <span class="keywordflow">if</span> ( strcmp((*cIter)-&gt;tactile_id,node_id) == 0 )
<a name="l01413"></a>01413                 {
<a name="l01414"></a>01414                         *duration = (*cIter)-&gt;duration;
<a name="l01415"></a>01415                         *intensity = (*cIter)-&gt;intensity;
<a name="l01416"></a>01416                         *temperature = (*cIter)-&gt;temperature;
<a name="l01417"></a>01417                         <span class="keywordflow">break</span>;
<a name="l01418"></a>01418                 }
<a name="l01419"></a>01419         }
<a name="l01420"></a>01420         <span class="keywordflow">return</span> 1;
<a name="l01421"></a>01421 }
<a name="l01422"></a>01422 
<a name="l01423"></a>01423 
<a name="l01424"></a>01424 <span class="preprocessor">#ifdef WIN32</span>
<a name="l01425"></a>01425 <span class="preprocessor"></span><a class="code" href="client_8h.html#acfdc053623a87a1a1d4adf03e6b6678d">CLIENT_LIB_EXPORT</a> <span class="keywordtype">bool</span> <a class="code" href="client_8cpp.html#aaf4956613ced6ac10072fbdb059eee4b" title="Returns ROBOT data of specified nodes for the specified client peer.">getRobotSpecificData</a>(<span class="keywordtype">char</span> strid[], <span class="keywordtype">char</span> node_id[], <span class="keywordtype">int</span> *type, <span class="keywordtype">int</span> *details, <span class="keywordtype">float</span> *freespace, <span class="keywordtype">float</span> *fa, <span class="keywordtype">float</span> *time_remain, <span class="keywordtype">int</span> *contact_type)
<a name="l01426"></a>01426 <span class="preprocessor">#else</span>
<a name="l01427"></a><a class="code" href="client_8h.html#a1be75bb2d7d03f780be343f98adb8e65">01427</a> <span class="preprocessor"></span><span class="keywordtype">bool</span> <a class="code" href="client_8cpp.html#aaf4956613ced6ac10072fbdb059eee4b" title="Returns ROBOT data of specified nodes for the specified client peer.">getRobotSpecificData</a>(<span class="keywordtype">char</span> strid[], <span class="keywordtype">char</span> node_id[], <span class="keywordtype">int</span> *type, <span class="keywordtype">int</span> *details, <span class="keywordtype">float</span> *freespace, <span class="keywordtype">float</span> *fa, <span class="keywordtype">float</span> *time_remain, <span class="keywordtype">int</span> *contact_type)
<a name="l01428"></a>01428 <span class="preprocessor">#endif</span>
<a name="l01429"></a>01429 <span class="preprocessor"></span>{
<a name="l01430"></a>01430         <span class="comment">//printf(&quot;fetching %s &quot;,strid);</span>
<a name="l01431"></a>01431         <span class="keywordtype">int</span> x = 0, y = 0;
<a name="l01432"></a>01432         RakNetGUID strguid;
<a name="l01433"></a>01433         strguid.FromString(strid);
<a name="l01434"></a>01434         <span class="comment">//check to see if deleted</span>
<a name="l01435"></a>01435         DataStructures::Multilist&lt;ML_STACK, Replica3*&gt; replicaListOut;
<a name="l01436"></a>01436         replicaManager.GetReplicasCreatedByGuid(strguid,replicaListOut);
<a name="l01437"></a>01437         <span class="keywordflow">if</span> (replicaListOut.GetSize()==0) {
<a name="l01438"></a>01438                 <a class="code" href="_client_server_8h.html#a8f02b9433307fc8567cc587ed4be14bd">robot_replicas</a>.erase(strguid);
<a name="l01439"></a>01439                 <span class="keywordflow">return</span> 0;
<a name="l01440"></a>01440         }
<a name="l01441"></a>01441         <span class="keywordflow">for</span> ( std::vector&lt;BeamingRobotReplica*&gt;::iterator cIter = <a class="code" href="_client_server_8h.html#a8f02b9433307fc8567cc587ed4be14bd">robot_replicas</a>[strguid].begin(); cIter!=<a class="code" href="_client_server_8h.html#a8f02b9433307fc8567cc587ed4be14bd">robot_replicas</a>[strguid].end(); cIter++ )
<a name="l01442"></a>01442         {
<a name="l01443"></a>01443                 <span class="keywordflow">if</span> ( strcmp((*cIter)-&gt;robot_id,node_id) == 0 )
<a name="l01444"></a>01444                 {
<a name="l01445"></a>01445                         *type = (*cIter)-&gt;type;
<a name="l01446"></a>01446                         *details = (*cIter)-&gt;details;
<a name="l01447"></a>01447                         *freespace = (*cIter)-&gt;freespace;
<a name="l01448"></a>01448                         fa[0] = (*cIter)-&gt;position.x;
<a name="l01449"></a>01449                         fa[1] = (*cIter)-&gt;position.y;
<a name="l01450"></a>01450                         fa[2] = (*cIter)-&gt;position.z;
<a name="l01451"></a>01451                         fa[3] = (*cIter)-&gt;orientation.x;
<a name="l01452"></a>01452                         fa[4] = (*cIter)-&gt;orientation.y;
<a name="l01453"></a>01453                         fa[5] = (*cIter)-&gt;orientation.z;
<a name="l01454"></a>01454                         fa[6] = (*cIter)-&gt;orientation.w;
<a name="l01455"></a>01455                         *time_remain = (*cIter)-&gt;time_remain;
<a name="l01456"></a>01456                         *contact_type = (*cIter)-&gt;contact_type;
<a name="l01457"></a>01457                         <span class="keywordflow">break</span>;
<a name="l01458"></a>01458                 }
<a name="l01459"></a>01459         }
<a name="l01460"></a>01460         <span class="keywordflow">return</span> 1;
<a name="l01461"></a>01461 }
<a name="l01462"></a>01462 
<a name="l01463"></a>01463 
<a name="l01464"></a>01464 <span class="preprocessor">#ifdef WIN32</span>
<a name="l01465"></a>01465 <span class="preprocessor"></span><a class="code" href="client_8h.html#acfdc053623a87a1a1d4adf03e6b6678d">CLIENT_LIB_EXPORT</a> <span class="keywordtype">bool</span> <a class="code" href="client_8cpp.html#a61d75681c622566e35afc151dff69bf8" title="Returns AUDIO data of specified nodes for the specified client peer.">getAudioSpecificData</a>(<span class="keywordtype">char</span> strid[], <span class="keywordtype">char</span> node_id[], <span class="keywordtype">char</span> *host, <span class="keywordtype">int</span> *port, <span class="keywordtype">char</span> *file_url, <span class="keywordtype">char</span> *config)
<a name="l01466"></a>01466 <span class="preprocessor">#else</span>
<a name="l01467"></a><a class="code" href="client_8h.html#adbfd3d5e2f77cc7f239d522f52767964">01467</a> <span class="preprocessor"></span><span class="keywordtype">bool</span> <a class="code" href="client_8cpp.html#a61d75681c622566e35afc151dff69bf8" title="Returns AUDIO data of specified nodes for the specified client peer.">getAudioSpecificData</a>(<span class="keywordtype">char</span> strid[], <span class="keywordtype">char</span> node_id[], <span class="keywordtype">char</span> *host, <span class="keywordtype">int</span> *port, <span class="keywordtype">char</span> *file_url, <span class="keywordtype">char</span> *config)
<a name="l01468"></a>01468 <span class="preprocessor">#endif</span>
<a name="l01469"></a>01469 <span class="preprocessor"></span>{
<a name="l01470"></a>01470         RakNetGUID strguid;
<a name="l01471"></a>01471         strguid.FromString(strid);
<a name="l01472"></a>01472         <span class="comment">//check to see if deleted</span>
<a name="l01473"></a>01473         DataStructures::Multilist&lt;ML_STACK, Replica3*&gt; replicaListOut;
<a name="l01474"></a>01474         replicaManager.GetReplicasCreatedByGuid(strguid,replicaListOut);
<a name="l01475"></a>01475         <span class="keywordflow">if</span> (replicaListOut.GetSize()==0) {
<a name="l01476"></a>01476                 <a class="code" href="_client_server_8h.html#a40bd55104716ac13ddbfe90bf63f60da">audio_replicas</a>.erase(strguid);
<a name="l01477"></a>01477                 <span class="keywordflow">return</span> 0;
<a name="l01478"></a>01478         }
<a name="l01479"></a>01479         <span class="keywordflow">for</span> ( std::vector&lt;BeamingAudioReplica*&gt;::iterator cIter = <a class="code" href="_client_server_8h.html#a40bd55104716ac13ddbfe90bf63f60da">audio_replicas</a>[strguid].begin(); cIter!=<a class="code" href="_client_server_8h.html#a40bd55104716ac13ddbfe90bf63f60da">audio_replicas</a>[strguid].end(); cIter++ )
<a name="l01480"></a>01480         {
<a name="l01481"></a>01481                 <span class="keywordflow">if</span> ( strcmp((*cIter)-&gt;audio_id,node_id) == 0 )
<a name="l01482"></a>01482                 {
<a name="l01483"></a>01483                         strcpy(host,(*cIter)-&gt;host);
<a name="l01484"></a>01484                         *port = (*cIter)-&gt;port;
<a name="l01485"></a>01485                         strcpy(file_url,(*cIter)-&gt;file_url);
<a name="l01486"></a>01486                         strcpy(config,(*cIter)-&gt;config);
<a name="l01487"></a>01487                         <span class="keywordflow">break</span>;
<a name="l01488"></a>01488                 }
<a name="l01489"></a>01489         }
<a name="l01490"></a>01490         <span class="keywordflow">return</span> 1;
<a name="l01491"></a>01491 }
<a name="l01492"></a>01492 
<a name="l01493"></a>01493 
<a name="l01494"></a>01494 <span class="preprocessor">#ifdef WIN32</span>
<a name="l01495"></a>01495 <span class="preprocessor"></span><a class="code" href="client_8h.html#acfdc053623a87a1a1d4adf03e6b6678d">CLIENT_LIB_EXPORT</a> <span class="keywordtype">bool</span> <a class="code" href="client_8cpp.html#af244bc3997792c3f6510f0d150da67e5" title="Returns VIDEO data of specified nodes for the specified client peer.">getVideoSpecificData</a>(<span class="keywordtype">char</span> strid[], <span class="keywordtype">char</span> node_id[], <span class="keywordtype">char</span> *host, <span class="keywordtype">int</span> *port, <span class="keywordtype">char</span> *file_url, <span class="keywordtype">int</span> *frame_width, <span class="keywordtype">int</span> *frame_height, <span class="keywordtype">double</span> *bandwidth)
<a name="l01496"></a>01496 <span class="preprocessor">#else</span>
<a name="l01497"></a><a class="code" href="client_8h.html#a04e8ed2592b1187eb63821b01fbd6405">01497</a> <span class="preprocessor"></span><span class="keywordtype">bool</span> <a class="code" href="client_8cpp.html#af244bc3997792c3f6510f0d150da67e5" title="Returns VIDEO data of specified nodes for the specified client peer.">getVideoSpecificData</a>(<span class="keywordtype">char</span> strid[], <span class="keywordtype">char</span> node_id[], <span class="keywordtype">char</span> *host, <span class="keywordtype">int</span> *port, <span class="keywordtype">char</span> *file_url, <span class="keywordtype">int</span> *frame_width, <span class="keywordtype">int</span> *frame_height, <span class="keywordtype">double</span> *bandwidth)
<a name="l01498"></a>01498 <span class="preprocessor">#endif</span>
<a name="l01499"></a>01499 <span class="preprocessor"></span>{
<a name="l01500"></a>01500         RakNetGUID strguid;
<a name="l01501"></a>01501         strguid.FromString(strid);
<a name="l01502"></a>01502         <span class="comment">//check to see if deleted</span>
<a name="l01503"></a>01503         DataStructures::Multilist&lt;ML_STACK, Replica3*&gt; replicaListOut;
<a name="l01504"></a>01504         replicaManager.GetReplicasCreatedByGuid(strguid,replicaListOut);
<a name="l01505"></a>01505         <span class="keywordflow">if</span> (replicaListOut.GetSize()==0) {
<a name="l01506"></a>01506                 <a class="code" href="_client_server_8h.html#a0b1a936c33cf846d256dd0a4f8cab0de">video_replicas</a>.erase(strguid);
<a name="l01507"></a>01507                 <span class="keywordflow">return</span> 0;
<a name="l01508"></a>01508         }
<a name="l01509"></a>01509         <span class="keywordflow">for</span> ( std::vector&lt;BeamingVideoReplica*&gt;::iterator cIter = <a class="code" href="_client_server_8h.html#a0b1a936c33cf846d256dd0a4f8cab0de">video_replicas</a>[strguid].begin(); cIter!=<a class="code" href="_client_server_8h.html#a0b1a936c33cf846d256dd0a4f8cab0de">video_replicas</a>[strguid].end(); cIter++ )
<a name="l01510"></a>01510         {
<a name="l01511"></a>01511                 <span class="keywordflow">if</span> ( strcmp((*cIter)-&gt;video_id,node_id) == 0 )
<a name="l01512"></a>01512                 {
<a name="l01513"></a>01513                         strcpy(host,(*cIter)-&gt;host);
<a name="l01514"></a>01514                         *port = (*cIter)-&gt;port;
<a name="l01515"></a>01515                         strcpy(file_url,(*cIter)-&gt;file_url);
<a name="l01516"></a>01516                         *frame_width = (*cIter)-&gt;frame_width;
<a name="l01517"></a>01517                         *frame_height = (*cIter)-&gt;frame_height;
<a name="l01518"></a>01518                         *bandwidth = (*cIter)-&gt;bandwidth;
<a name="l01519"></a>01519                         <span class="keywordflow">break</span>;
<a name="l01520"></a>01520                 }
<a name="l01521"></a>01521         }
<a name="l01522"></a>01522         <span class="keywordflow">return</span> 1;
<a name="l01523"></a>01523 }
<a name="l01524"></a>01524 
<a name="l01525"></a>01525 
<a name="l01526"></a>01526 <span class="preprocessor">#ifdef WIN32</span>
<a name="l01527"></a>01527 <span class="preprocessor"></span><a class="code" href="client_8h.html#acfdc053623a87a1a1d4adf03e6b6678d">CLIENT_LIB_EXPORT</a> <span class="keywordtype">bool</span> <a class="code" href="client_8cpp.html#a4987aa48f34d057da7c0f24586dd0404" title="Returns OBJECT data of specified nodes for the specified client peer.">getObjectSpecificData</a>(<span class="keywordtype">char</span> strid[], <span class="keywordtype">char</span> node_id[], <span class="keywordtype">char</span> *host, <span class="keywordtype">int</span> *port, <span class="keywordtype">char</span> *file_url, <span class="keywordtype">float</span> *fa)
<a name="l01528"></a>01528 <span class="preprocessor">#else</span>
<a name="l01529"></a><a class="code" href="client_8h.html#a6f1a65c18a7b6302cea71f4bfb8748b4">01529</a> <span class="preprocessor"></span><span class="keywordtype">bool</span> <a class="code" href="client_8cpp.html#a4987aa48f34d057da7c0f24586dd0404" title="Returns OBJECT data of specified nodes for the specified client peer.">getObjectSpecificData</a>(<span class="keywordtype">char</span> strid[], <span class="keywordtype">char</span> node_id[], <span class="keywordtype">char</span> *host, <span class="keywordtype">int</span> *port, <span class="keywordtype">char</span> *file_url, <span class="keywordtype">float</span> *fa)
<a name="l01530"></a>01530 <span class="preprocessor">#endif</span>
<a name="l01531"></a>01531 <span class="preprocessor"></span>{
<a name="l01532"></a>01532         RakNetGUID strguid;
<a name="l01533"></a>01533         strguid.FromString(strid);
<a name="l01534"></a>01534         <span class="comment">//check to see if deleted</span>
<a name="l01535"></a>01535         DataStructures::Multilist&lt;ML_STACK, Replica3*&gt; replicaListOut;
<a name="l01536"></a>01536         replicaManager.GetReplicasCreatedByGuid(strguid,replicaListOut);
<a name="l01537"></a>01537         <span class="keywordflow">if</span> (replicaListOut.GetSize()==0) {
<a name="l01538"></a>01538                 <a class="code" href="_client_server_8h.html#aaac52d5fa5b61e29925ed124fe03d35d">object_replicas</a>.erase(strguid);
<a name="l01539"></a>01539                 <span class="keywordflow">return</span> 0;
<a name="l01540"></a>01540         }
<a name="l01541"></a>01541         <span class="keywordflow">for</span> ( std::vector&lt;BeamingObjectReplica*&gt;::iterator cIter = <a class="code" href="_client_server_8h.html#aaac52d5fa5b61e29925ed124fe03d35d">object_replicas</a>[strguid].begin(); cIter!=<a class="code" href="_client_server_8h.html#aaac52d5fa5b61e29925ed124fe03d35d">object_replicas</a>[strguid].end(); cIter++ )
<a name="l01542"></a>01542         {
<a name="l01543"></a>01543                 <span class="keywordflow">if</span> ( strcmp((*cIter)-&gt;object_id,node_id) == 0 )
<a name="l01544"></a>01544                 {
<a name="l01545"></a>01545                         strcpy(host,(*cIter)-&gt;host);
<a name="l01546"></a>01546                         *port = (*cIter)-&gt;port;
<a name="l01547"></a>01547                         strcpy(file_url,(*cIter)-&gt;file_url);
<a name="l01548"></a>01548                         fa[0] = (*cIter)-&gt;position.x;
<a name="l01549"></a>01549                         fa[1] = (*cIter)-&gt;position.y;
<a name="l01550"></a>01550                         fa[2] = (*cIter)-&gt;position.z;
<a name="l01551"></a>01551                         fa[3] = (*cIter)-&gt;orientation.x;
<a name="l01552"></a>01552                         fa[4] = (*cIter)-&gt;orientation.y;
<a name="l01553"></a>01553                         fa[5] = (*cIter)-&gt;orientation.z;
<a name="l01554"></a>01554                         fa[6] = (*cIter)-&gt;orientation.w;
<a name="l01555"></a>01555                         <span class="keywordflow">break</span>;
<a name="l01556"></a>01556                 }
<a name="l01557"></a>01557         }
<a name="l01558"></a>01558         <span class="keywordflow">return</span> 1;
<a name="l01559"></a>01559 }
<a name="l01560"></a>01560 
<a name="l01561"></a>01561 
<a name="l01562"></a>01562 <span class="preprocessor">#ifdef WIN32</span>
<a name="l01563"></a>01563 <span class="preprocessor"></span><a class="code" href="client_8h.html#acfdc053623a87a1a1d4adf03e6b6678d">CLIENT_LIB_EXPORT</a> <span class="keywordtype">bool</span> <a class="code" href="client_8cpp.html#a55bc008de147db5ba9ee37949fbb3d2d" title="Returns POINTCLOUD data of specified nodes for the specified client peer.">getPointCloudSpecificData</a>(<span class="keywordtype">char</span> strid[], <span class="keywordtype">char</span> node_id[], <span class="keywordtype">char</span> *host, <span class="keywordtype">int</span> *port, <span class="keywordtype">char</span> *file_url, <span class="keywordtype">int</span> *size, <span class="keywordtype">double</span> *bandwidth, <span class="keywordtype">bool</span> *RGB_flag)
<a name="l01564"></a>01564 <span class="preprocessor">#else</span>
<a name="l01565"></a><a class="code" href="client_8h.html#ad72e1afe7849a75f084f0efa1a9d3e30">01565</a> <span class="preprocessor"></span><span class="keywordtype">bool</span> <a class="code" href="client_8cpp.html#a55bc008de147db5ba9ee37949fbb3d2d" title="Returns POINTCLOUD data of specified nodes for the specified client peer.">getPointCloudSpecificData</a>(<span class="keywordtype">char</span> strid[], <span class="keywordtype">char</span> node_id[], <span class="keywordtype">char</span> *host, <span class="keywordtype">int</span> *port, <span class="keywordtype">char</span> *file_url, <span class="keywordtype">int</span> *size, <span class="keywordtype">double</span> *bandwidth, <span class="keywordtype">bool</span> *RGB_flag)
<a name="l01566"></a>01566 <span class="preprocessor">#endif</span>
<a name="l01567"></a>01567 <span class="preprocessor"></span>{
<a name="l01568"></a>01568         <span class="keywordtype">int</span> y = 0;
<a name="l01569"></a>01569         RakNetGUID strguid;
<a name="l01570"></a>01570         strguid.FromString(strid);
<a name="l01571"></a>01571         <span class="comment">//check to see if deleted</span>
<a name="l01572"></a>01572         DataStructures::Multilist&lt;ML_STACK, Replica3*&gt; replicaListOut;
<a name="l01573"></a>01573         replicaManager.GetReplicasCreatedByGuid(strguid,replicaListOut);
<a name="l01574"></a>01574         <span class="keywordflow">if</span> (replicaListOut.GetSize()==0) {
<a name="l01575"></a>01575                 <a class="code" href="_client_server_8h.html#a7c73662d8d9072e714396d76b8b98a1f">point_cloud_replicas</a>.erase(strguid);
<a name="l01576"></a>01576                 <span class="keywordflow">return</span> 0;
<a name="l01577"></a>01577         }
<a name="l01578"></a>01578         <span class="keywordflow">for</span> ( std::vector&lt;BeamingPointCloudReplica*&gt;::iterator cIter = <a class="code" href="_client_server_8h.html#a7c73662d8d9072e714396d76b8b98a1f">point_cloud_replicas</a>[strguid].begin(); cIter!=<a class="code" href="_client_server_8h.html#a7c73662d8d9072e714396d76b8b98a1f">point_cloud_replicas</a>[strguid].end(); cIter++ )
<a name="l01579"></a>01579         {
<a name="l01580"></a>01580                 <span class="keywordflow">if</span> ( strcmp((*cIter)-&gt;pointcloud_id,node_id) == 0 )
<a name="l01581"></a>01581                 {
<a name="l01582"></a>01582                         strcpy(host,(*cIter)-&gt;host);
<a name="l01583"></a>01583                         *port = (*cIter)-&gt;port;
<a name="l01584"></a>01584                         strcpy(file_url,(*cIter)-&gt;file_url);
<a name="l01585"></a>01585                         *size = (*cIter)-&gt;size;
<a name="l01586"></a>01586                         *RGB_flag = (*cIter)-&gt;RGB_flag;
<a name="l01587"></a>01587                         *bandwidth = (*cIter)-&gt;bandwidth;
<a name="l01588"></a>01588                         <span class="keywordflow">break</span>;
<a name="l01589"></a>01589                 }
<a name="l01590"></a>01590         }
<a name="l01591"></a>01591         <span class="keywordflow">return</span> 1;
<a name="l01592"></a>01592 }
<a name="l01593"></a>01593 
<a name="l01594"></a>01594 
<a name="l01595"></a>01595 <span class="preprocessor">#ifdef WIN32</span>
<a name="l01596"></a>01596 <span class="preprocessor"></span><a class="code" href="client_8h.html#acfdc053623a87a1a1d4adf03e6b6678d">CLIENT_LIB_EXPORT</a> <span class="keywordtype">bool</span> <a class="code" href="client_8cpp.html#a0cb72a675ccaf72b7b15d6ebeb927167" title="getGenericData returns a pointer to a shared generic data and its size">getGenericData</a>(<span class="keywordtype">char</span> strid[], <span class="keywordtype">char</span> generic_id[], <span class="keywordtype">void</span> *pdata, <span class="keywordtype">int</span> *psize)
<a name="l01597"></a>01597 <span class="preprocessor">#else</span>
<a name="l01598"></a><a class="code" href="client_8h.html#ad584eed3765e8a9029cce7efb6cb26a0">01598</a> <span class="preprocessor"></span><span class="keywordtype">bool</span> <a class="code" href="client_8cpp.html#a0cb72a675ccaf72b7b15d6ebeb927167" title="getGenericData returns a pointer to a shared generic data and its size">getGenericData</a>(<span class="keywordtype">char</span> strid[], <span class="keywordtype">char</span> generic_id[], <span class="keywordtype">void</span> *pdata, <span class="keywordtype">int</span> *psize)
<a name="l01599"></a>01599 <span class="preprocessor">#endif</span>
<a name="l01600"></a>01600 <span class="preprocessor"></span>{
<a name="l01601"></a>01601         RakNetGUID strguid;
<a name="l01602"></a>01602         strguid.FromString(strid);
<a name="l01603"></a>01603         <span class="comment">//check to see if deleted</span>
<a name="l01604"></a>01604         DataStructures::Multilist&lt;ML_STACK, Replica3*&gt; replicaListOut;
<a name="l01605"></a>01605         replicaManager.GetReplicasCreatedByGuid(strguid,replicaListOut);
<a name="l01606"></a>01606         <span class="keywordflow">if</span> (replicaListOut.GetSize()==0) {
<a name="l01607"></a>01607                 <a class="code" href="_client_server_8h.html#a61cf6a51b1d3eed6ab9903aa09162bbc">generic_replicas</a>.erase(strguid);
<a name="l01608"></a>01608                 <span class="keywordflow">return</span> 0;
<a name="l01609"></a>01609         }
<a name="l01610"></a>01610         <span class="keywordflow">for</span> ( std::vector&lt;BeamingGenericReplica*&gt;::iterator cIter = <a class="code" href="_client_server_8h.html#a61cf6a51b1d3eed6ab9903aa09162bbc">generic_replicas</a>[strguid].begin(); cIter!=<a class="code" href="_client_server_8h.html#a61cf6a51b1d3eed6ab9903aa09162bbc">generic_replicas</a>[strguid].end(); cIter++ )
<a name="l01611"></a>01611         {
<a name="l01612"></a>01612                 <span class="keywordflow">if</span> ( strcmp((*cIter)-&gt;generic_id,generic_id) == 0 )
<a name="l01613"></a>01613                 {
<a name="l01614"></a>01614                         *psize = (*cIter)-&gt;datasize;
<a name="l01615"></a>01615                         memcpy ( pdata, (*cIter)-&gt;anydata, 1024 );
<a name="l01616"></a>01616                         <span class="comment">/*//begin printf</span>
<a name="l01617"></a>01617 <span class="comment">                        struct mystruct{</span>
<a name="l01618"></a>01618 <span class="comment">                                int x;</span>
<a name="l01619"></a>01619 <span class="comment">                                char name[28];</span>
<a name="l01620"></a>01620 <span class="comment">                                float myfloat;</span>
<a name="l01621"></a>01621 <span class="comment">                        } st;                           </span>
<a name="l01622"></a>01622 <span class="comment">                        printf(&quot;receiving %s, %d, %.3f ...\n&quot;,((mystruct *)(*cIter)-&gt;anydata)-&gt;name,((mystruct *)(*cIter)-&gt;anydata)-&gt;x,((mystruct *)(*cIter)-&gt;anydata)-&gt;myfloat);</span>
<a name="l01623"></a>01623 <span class="comment">                        //end printf*/</span>
<a name="l01624"></a>01624                         <span class="keywordflow">break</span>;
<a name="l01625"></a>01625                 }
<a name="l01626"></a>01626         }
<a name="l01627"></a>01627         <span class="keywordflow">return</span> 1;
<a name="l01628"></a>01628 }
<a name="l01629"></a>01629 
<a name="l01630"></a>01630 
<a name="l01631"></a>01631 <span class="preprocessor">#ifdef WIN32</span>
<a name="l01632"></a>01632 <span class="preprocessor"></span><a class="code" href="client_8h.html#acfdc053623a87a1a1d4adf03e6b6678d">CLIENT_LIB_EXPORT</a> <span class="keywordtype">int</span> <a class="code" href="client_8cpp.html#a6aa5679d55394232a66d9762e0b85e8f">checkStatus</a>(<span class="keywordtype">char</span> *idstr, <span class="keywordtype">char</span> *mytype, <span class="keywordtype">char</span> *name, <span class="keywordtype">char</span> *myconfig)
<a name="l01633"></a>01633 <span class="preprocessor">#else</span>
<a name="l01634"></a><a class="code" href="client_8h.html#a681124e319cf67394a5f25af882ce945">01634</a> <span class="preprocessor"></span><span class="keywordtype">int</span> <a class="code" href="client_8cpp.html#a6aa5679d55394232a66d9762e0b85e8f">checkStatus</a>(<span class="keywordtype">char</span> *idstr, <span class="keywordtype">char</span> *mytype, <span class="keywordtype">char</span> *name, <span class="keywordtype">char</span> *myconfig)
<a name="l01635"></a>01635 <span class="preprocessor">#endif</span>
<a name="l01636"></a>01636 <span class="preprocessor"></span>{
<a name="l01637"></a>01637         <span class="keywordtype">int</span> x = <a class="code" href="_client_server_8h.html#a23ccb3d0e9aaae919d32876ed291503e">new_clients</a>.size();
<a name="l01638"></a>01638         <span class="keywordflow">if</span> ( x &gt; 0 )
<a name="l01639"></a>01639         {
<a name="l01640"></a>01640                 std::map&lt;RakNetGUID, std::vector&lt;std::string&gt; &gt;::iterator cIter = <a class="code" href="_client_server_8h.html#a23ccb3d0e9aaae919d32876ed291503e">new_clients</a>.begin(); <span class="comment">//get first item in the list </span>
<a name="l01641"></a>01641                 strcpy(idstr,cIter-&gt;first.ToString()); <span class="comment">//copy guid</span>
<a name="l01642"></a>01642                 strcpy(name,cIter-&gt;second[0].c_str()); <span class="comment">//copy name</span>
<a name="l01643"></a>01643                 strcpy(mytype,cIter-&gt;second[1].c_str()); <span class="comment">//copy type</span>
<a name="l01644"></a>01644                 strcpy(myconfig,cIter-&gt;second[2].c_str()); <span class="comment">//copy avatar name</span>
<a name="l01645"></a>01645                 printf(<span class="stringliteral">&quot;checkStatus -&gt; %s %s %s \n&quot;</span>,name,mytype,myconfig);
<a name="l01646"></a>01646                 <a class="code" href="_client_server_8h.html#a23ccb3d0e9aaae919d32876ed291503e">new_clients</a>.erase(cIter-&gt;first); <span class="comment">//erase this item once accessed</span>
<a name="l01647"></a>01647         }
<a name="l01648"></a>01648         <span class="comment">//printf(&quot;size %i \n&quot;,x);</span>
<a name="l01649"></a>01649         <span class="keywordflow">return</span> x;
<a name="l01650"></a>01650 }
<a name="l01651"></a>01651 
<a name="l01652"></a>01652 
<a name="l01653"></a>01653 <span class="preprocessor">#ifdef WIN32</span>
<a name="l01654"></a>01654 <span class="preprocessor"></span><a class="code" href="client_8h.html#acfdc053623a87a1a1d4adf03e6b6678d">CLIENT_LIB_EXPORT</a> <span class="keywordtype">int</span> <a class="code" href="client_8cpp.html#ae7559b8385b702bf8c22141ec26fef48">fetch</a>(<span class="keywordtype">char</span> strid[], <span class="keywordtype">float</span> *fa)
<a name="l01655"></a>01655 <span class="preprocessor">#else</span>
<a name="l01656"></a><a class="code" href="client_8h.html#a375366167b86a393a53a80421ca0c75d">01656</a> <span class="preprocessor"></span><span class="keywordtype">int</span> <a class="code" href="client_8cpp.html#ae7559b8385b702bf8c22141ec26fef48">fetch</a>(<span class="keywordtype">char</span> strid[],  <span class="keywordtype">float</span> *fa)
<a name="l01657"></a>01657 <span class="preprocessor">#endif</span>
<a name="l01658"></a>01658 <span class="preprocessor"></span>{
<a name="l01659"></a>01659         <span class="comment">//printf(&quot;fetching %s &quot;,strid);</span>
<a name="l01660"></a>01660         <span class="keywordtype">int</span> x = 0, y = 0;
<a name="l01661"></a>01661         RakNetGUID strguid;
<a name="l01662"></a>01662         strguid.FromString(strid);
<a name="l01663"></a>01663         <span class="comment">//check to see if deleted</span>
<a name="l01664"></a>01664         DataStructures::Multilist&lt;ML_STACK, Replica3*&gt; replicaListOut;
<a name="l01665"></a>01665         replicaManager.GetReplicasCreatedByGuid(strguid,replicaListOut);
<a name="l01666"></a>01666         <span class="keywordflow">if</span> (replicaListOut.GetSize()==0)
<a name="l01667"></a>01667         {
<a name="l01668"></a>01668                 <a class="code" href="_client_server_8h.html#a045310ed105e329426e31b89e065b05c">avatar_joint_replicas</a>.erase(strguid);
<a name="l01669"></a>01669                 <span class="comment">//printf(&quot;client %s not available\n&quot;, strid);</span>
<a name="l01670"></a>01670                 <span class="keywordflow">return</span> 0;
<a name="l01671"></a>01671         }
<a name="l01672"></a>01672         <span class="comment">//std::cout&lt;&lt;&quot; guid=&quot;&lt;&lt;cIter-&gt;first.ToString()&lt;&lt;&quot; replicas=&quot;&lt;&lt;replicaListOut.GetSize()&lt;&lt;&quot;, &quot;&lt;&lt;cIter-&gt;second.size()&lt;&lt;std::endl; </span>
<a name="l01673"></a>01673         <span class="keywordflow">for</span> ( std::vector&lt;BeamingAvatarJointReplica*&gt;::iterator cIter = <a class="code" href="_client_server_8h.html#a045310ed105e329426e31b89e065b05c">avatar_joint_replicas</a>[strguid].begin(); cIter!=<a class="code" href="_client_server_8h.html#a045310ed105e329426e31b89e065b05c">avatar_joint_replicas</a>[strguid].end(); cIter++ )
<a name="l01674"></a>01674         {
<a name="l01675"></a>01675                 <span class="keywordflow">if</span> (y&gt;122) {
<a name="l01676"></a>01676                         printf(<span class="stringliteral">&quot;More than one AVATAR added by %s, use getNodesInfo()&quot;</span>,strid);
<a name="l01677"></a>01677                         <span class="keywordflow">break</span>;
<a name="l01678"></a>01678                 }
<a name="l01679"></a>01679                 <span class="keywordtype">float</span> z=0; <span class="comment">//for printf</span>
<a name="l01680"></a>01680                 fa[x] = z = y;<span class="comment">//atof((*cIter))-&gt;avatarjoint_id; //return node_ids as a number even if string</span>
<a name="l01681"></a>01681                 <span class="comment">//printf(&quot;object fa[%i]=%.f &quot;,x,z);</span>
<a name="l01682"></a>01682                 fa[++x] = z = (*cIter)-&gt;position.x;
<a name="l01683"></a>01683                 <span class="comment">//printf(&quot;position/orientation fa[%i]=%.3f &quot;,x,z);</span>
<a name="l01684"></a>01684                 fa[++x] = z = (*cIter)-&gt;position.y;
<a name="l01685"></a>01685                 <span class="comment">//printf(&quot;fa[%i]=%.3f &quot;,x,z);</span>
<a name="l01686"></a>01686                 fa[++x] = z = (*cIter)-&gt;position.z;
<a name="l01687"></a>01687                 <span class="comment">//printf(&quot;fa[%i]=%.3f &quot;,x,z);</span>
<a name="l01688"></a>01688                 fa[++x] = z = (*cIter)-&gt;orientation.x;
<a name="l01689"></a>01689                 <span class="comment">//printf(&quot;fa[%i]=%.3f &quot;,x,z);</span>
<a name="l01690"></a>01690                 fa[++x] = z = (*cIter)-&gt;orientation.y;
<a name="l01691"></a>01691                 <span class="comment">//printf(&quot;fa[%i]=%.3f &quot;,x,z);</span>
<a name="l01692"></a>01692                 fa[++x] = z = (*cIter)-&gt;orientation.z;
<a name="l01693"></a>01693                 <span class="comment">//printf(&quot;fa[%i]=%.3f &quot;,x,z);</span>
<a name="l01694"></a>01694                 fa[++x] = z = (*cIter)-&gt;orientation.w;
<a name="l01695"></a>01695                 <span class="comment">//printf(&quot;fa[%i]=%.3f &quot;,x,z);</span>
<a name="l01696"></a>01696                 x++;
<a name="l01697"></a>01697                 y++;
<a name="l01698"></a>01698         }
<a name="l01699"></a>01699         <span class="comment">//printf(&quot;count=%i \n&quot;,y);      </span>
<a name="l01700"></a>01700         <span class="keywordflow">return</span> y;
<a name="l01701"></a>01701 }
<a name="l01702"></a>01702 
<a name="l01703"></a>01703 <span class="preprocessor">#ifdef WIN32</span>
<a name="l01704"></a>01704 <span class="preprocessor"></span><a class="code" href="client_8h.html#acfdc053623a87a1a1d4adf03e6b6678d">CLIENT_LIB_EXPORT</a> <span class="keywordtype">void</span> <a class="code" href="client_8cpp.html#a66a21a3ed677f69961d8280482c5285a" title="use removeAllNodes() and stop() on exit">removeAllNodes</a>()
<a name="l01705"></a>01705 <span class="preprocessor">#else</span>
<a name="l01706"></a><a class="code" href="client_8h.html#a2b100eba4c0bf047609e00c0e264cf25">01706</a> <span class="preprocessor"></span><span class="keywordtype">void</span> <a class="code" href="client_8cpp.html#a66a21a3ed677f69961d8280482c5285a" title="use removeAllNodes() and stop() on exit">removeAllNodes</a>()
<a name="l01707"></a>01707 <span class="preprocessor">#endif</span>
<a name="l01708"></a>01708 <span class="preprocessor"></span>{
<a name="l01709"></a>01709         printf(<span class="stringliteral">&quot;All nodes for %s destroyed.\n&quot;</span>,<a class="code" href="client_8cpp.html#a52fbcee0fb12c6ccf9d042a1ec07d44f">myid</a>.c_str());
<a name="l01710"></a>01710         DataStructures::Multilist&lt;ML_STACK, Replica3*&gt; replicaListOut;
<a name="l01711"></a>01711         <span class="comment">// ClearPointers is needed, as I don&#39;t track which objects have and have not been allocated at the application level. </span>
<a name="l01712"></a>01712         <span class="comment">// So ClearPointers will call delete on every object in the returned list, </span>
<a name="l01713"></a>01713         <span class="comment">// which is every object that the application has created. Another way to put it is</span>
<a name="l01714"></a>01714         <span class="comment">//      A. Send a packet to tell other systems to delete these objects</span>
<a name="l01715"></a>01715         <span class="comment">//      B. Delete these objects on my own system</span>
<a name="l01716"></a>01716         replicaManager.GetReplicasCreatedByMe(replicaListOut);
<a name="l01717"></a>01717         replicaManager.BroadcastDestructionList(replicaListOut, UNASSIGNED_SYSTEM_ADDRESS);
<a name="l01718"></a>01718         replicaListOut.ClearPointers( <span class="keyword">true</span>, __FILE__, __LINE__ );
<a name="l01719"></a>01719         AvatarNodeMap.clear();
<a name="l01720"></a>01720 }
<a name="l01721"></a>01721 
<a name="l01722"></a>01722 
<a name="l01723"></a>01723 <span class="preprocessor">#ifdef WIN32</span>
<a name="l01724"></a>01724 <span class="preprocessor"></span><a class="code" href="client_8h.html#acfdc053623a87a1a1d4adf03e6b6678d">CLIENT_LIB_EXPORT</a> <span class="keywordtype">void</span> <a class="code" href="client_8cpp.html#a8c528baf37154d347366083f0f816846" title="use removeAllNodes() and stop() on exit">stop</a>()
<a name="l01725"></a>01725 <span class="preprocessor">#else</span>
<a name="l01726"></a><a class="code" href="client_8h.html#aa5f9f75b88a77e3b714709f2f6285100">01726</a> <span class="preprocessor"></span><span class="keywordtype">void</span> <a class="code" href="client_8cpp.html#a8c528baf37154d347366083f0f816846" title="use removeAllNodes() and stop() on exit">stop</a>()
<a name="l01727"></a>01727 <span class="preprocessor">#endif</span>
<a name="l01728"></a>01728 <span class="preprocessor"></span>{
<a name="l01729"></a>01729         <a class="code" href="client_8cpp.html#afc90d01dfaaa56f2484c5746a05c37b8" title="Each application has one instance of RakPeerInterface.">rakPeer</a>-&gt;Shutdown(100,0);
<a name="l01730"></a>01730         RakNetworkFactory::DestroyRakPeerInterface(<a class="code" href="client_8cpp.html#afc90d01dfaaa56f2484c5746a05c37b8" title="Each application has one instance of RakPeerInterface.">rakPeer</a>);
<a name="l01731"></a>01731         <a class="code" href="client_8cpp.html#a7ca7752c5a3e9aa7f3cd627120ee5b95">isconnected</a>=<span class="keyword">false</span>;
<a name="l01732"></a>01732         <a class="code" href="client_8cpp.html#ab9561565dc809c4fd607d84b43952c5a">viewing_only</a> = <span class="keyword">false</span>;
<a name="l01733"></a>01733 }
</pre></div></div><!-- contents -->
</div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Defines</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="client_8cpp.html">client.cpp</a>      </li>

    <li class="footer">Generated on Wed Oct 17 2012 13:07:11 for Beaming Scene Service by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
