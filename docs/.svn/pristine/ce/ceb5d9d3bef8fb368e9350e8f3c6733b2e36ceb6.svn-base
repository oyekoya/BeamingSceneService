<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>Beaming Audio: Classes/audiointerface.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript">
$(document).ready(initResizable);
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css"/>
</head>
<body onload='searchBox.OnSelectItem(0);'>
<!-- Generated by Doxygen 1.7.3 -->
<script type="text/javascript"><!--
var searchBox = new SearchBox("searchBox", "search",false,'Search');
--></script>
<div id="top">
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="BEAMING_LOGO2.jpg"></td>
  <td style="padding-left: 0.5em;">
   <div id="projectname">Beaming Audio&#160;<span id="projectnumber">0.9</span></div>
   <div id="projectbrief">Audio Client-Server for BEAMING</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.html"><span>Related&#160;Pages</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
      <li id="searchli">
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
      <li><a href="globals.html"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('audiointerface_8cpp.html','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<h1>Classes/audiointerface.cpp</h1>  </div>
</div>
<div class="contents">
<a href="audiointerface_8cpp.html">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 
<a name="l00002"></a>00002 
<a name="l00003"></a>00003 
<a name="l00004"></a>00004 
<a name="l00005"></a>00005 <span class="preprocessor">#include &quot;<a class="code" href="audiointerface_8h.html" title="Defines the interface for asynchronous communication between audio modules.">audiointerface.h</a>&quot;</span>
<a name="l00006"></a>00006 <span class="preprocessor">#include &quot;pa_ringbuffer.c&quot;</span>
<a name="l00007"></a>00007 
<a name="l00008"></a>00008 <span class="preprocessor">#include &lt;math.h&gt;</span>
<a name="l00009"></a>00009 <span class="preprocessor">#include &lt;QDebug&gt;</span>
<a name="l00010"></a>00010 
<a name="l00011"></a>00011 
<a name="l00012"></a>00012 
<a name="l00013"></a><a class="code" href="class_audio_interface.html#a7b9240750c634fadb20b97e6450e578b">00013</a> <a class="code" href="class_audio_interface.html#a7b9240750c634fadb20b97e6450e578b" title="Constructor for the audio interface.">AudioInterface::AudioInterface</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> nChnCapture, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> nChnOutput, ring_buffer_size_t bufferSize, QObject *parent) : QObject(parent),
<a name="l00014"></a>00014         nCapture(nChnCapture),
<a name="l00015"></a>00015         nOutput(nChnOutput)
<a name="l00016"></a>00016 {
<a name="l00017"></a>00017     <span class="comment">// the buffer size must be a power of 2 for the buffer to function, so, let&#39;s make sure it is...</span>
<a name="l00018"></a>00018     <span class="comment">//buffersize = 1 &lt;&lt; (int)ceil(log2((double)bufferSize)); // log2 is not msvc compatible</span>
<a name="l00019"></a>00019     buffersize = 1 &lt;&lt; (int)ceil(log((<span class="keywordtype">double</span>)bufferSize)/log((<span class="keywordtype">double</span>)2.0)); <span class="comment">// win and linux compatible - log2(n)=log(n)/log(2)</span>
<a name="l00020"></a>00020 
<a name="l00021"></a>00021     CaptureID.resize(nCapture), OutputID.resize(nOutput);;
<a name="l00022"></a>00022     <span class="comment">// allocate space for the buffers in multiple channels</span>
<a name="l00023"></a>00023     bufDataCapture.reserve(nCapture); bufDataOutput.reserve(nOutput); <span class="comment">// first reserve final size of the arrays for quicker allocation - we cannot use resize, since that creates default (empty) arrays within</span>
<a name="l00024"></a>00024     <span class="keywordflow">while</span>(bufDataCapture.size()&lt;nCapture) { bufDataCapture.append(QVector&lt;signed short&gt; (buffersize)); } <span class="comment">//allocate input</span>
<a name="l00025"></a>00025     <span class="keywordflow">while</span>(bufDataOutput.size()&lt;nOutput) { bufDataOutput.append(QVector&lt;signed short&gt; (buffersize)); } <span class="comment">//allocate output</span>
<a name="l00026"></a>00026 
<a name="l00027"></a>00027     <span class="comment">// Resize the buffer arrays and initialize the buffers</span>
<a name="l00028"></a>00028     bufCapture.resize(nCapture); bufOutput.resize(nOutput); <span class="comment">// resize buffer arrays with default (unCaptureitialized) buffers</span>
<a name="l00029"></a>00029     <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=0; i&lt;nCapture;i++)
<a name="l00030"></a>00030     { <span class="comment">// initialize input buffers</span>
<a name="l00031"></a>00031         <span class="keywordflow">if</span>( PaUtil_InitializeRingBuffer(&amp;(bufCapture[i]), <span class="keyword">sizeof</span>(<span class="keywordtype">signed</span> <span class="keywordtype">short</span>), buffersize, bufDataCapture[i].data()) &lt; 0)
<a name="l00032"></a>00032         {
<a name="l00033"></a>00033             qDebug() &lt;&lt; <span class="stringliteral">&quot;AudioInterface: Input buffer &quot;</span> &lt;&lt; i &lt;&lt; <span class="stringliteral">&quot; not properly initialized to buffersize &quot;</span> &lt;&lt; buffersize;
<a name="l00034"></a>00034         }
<a name="l00035"></a>00035     }
<a name="l00036"></a>00036     <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=0; i&lt;nOutput;i++)
<a name="l00037"></a>00037     { <span class="comment">// initialize output buffers</span>
<a name="l00038"></a>00038         <span class="keywordflow">if</span>( PaUtil_InitializeRingBuffer(&amp;(bufOutput[i]), <span class="keyword">sizeof</span>(<span class="keywordtype">signed</span> <span class="keywordtype">short</span>), buffersize, bufDataOutput[i].data()) &lt; 0)
<a name="l00039"></a>00039         {
<a name="l00040"></a>00040             qDebug() &lt;&lt; <span class="stringliteral">&quot;AudioInterface: Output buffer &quot;</span> &lt;&lt; i &lt;&lt; <span class="stringliteral">&quot; not properly initialized to buffersize &quot;</span> &lt;&lt; buffersize;
<a name="l00041"></a>00041         }
<a name="l00042"></a>00042     }
<a name="l00043"></a>00043 
<a name="l00044"></a>00044 
<a name="l00045"></a>00045 }
<a name="l00046"></a>00046 
<a name="l00047"></a>00047 AudioInterface::~AudioInterface(){
<a name="l00048"></a>00048 
<a name="l00049"></a>00049 }
<a name="l00050"></a>00050 
<a name="l00051"></a>00051 
<a name="l00052"></a>00052 <span class="comment">// Input wrappers:</span>
<a name="l00053"></a><a class="code" href="class_audio_interface.html#a6a5265f1be1d9b5151002d3104a55fd0">00053</a> ring_buffer_size_t <a class="code" href="class_audio_interface.html#a6a5265f1be1d9b5151002d3104a55fd0" title="Test how many samples are available on a particular Capture channel.">AudioInterface::nAvailCapture</a>(<span class="keywordtype">int</span> channel){
<a name="l00054"></a>00054 
<a name="l00055"></a>00055     <span class="keywordflow">if</span>((channel&gt;nCapture-1)|(channel&lt;0))
<a name="l00056"></a>00056     {
<a name="l00057"></a>00057         emit <a class="code" href="class_audio_interface.html#a5794aa6662df15c55e99177709ca9305" title="A Qt Signal for a general message interface.">message</a>(tr(<span class="stringliteral">&quot;Attempting to get available samples from capture channel %1, but only %2 are available (remember index starts at 0)&quot;</span>).arg(QString::number(channel),QString::number(nCapture)), <span class="keyword">true</span>);
<a name="l00058"></a>00058         <span class="keywordflow">return</span> 0;
<a name="l00059"></a>00059      }
<a name="l00060"></a>00060     <span class="keywordflow">return</span> PaUtil_GetRingBufferReadAvailable(&amp;(bufCapture[channel]));
<a name="l00061"></a>00061 }
<a name="l00062"></a>00062 
<a name="l00063"></a><a class="code" href="class_audio_interface.html#adf47b99cee9fdeb3b843a624dfad2f4e">00063</a> ring_buffer_size_t <a class="code" href="class_audio_interface.html#adf47b99cee9fdeb3b843a624dfad2f4e" title="Write to a Capture channel.">AudioInterface::writeCapture</a>(<span class="keywordtype">signed</span> <span class="keywordtype">short</span> *source, ring_buffer_size_t numel, <span class="keywordtype">int</span> channel){
<a name="l00064"></a>00064     <span class="keywordflow">if</span>((channel&gt;nCapture-1)|(channel&lt;0))
<a name="l00065"></a>00065     {
<a name="l00066"></a>00066         emit <a class="code" href="class_audio_interface.html#a5794aa6662df15c55e99177709ca9305" title="A Qt Signal for a general message interface.">message</a>(tr(<span class="stringliteral">&quot;Attempting to write to capture channel %1, but only %2 are available (remember index starts at 0)&quot;</span>).arg(QString::number(channel),QString::number(nCapture)), <span class="keyword">true</span>);
<a name="l00067"></a>00067         <span class="keywordflow">return</span> 0;
<a name="l00068"></a>00068     }
<a name="l00069"></a>00069     <span class="keywordflow">return</span> write(&amp;(bufCapture[channel]),source,numel,tr(<span class="stringliteral">&quot;In, multichannel&quot;</span>)); <span class="comment">// write to it and return how much we wrote</span>
<a name="l00070"></a>00070 }
<a name="l00071"></a>00071 
<a name="l00072"></a>00072 <span class="comment">// overloaded write function utilizing the Beaming Scene ID</span>
<a name="l00073"></a><a class="code" href="class_audio_interface.html#a0216d85b9467eb13b63c77e47b7797ed">00073</a> ring_buffer_size_t <a class="code" href="class_audio_interface.html#adf47b99cee9fdeb3b843a624dfad2f4e" title="Write to a Capture channel.">AudioInterface::writeCapture</a>(<span class="keywordtype">signed</span> <span class="keywordtype">short</span> *source, ring_buffer_size_t numel, QString <span class="keywordtype">id</span>){
<a name="l00074"></a>00074     <span class="keywordflow">if</span>(<a class="code" href="class_audio_interface.html#a7c22ce19f754d6db48ff679f09af567d" title="Get the Capture channel index of a particular ID.">indexFromCaptureID</a>(<span class="keywordtype">id</span>)==-1){<a class="code" href="class_audio_interface.html#aee1478c637ec699b4a157f2fa407c1a3" title="Explicitly add a Capture channel.">addChnCapture</a>(<span class="keywordtype">id</span>);}
<a name="l00075"></a>00075     <span class="keywordflow">return</span> <a class="code" href="class_audio_interface.html#adf47b99cee9fdeb3b843a624dfad2f4e" title="Write to a Capture channel.">writeCapture</a>(source, numel,<a class="code" href="class_audio_interface.html#a7c22ce19f754d6db48ff679f09af567d" title="Get the Capture channel index of a particular ID.">indexFromCaptureID</a>(<span class="keywordtype">id</span>));
<a name="l00076"></a>00076 }
<a name="l00077"></a>00077 
<a name="l00078"></a><a class="code" href="class_audio_interface.html#a55a997d0ba7d7b5eef8b924ce2a2aeed">00078</a> ring_buffer_size_t <a class="code" href="class_audio_interface.html#a55a997d0ba7d7b5eef8b924ce2a2aeed" title="Read from a Capture channel.">AudioInterface::readCapture</a>(<span class="keywordtype">signed</span> <span class="keywordtype">short</span> *dest, ring_buffer_size_t numel, <span class="keywordtype">int</span> channel){
<a name="l00079"></a>00079     <span class="keywordflow">if</span>((channel&gt;nCapture-1)|(channel&lt;0))
<a name="l00080"></a>00080     {
<a name="l00081"></a>00081         emit <a class="code" href="class_audio_interface.html#a5794aa6662df15c55e99177709ca9305" title="A Qt Signal for a general message interface.">message</a>(tr(<span class="stringliteral">&quot;Attempting to read from capture channel %1, but only %2 are available (remember index starts at 0)&quot;</span>).arg(QString::number(channel),QString::number(nCapture)), <span class="keyword">true</span>);
<a name="l00082"></a>00082         <span class="keywordflow">return</span> 0;
<a name="l00083"></a>00083     }
<a name="l00084"></a>00084     <span class="keywordflow">return</span> read(&amp;(bufCapture[channel]),dest,numel);
<a name="l00085"></a>00085 }
<a name="l00086"></a>00086 
<a name="l00087"></a>00087 <span class="comment">// overloaded read function utilizing the Beaming Scene ID</span>
<a name="l00088"></a><a class="code" href="class_audio_interface.html#a7de9bde79e7259c3a6339a1b8ab52545">00088</a> ring_buffer_size_t <a class="code" href="class_audio_interface.html#a55a997d0ba7d7b5eef8b924ce2a2aeed" title="Read from a Capture channel.">AudioInterface::readCapture</a>(<span class="keywordtype">signed</span> <span class="keywordtype">short</span> *dest, ring_buffer_size_t numel, QString <span class="keywordtype">id</span>){
<a name="l00089"></a>00089     <span class="keywordflow">return</span> <a class="code" href="class_audio_interface.html#a55a997d0ba7d7b5eef8b924ce2a2aeed" title="Read from a Capture channel.">readCapture</a>(dest, numel,<a class="code" href="class_audio_interface.html#a7c22ce19f754d6db48ff679f09af567d" title="Get the Capture channel index of a particular ID.">indexFromCaptureID</a>(<span class="keywordtype">id</span>));
<a name="l00090"></a>00090 }
<a name="l00091"></a>00091 
<a name="l00092"></a>00092 <span class="comment">// Output wrappers</span>
<a name="l00093"></a><a class="code" href="class_audio_interface.html#a8364736e18cc33aeff7eeb389356fe88">00093</a> ring_buffer_size_t <a class="code" href="class_audio_interface.html#a8364736e18cc33aeff7eeb389356fe88" title="Test how many samples are available on a particular Output channel.">AudioInterface::nAvailOutput</a>(<span class="keywordtype">int</span> channel){
<a name="l00094"></a>00094     <span class="keywordflow">if</span>((channel&gt;nOutput-1)|(channel&lt;0))
<a name="l00095"></a>00095     {
<a name="l00096"></a>00096         emit <a class="code" href="class_audio_interface.html#a5794aa6662df15c55e99177709ca9305" title="A Qt Signal for a general message interface.">message</a>(tr(<span class="stringliteral">&quot;Attempting to get available samples from output channel %1, but only %2 are available (remember index starts at 0)&quot;</span>).arg(QString::number(channel),QString::number(nCapture)),<span class="keyword">true</span>);
<a name="l00097"></a>00097         <span class="keywordflow">return</span> 0;
<a name="l00098"></a>00098      }
<a name="l00099"></a>00099     <span class="keywordflow">return</span> PaUtil_GetRingBufferReadAvailable(&amp;(bufOutput[channel]));
<a name="l00100"></a>00100 }
<a name="l00101"></a>00101 
<a name="l00102"></a><a class="code" href="class_audio_interface.html#a7aab1fc9ee96f0b2f30e097b8ba9d271">00102</a> ring_buffer_size_t <a class="code" href="class_audio_interface.html#a7aab1fc9ee96f0b2f30e097b8ba9d271" title="Write to an Output channel.">AudioInterface::writeOutput</a>(<span class="keywordtype">signed</span> <span class="keywordtype">short</span> *source, ring_buffer_size_t numel, <span class="keywordtype">int</span> channel){
<a name="l00103"></a>00103     <span class="keywordflow">if</span>((channel&gt;nOutput-1)|(channel&lt;0))
<a name="l00104"></a>00104     {
<a name="l00105"></a>00105         emit <a class="code" href="class_audio_interface.html#a5794aa6662df15c55e99177709ca9305" title="A Qt Signal for a general message interface.">message</a>(tr(<span class="stringliteral">&quot;Attempting to write to output channel %1, but only %2 are available (remember index starts at 0)&quot;</span>).arg(QString::number(channel),QString::number(nCapture)),<span class="keyword">true</span>);
<a name="l00106"></a>00106         <span class="keywordflow">return</span> 0;
<a name="l00107"></a>00107     }
<a name="l00108"></a>00108     <span class="keywordflow">return</span> write(&amp;(bufOutput[channel]),source,numel,tr(<span class="stringliteral">&quot;Out, multichannel, %1&quot;</span>).arg(<a class="code" href="class_audio_interface.html#ab91b9a3336a716ca6689da5e1411d57e" title="Get the ID associated to a particular Output channel.">outputID</a>(channel))); <span class="comment">// write to it and return how much we wrote</span>
<a name="l00109"></a>00109 }
<a name="l00110"></a>00110 
<a name="l00111"></a>00111 <span class="comment">// overloaded write function utilizing the Beaming Scene ID</span>
<a name="l00112"></a><a class="code" href="class_audio_interface.html#a09ab6faa8ce907f02a3fbbe6cdea09e1">00112</a> ring_buffer_size_t <a class="code" href="class_audio_interface.html#a7aab1fc9ee96f0b2f30e097b8ba9d271" title="Write to an Output channel.">AudioInterface::writeOutput</a>(<span class="keywordtype">signed</span> <span class="keywordtype">short</span> *source, ring_buffer_size_t numel, QString <span class="keywordtype">id</span>){
<a name="l00113"></a>00113     <span class="keywordflow">if</span>(<a class="code" href="class_audio_interface.html#a06e0157bc58c97fd43deb148e6bf0515" title="Get the Output channel index of a particular ID.">indexFromOutputID</a>(<span class="keywordtype">id</span>)==-1){<a class="code" href="class_audio_interface.html#a0d38fbf733e8555f95f4af9d23672a33" title="Explicitly add an Output channel.">addChnOutput</a>(<span class="keywordtype">id</span>);}
<a name="l00114"></a>00114     <span class="keywordflow">return</span> <a class="code" href="class_audio_interface.html#a7aab1fc9ee96f0b2f30e097b8ba9d271" title="Write to an Output channel.">writeOutput</a>(source, numel,<a class="code" href="class_audio_interface.html#a06e0157bc58c97fd43deb148e6bf0515" title="Get the Output channel index of a particular ID.">indexFromOutputID</a>(<span class="keywordtype">id</span>));
<a name="l00115"></a>00115 }
<a name="l00116"></a>00116 
<a name="l00117"></a>00117 
<a name="l00118"></a><a class="code" href="class_audio_interface.html#a089f7cb8b1327c9c83e2442b3ef5c4d0">00118</a> ring_buffer_size_t <a class="code" href="class_audio_interface.html#a089f7cb8b1327c9c83e2442b3ef5c4d0" title="Read from an Output channel.">AudioInterface::readOutput</a>(<span class="keywordtype">signed</span> <span class="keywordtype">short</span> *dest, ring_buffer_size_t numel, <span class="keywordtype">int</span> channel){
<a name="l00119"></a>00119     <span class="keywordflow">if</span>((channel&gt;nOutput-1)|(channel&lt;0))
<a name="l00120"></a>00120     {
<a name="l00121"></a>00121         emit <a class="code" href="class_audio_interface.html#a5794aa6662df15c55e99177709ca9305" title="A Qt Signal for a general message interface.">message</a>(tr(<span class="stringliteral">&quot;Attempting to read from output channel %1, but only %2 are available (remember index starts at 0)&quot;</span>).arg(QString::number(channel),QString::number(nCapture)),<span class="keyword">true</span>);
<a name="l00122"></a>00122         <span class="keywordflow">return</span> 0;
<a name="l00123"></a>00123     }
<a name="l00124"></a>00124     <span class="keywordflow">return</span> read(&amp;(bufOutput[channel]),dest,numel);
<a name="l00125"></a>00125 }
<a name="l00126"></a>00126 
<a name="l00127"></a>00127 <span class="comment">// overloaded read function utilizing the Beaming Scene ID</span>
<a name="l00128"></a><a class="code" href="class_audio_interface.html#a6c610824367452dee0a83bf4ffa185cd">00128</a> ring_buffer_size_t <a class="code" href="class_audio_interface.html#a089f7cb8b1327c9c83e2442b3ef5c4d0" title="Read from an Output channel.">AudioInterface::readOutput</a>(<span class="keywordtype">signed</span> <span class="keywordtype">short</span> *dest, ring_buffer_size_t numel, QString <span class="keywordtype">id</span>){
<a name="l00129"></a>00129     <span class="keywordflow">return</span> <a class="code" href="class_audio_interface.html#a089f7cb8b1327c9c83e2442b3ef5c4d0" title="Read from an Output channel.">readOutput</a>(dest, numel,<a class="code" href="class_audio_interface.html#a06e0157bc58c97fd43deb148e6bf0515" title="Get the Output channel index of a particular ID.">indexFromOutputID</a>(<span class="keywordtype">id</span>));
<a name="l00130"></a>00130 }
<a name="l00131"></a>00131 
<a name="l00132"></a>00132 
<a name="l00133"></a>00133 
<a name="l00134"></a>00134 <span class="comment">// Implementations of reading from and writing to a particular buffer</span>
<a name="l00135"></a>00135 ring_buffer_size_t AudioInterface::write(PaUtilRingBuffer *buf, <span class="keywordtype">signed</span> <span class="keywordtype">short</span> *source, ring_buffer_size_t numel, QString debugID){
<a name="l00136"></a>00136     <span class="keywordflow">if</span>( PaUtil_GetRingBufferWriteAvailable(buf) &gt;= static_cast&lt;ring_buffer_size_t&gt;(numel) ){ <span class="comment">// if there is enough room in the buffer</span>
<a name="l00137"></a>00137         <span class="keywordflow">return</span> PaUtil_WriteRingBuffer(buf,source,numel); <span class="comment">// write to it and return how much we wrote</span>
<a name="l00138"></a>00138     }
<a name="l00139"></a>00139     emit <a class="code" href="class_audio_interface.html#a5794aa6662df15c55e99177709ca9305" title="A Qt Signal for a general message interface.">message</a>(tr(<span class="stringliteral">&quot;AudioInterface: cannot write %1 samples to buffer (%2) - only %3 are available&quot;</span>).arg(QString::number(numel),debugID,QString::number(PaUtil_GetRingBufferWriteAvailable(buf))),<span class="keyword">true</span>);
<a name="l00140"></a>00140     <span class="keywordflow">return</span> 0; <span class="comment">// otherwise, say we didn&#39;t write anything</span>
<a name="l00141"></a>00141 }
<a name="l00142"></a>00142 
<a name="l00143"></a>00143 ring_buffer_size_t AudioInterface::read(PaUtilRingBuffer *buf, <span class="keywordtype">signed</span> <span class="keywordtype">short</span> *dest, ring_buffer_size_t numel){
<a name="l00144"></a>00144     ring_buffer_size_t avail = PaUtil_GetRingBufferReadAvailable(buf); <span class="comment">// check how much is available to read</span>
<a name="l00145"></a>00145     <span class="keywordflow">if</span>( avail &gt;= static_cast&lt;ring_buffer_size_t&gt;(numel) ){ <span class="comment">// if there is enough available from the buffer</span>
<a name="l00146"></a>00146         <span class="keywordflow">return</span> PaUtil_ReadRingBuffer(buf,dest,numel); <span class="comment">// read from it and return how much we read</span>
<a name="l00147"></a>00147     }
<a name="l00148"></a>00148     <span class="comment">// otherwise, read all that is available and return that number</span>
<a name="l00149"></a>00149     <span class="keywordflow">return</span> PaUtil_ReadRingBuffer(buf,dest,avail);
<a name="l00150"></a>00150 }
<a name="l00151"></a>00151 
<a name="l00152"></a>00152 
<a name="l00153"></a>00153 
<a name="l00154"></a>00154 
<a name="l00155"></a>00155 
<a name="l00156"></a>00156 <span class="comment">// Get information about how many channels are set up</span>
<a name="l00157"></a><a class="code" href="class_audio_interface.html#a9cee063cdbec8d17af8588b0486be515">00157</a> <span class="keywordtype">int</span> <a class="code" href="class_audio_interface.html#a9cee063cdbec8d17af8588b0486be515" title="Get the number of Capture channels.">AudioInterface::nChnCapture</a>(){ <span class="keywordflow">return</span> nCapture; }
<a name="l00158"></a><a class="code" href="class_audio_interface.html#a30e09099d70d0c10d23422db185b3f38">00158</a> <span class="keywordtype">int</span> <a class="code" href="class_audio_interface.html#a30e09099d70d0c10d23422db185b3f38" title="Get the number of Output channels.">AudioInterface::nChnOutput</a>(){ <span class="keywordflow">return</span> nOutput; }
<a name="l00159"></a>00159 
<a name="l00160"></a>00160 
<a name="l00161"></a>00161 
<a name="l00162"></a>00162 
<a name="l00163"></a>00163 
<a name="l00164"></a>00164 <span class="comment">// Functions for changing the number of channels</span>
<a name="l00165"></a>00165 
<a name="l00166"></a><a class="code" href="class_audio_interface.html#aee1478c637ec699b4a157f2fa407c1a3">00166</a> <span class="keywordtype">int</span> <a class="code" href="class_audio_interface.html#aee1478c637ec699b4a157f2fa407c1a3" title="Explicitly add a Capture channel.">AudioInterface::addChnCapture</a>(QString <span class="keywordtype">id</span>) {
<a name="l00167"></a>00167     <span class="keywordflow">if</span>(CaptureID.contains(<span class="keywordtype">id</span>)){
<a name="l00168"></a>00168         emit <a class="code" href="class_audio_interface.html#a5794aa6662df15c55e99177709ca9305" title="A Qt Signal for a general message interface.">message</a>(tr(<span class="stringliteral">&quot;Attempting to add a new channel for \&quot;%1\&quot;, but it already exists&quot;</span>).arg(<span class="keywordtype">id</span>),<span class="keyword">true</span>);
<a name="l00169"></a>00169         <span class="keywordflow">return</span>(nCapture);
<a name="l00170"></a>00170     }
<a name="l00171"></a>00171     bufDataCapture.append(QVector&lt;signed short&gt; (buffersize)); <span class="comment">// allocate memory for buffer</span>
<a name="l00172"></a>00172     bufCapture.resize(nCapture+1);
<a name="l00173"></a>00173     <span class="keywordflow">if</span>( PaUtil_InitializeRingBuffer(&amp;(bufCapture[nCapture]), <span class="keyword">sizeof</span>(<span class="keywordtype">signed</span> <span class="keywordtype">short</span>), buffersize, bufDataCapture[nCapture].data()) &lt; 0)
<a name="l00174"></a>00174     {
<a name="l00175"></a>00175         qDebug() &lt;&lt; <span class="stringliteral">&quot;AudioInterface: Input buffer &quot;</span> &lt;&lt; nCapture+1 &lt;&lt; <span class="stringliteral">&quot; not properly initialized to buffersize &quot;</span> &lt;&lt; buffersize;
<a name="l00176"></a>00176         bufCapture.resize(nCapture);
<a name="l00177"></a>00177         bufDataCapture.resize(nCapture);
<a name="l00178"></a>00178         <span class="keywordflow">return</span>(nCapture);
<a name="l00179"></a>00179     }
<a name="l00180"></a>00180     nCapture++;
<a name="l00181"></a>00181     CaptureID.append(<span class="keywordtype">id</span>);
<a name="l00182"></a>00182     qDebug() &lt;&lt; <span class="stringliteral">&quot;AudioInterface: Added capture channel &quot;</span> &lt;&lt; nCapture &lt;&lt; <span class="stringliteral">&quot; id: &quot;</span> &lt;&lt; id;
<a name="l00183"></a>00183     emit <a class="code" href="class_audio_interface.html#a30f885a2317f321556397e3c16db1bde" title="A Qt Signal emitted whenever a Capture channel is added.">chnCaptureAdded</a>(<span class="keywordtype">id</span>);
<a name="l00184"></a>00184     <span class="keywordflow">return</span>(nCapture);
<a name="l00185"></a>00185 }
<a name="l00186"></a>00186 
<a name="l00187"></a><a class="code" href="class_audio_interface.html#a404e29fbe189109a90d0038b94a70994">00187</a> <span class="keywordtype">int</span> <a class="code" href="class_audio_interface.html#a404e29fbe189109a90d0038b94a70994" title="Remove the last added Capture channel.">AudioInterface::rmChnCapture</a>(){
<a name="l00188"></a>00188     <span class="keywordflow">if</span>(nCapture&gt;0){
<a name="l00189"></a>00189         nCapture--;
<a name="l00190"></a>00190         QString <span class="keywordtype">id</span> = CaptureID[nCapture];
<a name="l00191"></a>00191         bufCapture.resize(nCapture);
<a name="l00192"></a>00192         bufDataCapture.resize(nCapture);
<a name="l00193"></a>00193         CaptureID.resize(nCapture);
<a name="l00194"></a>00194         qDebug() &lt;&lt; <span class="stringliteral">&quot;AudioInterface: removed capture channel (&quot;</span> &lt;&lt; nOutput &lt;&lt; <span class="stringliteral">&quot; channels left)&quot;</span>;
<a name="l00195"></a>00195         emit <a class="code" href="class_audio_interface.html#a71062397bdac1a2afb7f2e7192b8d2e3" title="A Qt Signal emitted whenever a Capture channel is removed.">chnCaptureRemoved</a>(<span class="keywordtype">id</span>);
<a name="l00196"></a>00196     }
<a name="l00197"></a>00197     <span class="keywordflow">return</span>(nCapture);
<a name="l00198"></a>00198 }
<a name="l00199"></a>00199 
<a name="l00200"></a><a class="code" href="class_audio_interface.html#a0d38fbf733e8555f95f4af9d23672a33">00200</a> <span class="keywordtype">int</span> <a class="code" href="class_audio_interface.html#a0d38fbf733e8555f95f4af9d23672a33" title="Explicitly add an Output channel.">AudioInterface::addChnOutput</a>(QString <span class="keywordtype">id</span>){
<a name="l00201"></a>00201     <span class="keywordflow">if</span>(OutputID.contains(<span class="keywordtype">id</span>)){
<a name="l00202"></a>00202         emit <a class="code" href="class_audio_interface.html#a5794aa6662df15c55e99177709ca9305" title="A Qt Signal for a general message interface.">message</a>(tr(<span class="stringliteral">&quot;Attempting to add a new channel for \&quot;%1\&quot;, but it already exists&quot;</span>).arg(<span class="keywordtype">id</span>),<span class="keyword">true</span>);
<a name="l00203"></a>00203         <span class="keywordflow">return</span>(nOutput);
<a name="l00204"></a>00204     }
<a name="l00205"></a>00205     bufDataOutput.append(QVector&lt;signed short&gt; (buffersize)); <span class="comment">// allocate memory for buffer</span>
<a name="l00206"></a>00206     bufOutput.resize(nOutput+1);
<a name="l00207"></a>00207     <span class="keywordflow">if</span>( PaUtil_InitializeRingBuffer(&amp;(bufOutput[nOutput]), <span class="keyword">sizeof</span>(<span class="keywordtype">signed</span> <span class="keywordtype">short</span>), buffersize, bufDataOutput[nOutput].data()) &lt; 0)
<a name="l00208"></a>00208     {
<a name="l00209"></a>00209         qDebug() &lt;&lt; <span class="stringliteral">&quot;AudioInterface: Output buffer &quot;</span> &lt;&lt; nOutput+1 &lt;&lt; <span class="stringliteral">&quot; not properly initialized to buffersize &quot;</span> &lt;&lt; buffersize;
<a name="l00210"></a>00210         bufDataOutput.resize(nOutput);
<a name="l00211"></a>00211         bufOutput.resize(nOutput);
<a name="l00212"></a>00212         <span class="keywordflow">return</span>(nOutput);
<a name="l00213"></a>00213     }
<a name="l00214"></a>00214     nOutput++;
<a name="l00215"></a>00215     OutputID.append(<span class="keywordtype">id</span>);
<a name="l00216"></a>00216     qDebug() &lt;&lt; <span class="stringliteral">&quot;AudioInterface: Added output channel &quot;</span> &lt;&lt; nOutput &lt;&lt; <span class="stringliteral">&quot; id: &quot;</span> &lt;&lt; id;
<a name="l00217"></a>00217     emit <a class="code" href="class_audio_interface.html#a8d80beb8357fedad2cbb672457ff1e90" title="A Qt Signal emitted whenever an Output channel is added.">chnOutAdded</a>(<span class="keywordtype">id</span>);
<a name="l00218"></a>00218     <span class="keywordflow">return</span>(nOutput);
<a name="l00219"></a>00219 }
<a name="l00220"></a>00220 
<a name="l00221"></a><a class="code" href="class_audio_interface.html#a1445e17d49590fd352ecc48779bb4b21">00221</a> <span class="keywordtype">int</span> <a class="code" href="class_audio_interface.html#a1445e17d49590fd352ecc48779bb4b21" title="Remove the last added Output channel.">AudioInterface::rmChnOutput</a>(){
<a name="l00222"></a>00222     <span class="keywordflow">if</span>(nOutput&gt;0){
<a name="l00223"></a>00223         nOutput--;
<a name="l00224"></a>00224         QString <span class="keywordtype">id</span> = OutputID[nOutput];
<a name="l00225"></a>00225         bufOutput.resize(nOutput);
<a name="l00226"></a>00226         bufDataOutput.resize(nOutput);
<a name="l00227"></a>00227         OutputID.resize(nOutput);
<a name="l00228"></a>00228         qDebug() &lt;&lt; <span class="stringliteral">&quot;AudioInterface: removed output channel (&quot;</span> &lt;&lt; nOutput &lt;&lt; <span class="stringliteral">&quot; channels left)&quot;</span>;
<a name="l00229"></a>00229         emit <a class="code" href="class_audio_interface.html#a17e1dd7847e2d093f7f7ecaa0e543892" title="A Qt Signal emitted whenever an Output channel is removed.">chnOutRemoved</a>(<span class="keywordtype">id</span>);
<a name="l00230"></a>00230     }
<a name="l00231"></a>00231     <span class="keywordflow">return</span>(nOutput);
<a name="l00232"></a>00232 }
<a name="l00233"></a>00233 
<a name="l00234"></a>00234 
<a name="l00235"></a>00235 
<a name="l00236"></a>00236 
<a name="l00237"></a>00237 
<a name="l00238"></a>00238 <span class="comment">// Functions for getting and setting particular ID&#39;s (Strings, just like BEAMING Scen GUID&#39;s). Obtaining channel index for a given index is also possible.</span>
<a name="l00239"></a><a class="code" href="class_audio_interface.html#a91e40a8c965ba6217312acc15ca08fc4">00239</a> QString <a class="code" href="class_audio_interface.html#a91e40a8c965ba6217312acc15ca08fc4" title="Get the ID associated to a particular Capture channel.">AudioInterface::captureID</a>(<span class="keywordtype">int</span> channel){
<a name="l00240"></a>00240     <span class="keywordflow">if</span>((channel&gt;nCapture-1)|(channel&lt;0))
<a name="l00241"></a>00241     {
<a name="l00242"></a>00242         emit <a class="code" href="class_audio_interface.html#a5794aa6662df15c55e99177709ca9305" title="A Qt Signal for a general message interface.">message</a>(tr(<span class="stringliteral">&quot;Attempting to get ID of capture channel %1, but only %2 are available (remember index starts at 0)&quot;</span>).arg(QString::number(channel),QString::number(nCapture)),<span class="keyword">true</span>);
<a name="l00243"></a>00243         <span class="keywordflow">return</span> QString();
<a name="l00244"></a>00244      }
<a name="l00245"></a>00245     <span class="keywordflow">return</span> CaptureID[channel];
<a name="l00246"></a>00246 }
<a name="l00247"></a>00247 
<a name="l00248"></a><a class="code" href="class_audio_interface.html#a56eb2962c98bc90da4b3f1fff44c8151">00248</a> QString <a class="code" href="class_audio_interface.html#a56eb2962c98bc90da4b3f1fff44c8151" title="Set the ID associated to a particular Capture channel.">AudioInterface::setCaptureID</a>(QString <span class="keywordtype">id</span>, <span class="keywordtype">int</span> channel){
<a name="l00249"></a>00249     <span class="keywordflow">if</span>( (channel&gt;nCapture-1)|(channel&lt;0) )
<a name="l00250"></a>00250     {
<a name="l00251"></a>00251         emit <a class="code" href="class_audio_interface.html#a5794aa6662df15c55e99177709ca9305" title="A Qt Signal for a general message interface.">message</a>(tr(<span class="stringliteral">&quot;Attempting to set ID of capture channel %1, but only %2 are available (remember index starts at 0)&quot;</span>).arg(QString::number(channel),QString::number(nCapture)),<span class="keyword">true</span>);
<a name="l00252"></a>00252         <span class="keywordflow">return</span> QString();
<a name="l00253"></a>00253     }
<a name="l00254"></a>00254     CaptureID[channel] = id;
<a name="l00255"></a>00255     <span class="keywordflow">return</span> CaptureID[channel];
<a name="l00256"></a>00256 }
<a name="l00257"></a>00257 
<a name="l00258"></a><a class="code" href="class_audio_interface.html#a7c22ce19f754d6db48ff679f09af567d">00258</a> <span class="keywordtype">int</span> <a class="code" href="class_audio_interface.html#a7c22ce19f754d6db48ff679f09af567d" title="Get the Capture channel index of a particular ID.">AudioInterface::indexFromCaptureID</a>(QString <span class="keywordtype">id</span>){
<a name="l00259"></a>00259     <span class="keywordflow">return</span> CaptureID.indexOf(<span class="keywordtype">id</span>);
<a name="l00260"></a>00260 }
<a name="l00261"></a>00261 
<a name="l00262"></a>00262 
<a name="l00263"></a><a class="code" href="class_audio_interface.html#ab91b9a3336a716ca6689da5e1411d57e">00263</a> QString <a class="code" href="class_audio_interface.html#ab91b9a3336a716ca6689da5e1411d57e" title="Get the ID associated to a particular Output channel.">AudioInterface::outputID</a>(<span class="keywordtype">int</span> channel){
<a name="l00264"></a>00264     <span class="keywordflow">if</span>((channel&gt;nOutput-1)|(channel&lt;0))
<a name="l00265"></a>00265     {
<a name="l00266"></a>00266         emit <a class="code" href="class_audio_interface.html#a5794aa6662df15c55e99177709ca9305" title="A Qt Signal for a general message interface.">message</a>(tr(<span class="stringliteral">&quot;Attempting to get ID of output channel %1, but only %2 are available (remember index starts at 0)&quot;</span>).arg(QString::number(channel),QString::number(nCapture)),<span class="keyword">true</span>);
<a name="l00267"></a>00267         <span class="keywordflow">return</span> QString();
<a name="l00268"></a>00268      }
<a name="l00269"></a>00269     <span class="keywordflow">return</span> OutputID[channel];
<a name="l00270"></a>00270 }
<a name="l00271"></a>00271 
<a name="l00272"></a><a class="code" href="class_audio_interface.html#a1c9136358c468eafadb86b0df52d8585">00272</a> QString <a class="code" href="class_audio_interface.html#a1c9136358c468eafadb86b0df52d8585" title="Set the ID associated to a particular Output channel.">AudioInterface::setOutputID</a>(QString <span class="keywordtype">id</span>, <span class="keywordtype">int</span> channel){
<a name="l00273"></a>00273     <span class="keywordflow">if</span>( (channel&gt;nOutput-1)|(channel&lt;0) )
<a name="l00274"></a>00274     {
<a name="l00275"></a>00275         emit <a class="code" href="class_audio_interface.html#a5794aa6662df15c55e99177709ca9305" title="A Qt Signal for a general message interface.">message</a>(tr(<span class="stringliteral">&quot;Attempting to set ID of output channel %1, but only %2 are available (remember index starts at 0)&quot;</span>).arg(QString::number(channel),QString::number(nCapture)),<span class="keyword">true</span>);
<a name="l00276"></a>00276         <span class="keywordflow">return</span> QString();
<a name="l00277"></a>00277     }
<a name="l00278"></a>00278     OutputID[channel] = id;
<a name="l00279"></a>00279     <span class="keywordflow">return</span> OutputID[channel];
<a name="l00280"></a>00280 }
<a name="l00281"></a>00281 
<a name="l00282"></a><a class="code" href="class_audio_interface.html#a06e0157bc58c97fd43deb148e6bf0515">00282</a> <span class="keywordtype">int</span> <a class="code" href="class_audio_interface.html#a06e0157bc58c97fd43deb148e6bf0515" title="Get the Output channel index of a particular ID.">AudioInterface::indexFromOutputID</a>(QString <span class="keywordtype">id</span>){
<a name="l00283"></a>00283     <span class="keywordflow">return</span> OutputID.indexOf(<span class="keywordtype">id</span>);
<a name="l00284"></a>00284 }
</pre></div></div>
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="audiointerface_8cpp.html">audiointerface.cpp</a>      </li>
      <li class="footer">Generated on Wed Dec 19 2012 00:54:12 for Beaming Audio by&#160;
<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.3 </li>
    </ul>
  </div>
<!--- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Defines</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>


</body>
</html>
