<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>Beaming Audio: Classes/rakserv.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript">
$(document).ready(initResizable);
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css"/>
</head>
<body onload='searchBox.OnSelectItem(0);'>
<!-- Generated by Doxygen 1.7.3 -->
<script type="text/javascript"><!--
var searchBox = new SearchBox("searchBox", "search",false,'Search');
--></script>
<div id="top">
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="BEAMING_LOGO2.jpg"></td>
  <td style="padding-left: 0.5em;">
   <div id="projectname">Beaming Audio&#160;<span id="projectnumber">0.9</span></div>
   <div id="projectbrief">Audio Client-Server for BEAMING</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.html"><span>Related&#160;Pages</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
      <li id="searchli">
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
      <li><a href="globals.html"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('rakserv_8cpp.html','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<h1>Classes/rakserv.cpp</h1>  </div>
</div>
<div class="contents">
<a href="rakserv_8cpp.html">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 
<a name="l00002"></a>00002 
<a name="l00003"></a>00003 
<a name="l00004"></a>00004 
<a name="l00005"></a>00005 
<a name="l00006"></a>00006 <span class="preprocessor">#include &quot;<a class="code" href="rakserv_8h.html" title="Defines the RakServ class containing the overall interface for controlling the Audio Server...">rakserv.h</a>&quot;</span>
<a name="l00007"></a>00007 <span class="preprocessor">#include &lt;RakNetworkFactory.h&gt;</span>
<a name="l00008"></a>00008 <span class="preprocessor">#include &quot;client.h&quot;</span> <span class="comment">//  From BEAMING svn: the netManager Client Library</span>
<a name="l00009"></a>00009 
<a name="l00010"></a>00010 <span class="comment">// constructor with initialization</span>
<a name="l00011"></a><a class="code" href="class_rak_serv.html#aa73c807b377d9a3ebea0e3d9b2a98d94">00011</a> <a class="code" href="class_rak_serv.html#aa73c807b377d9a3ebea0e3d9b2a98d94" title="Constructor of the class.">RakServ::RakServ</a>(QObject *parent) : QThread(parent),
<a name="l00012"></a>00012         bDoRun(false),
<a name="l00013"></a>00013         bSceneIsConnected(false)
<a name="l00014"></a>00014 {
<a name="l00015"></a>00015     <span class="comment">// setup RakNet interface class</span>
<a name="l00016"></a>00016     peer=RakNetworkFactory::GetRakPeerInterface();
<a name="l00017"></a>00017 }
<a name="l00018"></a>00018 
<a name="l00019"></a>00019 <span class="comment">// Destructor</span>
<a name="l00020"></a><a class="code" href="class_rak_serv.html#ac3162dd4b5f6ea01dde25850994cafb8">00020</a> <a class="code" href="class_rak_serv.html#ac3162dd4b5f6ea01dde25850994cafb8" title="Destructor.">RakServ::~RakServ</a>(){
<a name="l00021"></a>00021     <a class="code" href="class_rak_serv.html#af217795bed31c82f9f92f64d98e5c419" title="Stop the currently running server.">StopServer</a>(); <span class="comment">// properly shut down both scene and RakNet</span>
<a name="l00022"></a>00022 
<a name="l00023"></a>00023     <span class="comment">// destroy the RakNet interface setup on creation</span>
<a name="l00024"></a>00024     RakNetworkFactory::DestroyRakPeerInterface(peer);
<a name="l00025"></a>00025 }
<a name="l00026"></a>00026 
<a name="l00027"></a>00027 
<a name="l00028"></a>00028 
<a name="l00029"></a>00029 
<a name="l00030"></a><a class="code" href="class_rak_serv.html#ac57e6640a0622a2f9972ee40d49aa3e4">00030</a> <span class="keywordtype">bool</span> <a class="code" href="class_rak_serv.html#ac57e6640a0622a2f9972ee40d49aa3e4" title="Start the server.">RakServ::StartServer</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">short</span> maxconn, <span class="keywordtype">unsigned</span> <span class="keywordtype">short</span> port, QString publicAddress, QString sceneAddress, <span class="keywordtype">int</span> sceneport){
<a name="l00031"></a>00031     myAddr=publicAddress;
<a name="l00032"></a>00032     sceneAddr=sceneAddress;
<a name="l00033"></a>00033     scenePort=sceneport;
<a name="l00034"></a>00034     ConnPort=port;
<a name="l00035"></a>00035     SocketDescriptor socketDescriptor(port, 0);
<a name="l00036"></a>00036     bDoRun = peer-&gt;Startup(maxconn,5,&amp;socketDescriptor,1);
<a name="l00037"></a>00037     <span class="keywordflow">if</span>(bDoRun){
<a name="l00038"></a>00038         peer-&gt;SetMaximumIncomingConnections(maxconn);
<a name="l00039"></a>00039         peer-&gt;SetTimeoutTime(peer-&gt;GetTimeoutTime(UNASSIGNED_SYSTEM_ADDRESS)/10,UNASSIGNED_SYSTEM_ADDRESS);
<a name="l00040"></a>00040         start();
<a name="l00041"></a>00041         <a class="code" href="class_rak_serv.html#afbb9fa516f8722fcf64d56e24af7c8d1" title="A Qt Signal for a general message interface.">message</a>(tr(<span class="stringliteral">&quot;Server started on port %1&quot;</span>).arg(QString::number(port)),<span class="keyword">false</span>);
<a name="l00042"></a>00042     } <span class="keywordflow">else</span> {
<a name="l00043"></a>00043         <a class="code" href="class_rak_serv.html#afbb9fa516f8722fcf64d56e24af7c8d1" title="A Qt Signal for a general message interface.">message</a>(tr(<span class="stringliteral">&quot;Server failed to start...&quot;</span>),<span class="keyword">true</span>);
<a name="l00044"></a>00044     }
<a name="l00045"></a>00045     <span class="keywordflow">return</span> bDoRun;
<a name="l00046"></a>00046 }
<a name="l00047"></a>00047 
<a name="l00048"></a>00048 <span class="keywordtype">void</span> RakServ::run(){ <span class="comment">// QThread overload</span>
<a name="l00049"></a>00049     <span class="comment">// attempt to connect to scene and publish info before starting the audio loop.</span>
<a name="l00050"></a>00050     <span class="keywordflow">if</span>( (!bSceneIsConnected) &amp; (!sceneAddr.isEmpty()) &amp; (scenePort&gt;0) &amp; (!myAddr.isEmpty()) ){
<a name="l00051"></a>00051         <span class="keywordtype">char</span> name[]=<span class="stringliteral">&quot;AAUServer&quot;</span>, type[]=<span class="stringliteral">&quot;AUDIO&quot;</span>, config[]=<span class="stringliteral">&quot;&quot;</span>, <span class="keywordtype">id</span>[]=<span class="stringliteral">&quot;audio1&quot;</span>;
<a name="l00052"></a>00052         bSceneIsConnected = startclient(sceneAddr.toAscii().data(),scenePort,name,type,config,<span class="keyword">false</span>); <span class="comment">// Connect to the scene with reliable and 50 ms update rate (basically, we only want to publish our own data once</span>
<a name="l00053"></a>00053         <span class="keywordflow">if</span>(bSceneIsConnected){
<a name="l00054"></a>00054             msleep(5000); <span class="comment">// wait for a while to allow replication af scene to local cache</span>
<a name="l00055"></a>00055             check(); <span class="comment">// make sure we have recent data</span>
<a name="l00056"></a>00056             addNode(<span class="keywordtype">id</span>,type);
<a name="l00057"></a>00057             updateAudioNodes(<span class="keywordtype">id</span>,myAddr.toAscii().data(),ConnPort, (myAddr+QString(<span class="stringliteral">&quot;:&quot;</span>)+QString::number(ConnPort)).toAscii().data(),QString::number(ConnPort).toAscii().data()); <span class="comment">// temporary fix on scene bug: duplicate info</span>
<a name="l00058"></a>00058             msleep(100);
<a name="l00059"></a>00059             check(); <span class="comment">// make sure we have recent data</span>
<a name="l00060"></a>00060             emit <a class="code" href="class_rak_serv.html#afbb9fa516f8722fcf64d56e24af7c8d1" title="A Qt Signal for a general message interface.">message</a>(tr(<span class="stringliteral">&quot;Successfully connected to BEAMING Scene on %1:%2 - Audio Server published as %3:%4&quot;</span>).arg(sceneAddr,QString::number(scenePort),myAddr,QString::number(ConnPort)),0);
<a name="l00061"></a>00061         }
<a name="l00062"></a>00062 
<a name="l00063"></a>00063     }
<a name="l00064"></a>00064     <span class="comment">// Main receiving loop</span>
<a name="l00065"></a>00065     <span class="keywordflow">while</span> (bDoRun) {
<a name="l00066"></a>00066        receivePacket();
<a name="l00067"></a>00067        usleep(1000); <span class="comment">// maximum 1 ms between handling packets</span>
<a name="l00068"></a>00068     }
<a name="l00071"></a>00071 }
<a name="l00072"></a>00072 
<a name="l00073"></a>00073 <span class="keywordtype">void</span> RakServ::receivePacket(){
<a name="l00074"></a>00074     Packet *p=peer-&gt;Receive();
<a name="l00075"></a>00075     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> off=0;
<a name="l00076"></a>00076 
<a name="l00077"></a>00077     <span class="keywordflow">while</span> (p) {
<a name="l00078"></a>00078         <span class="keywordflow">switch</span> (p-&gt;data[0]) {
<a name="l00079"></a>00079             <span class="keywordflow">case</span> ID_CONNECTION_LOST: <span class="comment">// RakPeer - Reliable packets cannot be delivered to the system specified in Packet::systemAddress. The connection to that system has been closed.</span>
<a name="l00080"></a>00080                 emit <a class="code" href="class_rak_serv.html#afbb9fa516f8722fcf64d56e24af7c8d1" title="A Qt Signal for a general message interface.">message</a>(tr(<span class="stringliteral">&quot;The connection to %1 is lost&quot;</span>).arg(p-&gt;systemAddress.ToString(<span class="keyword">true</span>)),1);
<a name="l00081"></a>00081                 removeClient(p-&gt;guid);
<a name="l00082"></a>00082                 <span class="keywordflow">break</span>;
<a name="l00083"></a>00083             <span class="keywordflow">case</span> ID_DISCONNECTION_NOTIFICATION: <span class="comment">// RakPeer - The system specified in Packet::systemAddress has disconnected from us. For the client, this would mean the server has shutdown.</span>
<a name="l00084"></a>00084                 emit <a class="code" href="class_rak_serv.html#afbb9fa516f8722fcf64d56e24af7c8d1" title="A Qt Signal for a general message interface.">message</a>(tr(<span class="stringliteral">&quot;%1 has disconnected&quot;</span>).arg(p-&gt;systemAddress.ToString(<span class="keyword">true</span>)),1);
<a name="l00085"></a>00085                 removeClient(p-&gt;guid);
<a name="l00086"></a>00086                 <span class="keywordflow">break</span>;
<a name="l00087"></a>00087             <span class="keywordflow">case</span> ID_MODIFIED_PACKET: <span class="comment">// RakPeer - A packet has been tampered with in transit. The sender is contained in Packet::systemAddress.</span>
<a name="l00088"></a>00088                 emit <a class="code" href="class_rak_serv.html#afbb9fa516f8722fcf64d56e24af7c8d1" title="A Qt Signal for a general message interface.">message</a>(tr(<span class="stringliteral">&quot;The packet has been tampered with in transit&quot;</span>),1); <span class="comment">// SKO has never seen this using his LAN</span>
<a name="l00089"></a>00089                 <span class="keywordflow">break</span>;
<a name="l00090"></a>00090             <span class="keywordflow">case</span> ID_NEW_INCOMING_CONNECTION:
<a name="l00091"></a>00091                 emit <a class="code" href="class_rak_serv.html#afbb9fa516f8722fcf64d56e24af7c8d1" title="A Qt Signal for a general message interface.">message</a>(tr(<span class="stringliteral">&quot;Incoming connection from %1&quot;</span>).arg(p-&gt;systemAddress.ToString(<span class="keyword">true</span>)),0);
<a name="l00092"></a>00092                 <span class="keywordflow">break</span>;
<a name="l00093"></a>00093             <span class="keywordflow">case</span> <a class="code" href="rakinfo_8h.html#a89d6c6b7b4358189be5c421d8ced50cea944ec816a7f2f69b4d323b8d95488702">ID_AAU_CLIENTTYPE</a>: <span class="comment">// Our own personal ID&#39;s</span>
<a name="l00094"></a>00094                 <span class="comment">// Add user as visitor/avatar or kick</span>
<a name="l00095"></a>00095                 emit <a class="code" href="class_rak_serv.html#afbb9fa516f8722fcf64d56e24af7c8d1" title="A Qt Signal for a general message interface.">message</a>(tr(<span class="stringliteral">&quot;%1 Identifies %2 type with the name \&quot;%3\&quot;&quot;</span>).arg(p-&gt;systemAddress.ToString(<span class="keyword">true</span>),tr(<a class="code" href="rakinfo_8h.html#a7e898d6e6f8e4ee4dc0de97ec6ca3138">ClientTypeTextArticle</a>[p-&gt;data[1]]),QString::fromAscii((<span class="keywordtype">char</span>*)p-&gt;data+2)),0);
<a name="l00096"></a>00096                 off=2;
<a name="l00097"></a>00097                 <span class="keywordflow">while</span>(off &lt; p-&gt;length){
<a name="l00098"></a>00098                     emit <a class="code" href="class_rak_serv.html#afbb9fa516f8722fcf64d56e24af7c8d1" title="A Qt Signal for a general message interface.">message</a>(tr(<span class="stringliteral">&quot;Debug: name \&quot;%1\&quot; - datalen: %2 - qstrlen: %3 - offset: %4&quot;</span>).arg(QString::fromAscii((<span class="keywordtype">char</span>*)p-&gt;data+off),QString::number(p-&gt;length),QString::number(qstrlen((<span class="keywordtype">char</span>*)(p-&gt;data+off))),QString::number(off)),0);
<a name="l00099"></a>00099                     off=off+qstrlen((<span class="keywordtype">char</span>*)(p-&gt;data+off))+1;
<a name="l00100"></a>00100                 }
<a name="l00101"></a>00101 
<a name="l00102"></a>00102                 addClient(p-&gt;guid,(<a class="code" href="rakinfo_8h.html#a3c17bff6fe46b8320aaff27c1fbac19c" title="tClientType is an enum for defining our internal (audio) client types">tClientType</a>)p-&gt;data[1], QString::fromAscii((<span class="keywordtype">char</span>*)p-&gt;data+2));
<a name="l00103"></a>00103                 <span class="keywordflow">break</span>;
<a name="l00104"></a>00104             <span class="keywordflow">case</span> <a class="code" href="rakinfo_8h.html#a89d6c6b7b4358189be5c421d8ced50ceaf2efb077e05044fb869e868c542b3e3d" title="The Audio packet type is used when the transmitted data is audio.">ID_AAU_AUDIO</a>:
<a name="l00105"></a>00105                 <span class="comment">// relay audio according to the relevant types</span>
<a name="l00106"></a>00106                 <span class="comment">// First routing: proxy input takes priority over rest</span>
<a name="l00107"></a>00107                 <span class="keywordflow">if</span>(proxies.contains(p-&gt;guid.ToString())){
<a name="l00108"></a>00108                     <span class="comment">// proxies send to:</span>
<a name="l00109"></a>00109                     <span class="comment">// - all visitors except the &quot;replaced&quot; one</span>
<a name="l00110"></a>00110                     <span class="comment">//   - except if a proxy is attached to the individual visitor - in that case send to the proxy intead</span>
<a name="l00111"></a>00111                     <span class="comment">// - avatar of the visitor that is &quot;replaced&quot; (otherID)</span>
<a name="l00112"></a>00112                     <span class="comment">// - all AR_Locals</span>
<a name="l00113"></a>00113                     <span class="comment">// - all single listeners (applies to all types - implemented in bottom)</span>
<a name="l00114"></a>00114                     <span class="comment">// - all spectators (applies to all types - implemented in bottom)</span>
<a name="l00115"></a>00115                     QHash&lt;QString,tClientInfo&gt;::const_iterator i = visitors.constBegin();
<a name="l00116"></a>00116                     <span class="keywordflow">while</span>(i != visitors.constEnd()){ <span class="comment">// loop through visitors</span>
<a name="l00117"></a>00117                         <span class="keywordflow">if</span>(i.value().id==proxies.value(p-&gt;guid.ToString()).otherId){ <span class="comment">// special case to send to avatar of the connected visitor</span>
<a name="l00118"></a>00118                             peer-&gt;Send((<span class="keyword">const</span> <span class="keywordtype">char</span>*)p-&gt;data,p-&gt;length,HIGH_PRIORITY,UNRELIABLE_SEQUENCED,0,i.value().otherId,<span class="keyword">false</span>);
<a name="l00119"></a>00119                         } <span class="keywordflow">else</span> <span class="keywordflow">if</span>(proxyScene.contains(i.value().name)){ <span class="comment">// test if a proxy &quot;owns&quot; this visitor</span>
<a name="l00120"></a>00120                             peer-&gt;Send((<span class="keyword">const</span> <span class="keywordtype">char</span>*)p-&gt;data,p-&gt;length,HIGH_PRIORITY,UNRELIABLE_SEQUENCED,0,proxies.value(proxyScene.value(i.value().name)).id,<span class="keyword">false</span>);
<a name="l00121"></a>00121                         } <span class="keywordflow">else</span> {
<a name="l00122"></a>00122                             peer-&gt;Send((<span class="keyword">const</span> <span class="keywordtype">char</span>*)p-&gt;data,p-&gt;length,HIGH_PRIORITY,UNRELIABLE_SEQUENCED,0,i.value().id,<span class="keyword">false</span>);
<a name="l00123"></a>00123                         }
<a name="l00124"></a>00124                         ++i;
<a name="l00125"></a>00125                     }
<a name="l00126"></a>00126                     i=arLocals.constBegin();
<a name="l00127"></a>00127                     <span class="keywordflow">while</span>(i!=arLocals.constEnd()){ <span class="comment">// loop through AR-Locals</span>
<a name="l00128"></a>00128                         peer-&gt;Send((<span class="keyword">const</span> <span class="keywordtype">char</span>*)p-&gt;data,p-&gt;length,HIGH_PRIORITY,UNRELIABLE_SEQUENCED,0,i.value().id,<span class="keyword">false</span>);
<a name="l00129"></a>00129                         ++i;
<a name="l00130"></a>00130                     }
<a name="l00131"></a>00131                 } <span class="keywordflow">else</span> <span class="keywordflow">if</span>((visitors.contains(p-&gt;guid.ToString()))&amp;(!proxyScene.contains(visitors.value(p-&gt;guid.ToString()).name))){
<a name="l00132"></a>00132                     <span class="comment">// visitors send to:</span>
<a name="l00133"></a>00133                     <span class="comment">// - all visitors except itself</span>
<a name="l00134"></a>00134                     <span class="comment">//   - except if a proxy is attached - in that case send to the proxy intead</span>
<a name="l00135"></a>00135                     <span class="comment">// - avatar of itself</span>
<a name="l00136"></a>00136                     <span class="comment">// - all AR_Locals</span>
<a name="l00137"></a>00137                     <span class="comment">// - all single listeners (applies to all types - implemented in bottom)</span>
<a name="l00138"></a>00138                     <span class="comment">// - all spectators (applies to all types - implemented in bottom)</span>
<a name="l00139"></a>00139                     QHash&lt;QString,tClientInfo&gt;::const_iterator i = visitors.constBegin();
<a name="l00140"></a>00140                     <span class="keywordflow">while</span>(i != visitors.constEnd()){ <span class="comment">// loop through visitors</span>
<a name="l00141"></a>00141                         <span class="keywordflow">if</span>(i.value().id==p-&gt;guid){ <span class="comment">// special case to send to connected avatar</span>
<a name="l00142"></a>00142                             peer-&gt;Send((<span class="keyword">const</span> <span class="keywordtype">char</span>*)p-&gt;data,p-&gt;length,HIGH_PRIORITY,UNRELIABLE_SEQUENCED,0,i.value().otherId,<span class="keyword">false</span>);
<a name="l00143"></a>00143                         } <span class="keywordflow">else</span> <span class="keywordflow">if</span>(proxyScene.contains(i.value().name)){ <span class="comment">// test if a proxy &quot;owns&quot; this visitor</span>
<a name="l00144"></a>00144                             peer-&gt;Send((<span class="keyword">const</span> <span class="keywordtype">char</span>*)p-&gt;data,p-&gt;length,HIGH_PRIORITY,UNRELIABLE_SEQUENCED,0,proxies.value(proxyScene.value(i.value().name)).id,<span class="keyword">false</span>);
<a name="l00145"></a>00145                         } <span class="keywordflow">else</span> {
<a name="l00146"></a>00146                             peer-&gt;Send((<span class="keyword">const</span> <span class="keywordtype">char</span>*)p-&gt;data,p-&gt;length,HIGH_PRIORITY,UNRELIABLE_SEQUENCED,0,i.value().id,<span class="keyword">false</span>);
<a name="l00147"></a>00147                         }
<a name="l00148"></a>00148                         ++i;
<a name="l00149"></a>00149                     }
<a name="l00150"></a>00150                     i=arLocals.constBegin();
<a name="l00151"></a>00151                     <span class="keywordflow">while</span>(i!=arLocals.constEnd()){ <span class="comment">// loop through AR-Locals</span>
<a name="l00152"></a>00152                         peer-&gt;Send((<span class="keyword">const</span> <span class="keywordtype">char</span>*)p-&gt;data,p-&gt;length,HIGH_PRIORITY,UNRELIABLE_SEQUENCED,0,i.value().id,<span class="keyword">false</span>);
<a name="l00153"></a>00153                         ++i;
<a name="l00154"></a>00154                     }
<a name="l00155"></a>00155                 } <span class="keywordflow">else</span> <span class="keywordflow">if</span>( (locals.contains(p-&gt;guid.ToString())) | (arLocals.contains(p-&gt;guid.ToString())) | (customs.contains(p-&gt;guid.ToString())) ){
<a name="l00156"></a>00156                     <span class="comment">// Locals, AR-Locals and Custom types all send to:</span>
<a name="l00157"></a>00157                     <span class="comment">// - All visitors</span>
<a name="l00158"></a>00158                     <span class="comment">//   - except if a proxy is attached - in that case send to the proxy intead</span>
<a name="l00159"></a>00159                     <span class="comment">// - all single listeners (applies to all types - implemented in bottom)</span>
<a name="l00160"></a>00160                     <span class="comment">// - all spectators (applies to all types - implemented in bottom)</span>
<a name="l00161"></a>00161                     QHash&lt;QString,tClientInfo&gt;::const_iterator i = visitors.constBegin();
<a name="l00162"></a>00162                     <span class="keywordflow">while</span>(i != visitors.constEnd()){ <span class="comment">// loop through visitors</span>
<a name="l00163"></a>00163                         <span class="keywordflow">if</span>(proxyScene.contains(i.value().name)){ <span class="comment">// test if a proxy &quot;owns&quot; this visitor</span>
<a name="l00164"></a>00164                             peer-&gt;Send((<span class="keyword">const</span> <span class="keywordtype">char</span>*)p-&gt;data,p-&gt;length,HIGH_PRIORITY,UNRELIABLE_SEQUENCED,0,proxies.value(proxyScene.value(i.value().name)).id,<span class="keyword">false</span>);
<a name="l00165"></a>00165                         } <span class="keywordflow">else</span> {
<a name="l00166"></a>00166                             peer-&gt;Send((<span class="keyword">const</span> <span class="keywordtype">char</span>*)p-&gt;data,p-&gt;length,HIGH_PRIORITY,UNRELIABLE_SEQUENCED,0,i.value().id,<span class="keyword">false</span>);
<a name="l00167"></a>00167                         }
<a name="l00168"></a>00168                         ++i;
<a name="l00169"></a>00169                     }
<a name="l00170"></a>00170                 }
<a name="l00171"></a>00171 
<a name="l00172"></a>00172                 <span class="comment">// Handle listeners and spectators separately from the rest as it applies to all audio that is streamed</span>
<a name="l00173"></a>00173                 <span class="keywordflow">if</span>(listeners.size()&gt;0){
<a name="l00174"></a>00174                     QString sceneID = QString::fromAscii((<span class="keywordtype">char</span>*)p-&gt;data+1);
<a name="l00175"></a>00175                     QMultiHash&lt;QString, QString&gt;::iterator i = listenerScene.find(sceneID);
<a name="l00176"></a>00176                      <span class="keywordflow">while</span> (i != listenerScene.end() &amp;&amp; i.key() == sceneID) {
<a name="l00177"></a>00177                          peer-&gt;Send((<span class="keyword">const</span> <span class="keywordtype">char</span>*)p-&gt;data,p-&gt;length,HIGH_PRIORITY,UNRELIABLE_SEQUENCED,0,listeners.value(i.value()).<span class="keywordtype">id</span>,<span class="keyword">false</span>);
<a name="l00178"></a>00178                          ++i;
<a name="l00179"></a>00179                      }
<a name="l00180"></a>00180                 }
<a name="l00181"></a>00181                 <span class="keywordflow">if</span>(spectators.size()&gt;0){
<a name="l00182"></a>00182                     QHash&lt;QString,tClientInfo&gt;::const_iterator i = spectators.constBegin();
<a name="l00183"></a>00183                      <span class="keywordflow">while</span> (i != spectators.constEnd()) {
<a name="l00184"></a>00184                          peer-&gt;Send((<span class="keyword">const</span> <span class="keywordtype">char</span>*)p-&gt;data,p-&gt;length,HIGH_PRIORITY,UNRELIABLE_SEQUENCED,0,i.value().id,<span class="keyword">false</span>);
<a name="l00185"></a>00185                          ++i;
<a name="l00186"></a>00186                      }
<a name="l00187"></a>00187                 }
<a name="l00188"></a>00188                 <span class="keywordflow">break</span>;
<a name="l00189"></a>00189             <span class="keywordflow">default</span>:
<a name="l00190"></a>00190                 emit <a class="code" href="class_rak_serv.html#afbb9fa516f8722fcf64d56e24af7c8d1" title="A Qt Signal for a general message interface.">message</a>(tr(<span class="stringliteral">&quot;Unknown Raknet ID: %1&quot;</span>).arg((<span class="keywordtype">int</span>)p-&gt;data[0]),1);
<a name="l00191"></a>00191                 <span class="keywordflow">break</span>;
<a name="l00192"></a>00192         }
<a name="l00193"></a>00193 
<a name="l00194"></a>00194 
<a name="l00195"></a>00195         <span class="comment">// Done with the packet handling, so we are safe to remove the message</span>
<a name="l00196"></a>00196         <span class="comment">// NOTE: We should make sure we really are done using it before doing this!</span>
<a name="l00197"></a>00197         <span class="comment">// The only issue will probably be when getting user data, where further handling (outside class) is needed</span>
<a name="l00198"></a>00198         peer-&gt;DeallocatePacket(p);
<a name="l00199"></a>00199         p=peer-&gt;Receive(); <span class="comment">// read next packet</span>
<a name="l00200"></a>00200      }
<a name="l00201"></a>00201 }
<a name="l00202"></a>00202 
<a name="l00203"></a>00203 
<a name="l00204"></a>00204 <span class="keywordtype">void</span> RakServ::addClient(RakNetGUID guid, <a class="code" href="rakinfo_8h.html#a3c17bff6fe46b8320aaff27c1fbac19c" title="tClientType is an enum for defining our internal (audio) client types">tClientType</a> type, QString name){
<a name="l00205"></a>00205     tClientInfo tmp;
<a name="l00206"></a>00206     tmp.id=guid;
<a name="l00207"></a>00207     tmp.name=name;
<a name="l00208"></a>00208     tmp.type=type;
<a name="l00209"></a>00209     <span class="keywordflow">switch</span>(type) {
<a name="l00210"></a>00210     <span class="keywordflow">case</span> <a class="code" href="rakinfo_8h.html#a3c17bff6fe46b8320aaff27c1fbac19ca87fd49d0542fa58a1d282e2d02537511">AUDIO_VISITOR</a>:
<a name="l00211"></a>00211         <span class="keywordflow">if</span>(!visitorScene.contains(name)){ <span class="comment">// test if equal name/sceneGUID as other visitor</span>
<a name="l00212"></a>00212             <span class="keywordflow">if</span>(avatarOther.contains(UNASSIGNED_RAKNET_GUID.ToString())){ <span class="comment">// test if a free Avatar exist</span>
<a name="l00213"></a>00213                 tmp.otherId.FromString(avatarOther.take(UNASSIGNED_RAKNET_GUID.ToString()).toAscii().data()); <span class="comment">// take the first available avatar as otherId of this visitor (just GUID from reverse lookup)</span>
<a name="l00214"></a>00214                 avatarOther.insert(tmp.id.ToString(),tmp.otherId.ToString()); <span class="comment">// reinsert in the reverse Avatar lookup at the right place (no longer unassigned)</span>
<a name="l00215"></a>00215                 avatars[tmp.otherId.ToString()].otherId=tmp.id; <span class="comment">// make this one the &quot;other&quot; of the Avatar</span>
<a name="l00216"></a>00216                 emit <a class="code" href="class_rak_serv.html#afbb9fa516f8722fcf64d56e24af7c8d1" title="A Qt Signal for a general message interface.">message</a>(tr(<span class="stringliteral">&quot;connected %1(%2) as other of %3(%4)&quot;</span>).arg(name,<a class="code" href="rakinfo_8h.html#afcf889820a49d13605ea469a5799b4e3">ClientTypeText</a>[type],avatars[tmp.otherId.ToString()].name,<a class="code" href="rakinfo_8h.html#afcf889820a49d13605ea469a5799b4e3">ClientTypeText</a>[avatars[tmp.otherId.ToString()].type]));
<a name="l00217"></a>00217             }
<a name="l00218"></a>00218             visitors.insert(guid.ToString(),tmp);
<a name="l00219"></a>00219             visitorScene.insert(name,guid.ToString()); <span class="comment">// update Visitor reverse lookup from Scene</span>
<a name="l00220"></a>00220             visitorOther.insert(tmp.otherId.ToString(),guid.ToString()); <span class="comment">// update Visitor reverse lookup from otherId</span>
<a name="l00221"></a>00221             emit <a class="code" href="class_rak_serv.html#a7247b83301c66e974172f39f34fca90f" title="a Qt Signal emitted when a client changes status">clientInfo</a>(<span class="keyword">true</span>, (<span class="keywordtype">int</span>) type, name, QString::fromAscii(guid.ToString()));
<a name="l00222"></a>00222             emit <a class="code" href="class_rak_serv.html#afbb9fa516f8722fcf64d56e24af7c8d1" title="A Qt Signal for a general message interface.">message</a>(tr(<span class="stringliteral">&quot;New %1&quot;</span>).arg(<a class="code" href="rakinfo_8h.html#afcf889820a49d13605ea469a5799b4e3">ClientTypeText</a>[type]),<span class="keyword">false</span>);
<a name="l00223"></a>00223         } <span class="keywordflow">else</span> {
<a name="l00224"></a>00224             peer-&gt;CloseConnection(peer-&gt;GetSystemAddressFromGuid(guid),<span class="keyword">true</span>);
<a name="l00225"></a>00225         }
<a name="l00226"></a>00226         <span class="keywordflow">break</span>;
<a name="l00227"></a>00227     <span class="keywordflow">case</span> <a class="code" href="rakinfo_8h.html#a3c17bff6fe46b8320aaff27c1fbac19ca3659746e6afa35c80147e5aecf362b76">AUDIO_AVATAR</a>:
<a name="l00228"></a>00228         <span class="keywordflow">if</span>(!avatarName.contains(name)){ <span class="comment">// test if equal name/sceneGUID as other avatar</span>
<a name="l00229"></a>00229             <span class="keywordflow">if</span>(visitorOther.contains(UNASSIGNED_RAKNET_GUID.ToString())){ <span class="comment">// test if a free Visitor exist</span>
<a name="l00230"></a>00230                 tmp.otherId.FromString(visitorOther.take(UNASSIGNED_RAKNET_GUID.ToString()).toAscii().data()); <span class="comment">// take the first available visitor (just GUID from reverse lookup)</span>
<a name="l00231"></a>00231                 visitorOther.insert(tmp.id.ToString(),tmp.otherId.ToString()); <span class="comment">// reinsert in the reverse Visitor lookup</span>
<a name="l00232"></a>00232                 visitors[tmp.otherId.ToString()].otherId=tmp.id; <span class="comment">// make this one the &quot;other&quot; of the Visitor</span>
<a name="l00233"></a>00233                 emit <a class="code" href="class_rak_serv.html#afbb9fa516f8722fcf64d56e24af7c8d1" title="A Qt Signal for a general message interface.">message</a>(tr(<span class="stringliteral">&quot;connected %1(%2) as other of %3(%4)&quot;</span>).arg(name,<a class="code" href="rakinfo_8h.html#afcf889820a49d13605ea469a5799b4e3">ClientTypeText</a>[type],visitors[tmp.otherId.ToString()].name,<a class="code" href="rakinfo_8h.html#afcf889820a49d13605ea469a5799b4e3">ClientTypeText</a>[visitors[tmp.otherId.ToString()].type]));
<a name="l00234"></a>00234             }
<a name="l00235"></a>00235             avatars.insert(guid.ToString(),tmp);
<a name="l00236"></a>00236             avatarName.insert(name,guid.ToString()); <span class="comment">// update Avatar reverse lookup from name</span>
<a name="l00237"></a>00237             avatarOther.insert(tmp.otherId.ToString(),guid.ToString()); <span class="comment">// update Avatar reverse lookup from otherId</span>
<a name="l00238"></a>00238             emit <a class="code" href="class_rak_serv.html#a7247b83301c66e974172f39f34fca90f" title="a Qt Signal emitted when a client changes status">clientInfo</a>(<span class="keyword">true</span>, (<span class="keywordtype">int</span>) type, name, QString::fromAscii(guid.ToString()));
<a name="l00239"></a>00239             emit <a class="code" href="class_rak_serv.html#afbb9fa516f8722fcf64d56e24af7c8d1" title="A Qt Signal for a general message interface.">message</a>(tr(<span class="stringliteral">&quot;New %1&quot;</span>).arg(<a class="code" href="rakinfo_8h.html#afcf889820a49d13605ea469a5799b4e3">ClientTypeText</a>[type]),<span class="keyword">false</span>);
<a name="l00240"></a>00240         } <span class="keywordflow">else</span> {
<a name="l00241"></a>00241             peer-&gt;CloseConnection(peer-&gt;GetSystemAddressFromGuid(guid),<span class="keyword">true</span>);
<a name="l00242"></a>00242         }
<a name="l00243"></a>00243         <span class="keywordflow">break</span>;
<a name="l00244"></a>00244     <span class="keywordflow">case</span> <a class="code" href="rakinfo_8h.html#a3c17bff6fe46b8320aaff27c1fbac19caab0b4e85be005591a8e5470c96699c86">AUDIO_LOCAL</a>:
<a name="l00245"></a>00245         <span class="keywordflow">if</span>(!localName.contains(name)){ <span class="comment">// test if equal name/sceneGUID as other local</span>
<a name="l00246"></a>00246             locals.insert(guid.ToString(),tmp);
<a name="l00247"></a>00247             localName.insert(name,guid.ToString()); <span class="comment">// update Local reverse lookup from name</span>
<a name="l00248"></a>00248             emit <a class="code" href="class_rak_serv.html#a7247b83301c66e974172f39f34fca90f" title="a Qt Signal emitted when a client changes status">clientInfo</a>(<span class="keyword">true</span>, (<span class="keywordtype">int</span>) type, name, QString::fromAscii(guid.ToString()));
<a name="l00249"></a>00249             emit <a class="code" href="class_rak_serv.html#afbb9fa516f8722fcf64d56e24af7c8d1" title="A Qt Signal for a general message interface.">message</a>(tr(<span class="stringliteral">&quot;New %1&quot;</span>).arg(<a class="code" href="rakinfo_8h.html#afcf889820a49d13605ea469a5799b4e3">ClientTypeText</a>[type]),<span class="keyword">false</span>);
<a name="l00250"></a>00250         } <span class="keywordflow">else</span> {
<a name="l00251"></a>00251             peer-&gt;CloseConnection(peer-&gt;GetSystemAddressFromGuid(guid),<span class="keyword">true</span>);
<a name="l00252"></a>00252         }
<a name="l00253"></a>00253         <span class="keywordflow">break</span>;
<a name="l00254"></a>00254     <span class="keywordflow">case</span> <a class="code" href="rakinfo_8h.html#a3c17bff6fe46b8320aaff27c1fbac19ca2e394db8fadb9012b09142a0de7ffcef">AUDIO_AR_LOCAL</a>:
<a name="l00255"></a>00255         <span class="keywordflow">if</span>(!arLocalScene.contains(name)){ <span class="comment">// test if equal name/sceneGUID as other AR-local</span>
<a name="l00256"></a>00256             arLocals.insert(guid.ToString(),tmp);
<a name="l00257"></a>00257             arLocalScene.insert(name,guid.ToString()); <span class="comment">// update AR-Local reverse lookup from scene GUID</span>
<a name="l00258"></a>00258             emit <a class="code" href="class_rak_serv.html#a7247b83301c66e974172f39f34fca90f" title="a Qt Signal emitted when a client changes status">clientInfo</a>(<span class="keyword">true</span>, (<span class="keywordtype">int</span>) type, name, QString::fromAscii(guid.ToString()));
<a name="l00259"></a>00259             emit <a class="code" href="class_rak_serv.html#afbb9fa516f8722fcf64d56e24af7c8d1" title="A Qt Signal for a general message interface.">message</a>(tr(<span class="stringliteral">&quot;New %1&quot;</span>).arg(<a class="code" href="rakinfo_8h.html#afcf889820a49d13605ea469a5799b4e3">ClientTypeText</a>[type]),<span class="keyword">false</span>);
<a name="l00260"></a>00260         } <span class="keywordflow">else</span> {
<a name="l00261"></a>00261             peer-&gt;CloseConnection(peer-&gt;GetSystemAddressFromGuid(guid),<span class="keyword">true</span>);
<a name="l00262"></a>00262         }
<a name="l00263"></a>00263         <span class="keywordflow">break</span>;
<a name="l00264"></a>00264     <span class="keywordflow">case</span> <a class="code" href="rakinfo_8h.html#a3c17bff6fe46b8320aaff27c1fbac19ca45fdad03ce6b227ee2e0377af19693af">AUDIO_SPECTATOR</a>:
<a name="l00265"></a>00265         spectators.insert(guid.ToString(),tmp);
<a name="l00266"></a>00266         emit <a class="code" href="class_rak_serv.html#a7247b83301c66e974172f39f34fca90f" title="a Qt Signal emitted when a client changes status">clientInfo</a>(<span class="keyword">true</span>, (<span class="keywordtype">int</span>) type, name, QString::fromAscii(guid.ToString()));
<a name="l00267"></a>00267         emit <a class="code" href="class_rak_serv.html#afbb9fa516f8722fcf64d56e24af7c8d1" title="A Qt Signal for a general message interface.">message</a>(tr(<span class="stringliteral">&quot;New %1&quot;</span>).arg(<a class="code" href="rakinfo_8h.html#afcf889820a49d13605ea469a5799b4e3">ClientTypeText</a>[type]),<span class="keyword">false</span>);
<a name="l00268"></a>00268         <span class="keywordflow">break</span>;
<a name="l00269"></a>00269     <span class="keywordflow">case</span> <a class="code" href="rakinfo_8h.html#a3c17bff6fe46b8320aaff27c1fbac19ca11641dcaecf6e966b16477a15140c025">AUDIO_PROXY</a>:
<a name="l00270"></a>00270         <span class="keywordflow">if</span>( (visitorScene.contains(name)) &amp; (!proxyScene.contains(name)) ) { <span class="comment">// only allow connection if a visitor with this ID exist AND there is no other proxy connected to this visitor</span>
<a name="l00271"></a>00271             tmp.otherId.FromString(visitorScene.value(name).toAscii().data()); <span class="comment">// make the the visitor (GUID from reverse lookup) the other of this proxy</span>
<a name="l00272"></a>00272             proxies.insert(guid.ToString(),tmp);
<a name="l00273"></a>00273             proxyScene.insert(name,guid.ToString()); <span class="comment">// update reverse lookup for proxy</span>
<a name="l00274"></a>00274             emit <a class="code" href="class_rak_serv.html#a7247b83301c66e974172f39f34fca90f" title="a Qt Signal emitted when a client changes status">clientInfo</a>(<span class="keyword">true</span>, (<span class="keywordtype">int</span>) type, name, QString::fromAscii(guid.ToString()));
<a name="l00275"></a>00275             emit <a class="code" href="class_rak_serv.html#afbb9fa516f8722fcf64d56e24af7c8d1" title="A Qt Signal for a general message interface.">message</a>(tr(<span class="stringliteral">&quot;New %1&quot;</span>).arg(<a class="code" href="rakinfo_8h.html#afcf889820a49d13605ea469a5799b4e3">ClientTypeText</a>[type]),<span class="keyword">false</span>);
<a name="l00276"></a>00276         } <span class="keywordflow">else</span> {
<a name="l00277"></a>00277             peer-&gt;CloseConnection(peer-&gt;GetSystemAddressFromGuid(guid),<span class="keyword">true</span>);
<a name="l00278"></a>00278         }
<a name="l00279"></a>00279         <span class="keywordflow">break</span>;
<a name="l00280"></a>00280     <span class="keywordflow">case</span> <a class="code" href="rakinfo_8h.html#a3c17bff6fe46b8320aaff27c1fbac19ca023a6a8a9abd2e44fa1322d64b9fe005">AUDIO_GUID_LISTENER</a>:
<a name="l00281"></a>00281         listeners.insert(guid.ToString(),tmp); <span class="comment">// insert info about a listener</span>
<a name="l00282"></a>00282         listenerScene.insert(name,guid.ToString()); <span class="comment">// insert the reverse mapping (guid from scene) to enable quick lookup in routing</span>
<a name="l00283"></a>00283         emit <a class="code" href="class_rak_serv.html#afbb9fa516f8722fcf64d56e24af7c8d1" title="A Qt Signal for a general message interface.">message</a>(tr(<span class="stringliteral">&quot;New %1&quot;</span>).arg(<a class="code" href="rakinfo_8h.html#afcf889820a49d13605ea469a5799b4e3">ClientTypeText</a>[type]),<span class="keyword">false</span>);
<a name="l00284"></a>00284         emit <a class="code" href="class_rak_serv.html#a7247b83301c66e974172f39f34fca90f" title="a Qt Signal emitted when a client changes status">clientInfo</a>(<span class="keyword">true</span>, (<span class="keywordtype">int</span>) type, name, guid.ToString());
<a name="l00285"></a>00285         <span class="keywordflow">break</span>;
<a name="l00286"></a>00286     <span class="keywordflow">case</span> <a class="code" href="rakinfo_8h.html#a3c17bff6fe46b8320aaff27c1fbac19ca10c640771ca6b67327fd79fd10577c1d">AUDIO_CUSTOM</a>:
<a name="l00287"></a>00287         <span class="keywordflow">if</span>(!customName.contains(name)){ <span class="comment">// test if equal name/sceneGUID as other local</span>
<a name="l00288"></a>00288             customs.insert(guid.ToString(),tmp);
<a name="l00289"></a>00289             customName.insert(name,guid.ToString()); <span class="comment">// update Custom reverse lookup from name</span>
<a name="l00290"></a>00290             emit <a class="code" href="class_rak_serv.html#a7247b83301c66e974172f39f34fca90f" title="a Qt Signal emitted when a client changes status">clientInfo</a>(<span class="keyword">true</span>, (<span class="keywordtype">int</span>) type, name, QString::fromAscii(guid.ToString()));
<a name="l00291"></a>00291             emit <a class="code" href="class_rak_serv.html#afbb9fa516f8722fcf64d56e24af7c8d1" title="A Qt Signal for a general message interface.">message</a>(tr(<span class="stringliteral">&quot;New %1&quot;</span>).arg(<a class="code" href="rakinfo_8h.html#afcf889820a49d13605ea469a5799b4e3">ClientTypeText</a>[type]),<span class="keyword">false</span>);
<a name="l00292"></a>00292         } <span class="keywordflow">else</span> {
<a name="l00293"></a>00293             peer-&gt;CloseConnection(peer-&gt;GetSystemAddressFromGuid(guid),<span class="keyword">true</span>);
<a name="l00294"></a>00294         }
<a name="l00295"></a>00295         <span class="keywordflow">break</span>;
<a name="l00296"></a>00296     <span class="keywordflow">default</span>:
<a name="l00297"></a>00297             peer-&gt;CloseConnection(peer-&gt;GetSystemAddressFromGuid(guid),<span class="keyword">true</span>);
<a name="l00298"></a>00298             <span class="keywordflow">break</span>;
<a name="l00299"></a>00299         }
<a name="l00300"></a>00300 }
<a name="l00301"></a>00301 
<a name="l00302"></a>00302 <span class="keywordtype">void</span> RakServ::removeClient(RakNetGUID guid){
<a name="l00303"></a>00303     <span class="keywordflow">if</span>(visitors.contains(guid.ToString())){ <span class="comment">// test if this guid is a visitor</span>
<a name="l00304"></a>00304         emit <a class="code" href="class_rak_serv.html#a7247b83301c66e974172f39f34fca90f" title="a Qt Signal emitted when a client changes status">clientInfo</a>(<span class="keyword">false</span>, visitors.value(guid.ToString()).type, visitors.value(guid.ToString()).name, QString::fromAscii(guid.ToString()));
<a name="l00305"></a>00305         <span class="keywordflow">if</span>(visitors.value(guid.ToString()).otherId!=UNASSIGNED_RAKNET_GUID){
<a name="l00306"></a>00306             avatars[visitors.value(guid.ToString()).otherId.ToString()].otherId=UNASSIGNED_RAKNET_GUID; <span class="comment">// remove &quot;other&quot; reference from avatar</span>
<a name="l00307"></a>00307             emit <a class="code" href="class_rak_serv.html#afbb9fa516f8722fcf64d56e24af7c8d1" title="A Qt Signal for a general message interface.">message</a>(tr(<span class="stringliteral">&quot;removed %1(%2) as other of %3(%4)&quot;</span>).arg(visitors.value(guid.ToString()).name,<a class="code" href="rakinfo_8h.html#afcf889820a49d13605ea469a5799b4e3">ClientTypeText</a>[visitors.value(guid.ToString()).type],avatars[visitors.value(guid.ToString()).otherId.ToString()].name,<a class="code" href="rakinfo_8h.html#afcf889820a49d13605ea469a5799b4e3">ClientTypeText</a>[avatars[visitors.value(guid.ToString()).otherId.ToString()].type]));
<a name="l00308"></a>00308         }
<a name="l00309"></a>00309         <span class="keywordflow">if</span>(proxyScene.contains(visitors.value(guid.ToString()).name)){ <span class="comment">// disconnect any connected proxy! remove-procedure is automatically called</span>
<a name="l00310"></a>00310             peer-&gt;CloseConnection(peer-&gt;GetSystemAddressFromGuid(proxies.value(proxyScene.value(visitors.value(guid.ToString()).name)).<span class="keywordtype">id</span>),<span class="keyword">true</span>);
<a name="l00311"></a>00311         }
<a name="l00312"></a>00312         visitorOther.remove(visitors.value(guid.ToString()).otherId.ToString(),guid.ToString()); <span class="comment">// remove reverse lookup of visitor from otherID</span>
<a name="l00313"></a>00313         visitorScene.remove(visitors.value(guid.ToString()).name); <span class="comment">// remove reverse lookup from sceneID</span>
<a name="l00314"></a>00314         visitors.remove(guid.ToString()); <span class="comment">// remove main lookup</span>
<a name="l00315"></a>00315     } <span class="keywordflow">else</span> <span class="keywordflow">if</span>(avatars.contains(guid.ToString())) {
<a name="l00316"></a>00316         emit <a class="code" href="class_rak_serv.html#a7247b83301c66e974172f39f34fca90f" title="a Qt Signal emitted when a client changes status">clientInfo</a>(<span class="keyword">false</span>, avatars.value(guid.ToString()).type, avatars.value(guid.ToString()).name, QString::fromAscii(guid.ToString()));
<a name="l00317"></a>00317         <span class="keywordflow">if</span>(avatars.value(guid.ToString()).otherId!=UNASSIGNED_RAKNET_GUID){
<a name="l00318"></a>00318             visitors[avatars.value(guid.ToString()).otherId.ToString()].otherId=UNASSIGNED_RAKNET_GUID; <span class="comment">// remove &quot;other&quot; reference from avatar</span>
<a name="l00319"></a>00319             emit <a class="code" href="class_rak_serv.html#afbb9fa516f8722fcf64d56e24af7c8d1" title="A Qt Signal for a general message interface.">message</a>(tr(<span class="stringliteral">&quot;removed %1(%2) as other of %3(%4)&quot;</span>).arg(avatars.value(guid.ToString()).name,<a class="code" href="rakinfo_8h.html#afcf889820a49d13605ea469a5799b4e3">ClientTypeText</a>[avatars.value(guid.ToString()).type],visitors[avatars.value(guid.ToString()).otherId.ToString()].name,<a class="code" href="rakinfo_8h.html#afcf889820a49d13605ea469a5799b4e3">ClientTypeText</a>[visitors[avatars.value(guid.ToString()).otherId.ToString()].type]));
<a name="l00320"></a>00320         }
<a name="l00321"></a>00321         avatarOther.remove(avatars.value(guid.ToString()).otherId.ToString(),guid.ToString()); <span class="comment">// remove reverse lookup of avatar from otherID</span>
<a name="l00322"></a>00322         avatarName.remove(avatars.value(guid.ToString()).name); <span class="comment">// remove reverse lookup from sceneID</span>
<a name="l00323"></a>00323         avatars.remove(guid.ToString()); <span class="comment">// remove main lookup</span>
<a name="l00324"></a>00324     } <span class="keywordflow">else</span> <span class="keywordflow">if</span>(locals.contains(guid.ToString())) {
<a name="l00325"></a>00325         emit <a class="code" href="class_rak_serv.html#a7247b83301c66e974172f39f34fca90f" title="a Qt Signal emitted when a client changes status">clientInfo</a>(<span class="keyword">false</span>, locals.value(guid.ToString()).type, locals.value(guid.ToString()).name, QString::fromAscii(guid.ToString()));
<a name="l00326"></a>00326         localName.remove(locals.value(guid.ToString()).name); <span class="comment">// remove reverse lookup from sceneID/name</span>
<a name="l00327"></a>00327         locals.remove(guid.ToString()); <span class="comment">// remove main lookup</span>
<a name="l00328"></a>00328     } <span class="keywordflow">else</span> <span class="keywordflow">if</span>(arLocals.contains(guid.ToString())) {
<a name="l00329"></a>00329         emit <a class="code" href="class_rak_serv.html#a7247b83301c66e974172f39f34fca90f" title="a Qt Signal emitted when a client changes status">clientInfo</a>(<span class="keyword">false</span>, arLocals.value(guid.ToString()).type, arLocals.value(guid.ToString()).name, QString::fromAscii(guid.ToString()));
<a name="l00330"></a>00330         arLocalScene.remove(arLocals.value(guid.ToString()).name); <span class="comment">// remove reverse lookup from sceneID/name</span>
<a name="l00331"></a>00331         arLocals.remove(guid.ToString()); <span class="comment">// remove main lookup</span>
<a name="l00332"></a>00332     } <span class="keywordflow">else</span> <span class="keywordflow">if</span>(spectators.contains(guid.ToString())) {
<a name="l00333"></a>00333         emit <a class="code" href="class_rak_serv.html#a7247b83301c66e974172f39f34fca90f" title="a Qt Signal emitted when a client changes status">clientInfo</a>(<span class="keyword">false</span>, spectators.value(guid.ToString()).type, spectators.value(guid.ToString()).name, QString::fromAscii(guid.ToString()));
<a name="l00334"></a>00334         spectators.remove(guid.ToString()); <span class="comment">// remove main lookup</span>
<a name="l00335"></a>00335     } <span class="keywordflow">else</span> <span class="keywordflow">if</span>(proxies.contains(guid.ToString())) {
<a name="l00336"></a>00336         emit <a class="code" href="class_rak_serv.html#a7247b83301c66e974172f39f34fca90f" title="a Qt Signal emitted when a client changes status">clientInfo</a>(<span class="keyword">false</span>, proxies.value(guid.ToString()).type, proxies.value(guid.ToString()).name, QString::fromAscii(guid.ToString()));
<a name="l00337"></a>00337         proxyScene.remove(proxies.value(guid.ToString()).name);<span class="comment">// remove reverse lookup from sceneID/name</span>
<a name="l00338"></a>00338         proxies.remove(guid.ToString()); <span class="comment">// remove main lookup</span>
<a name="l00339"></a>00339     } <span class="keywordflow">else</span> <span class="keywordflow">if</span>(listeners.contains(guid.ToString())){
<a name="l00340"></a>00340         emit <a class="code" href="class_rak_serv.html#a7247b83301c66e974172f39f34fca90f" title="a Qt Signal emitted when a client changes status">clientInfo</a>(<span class="keyword">false</span>, <a class="code" href="rakinfo_8h.html#a3c17bff6fe46b8320aaff27c1fbac19ca023a6a8a9abd2e44fa1322d64b9fe005">AUDIO_GUID_LISTENER</a>, listeners.value(guid.ToString()).name, QString::fromAscii(guid.ToString()));
<a name="l00341"></a>00341         listenerScene.remove(listeners.value(guid.ToString()).name,guid.ToString()); <span class="comment">// remove lookup from sceneID/name</span>
<a name="l00342"></a>00342         listeners.remove(guid.ToString()); <span class="comment">// remove main lookup</span>
<a name="l00343"></a>00343     } <span class="keywordflow">else</span> <span class="keywordflow">if</span>(customs.contains(guid.ToString())) {
<a name="l00344"></a>00344         emit <a class="code" href="class_rak_serv.html#a7247b83301c66e974172f39f34fca90f" title="a Qt Signal emitted when a client changes status">clientInfo</a>(<span class="keyword">false</span>, customs.value(guid.ToString()).type, customs.value(guid.ToString()).name, QString::fromAscii(guid.ToString()));
<a name="l00345"></a>00345         customName.remove(customs.value(guid.ToString()).name); <span class="comment">// remove reverse lookup from sceneID/name</span>
<a name="l00346"></a>00346         customs.remove(guid.ToString()); <span class="comment">// remove main lookup</span>
<a name="l00347"></a>00347     } <span class="keywordflow">else</span> {
<a name="l00348"></a>00348         emit <a class="code" href="class_rak_serv.html#afbb9fa516f8722fcf64d56e24af7c8d1" title="A Qt Signal for a general message interface.">message</a>(tr(<span class="stringliteral">&quot;GUID [%1] not found when attempting removal.&quot;</span>).arg(guid.ToString()),<span class="keyword">true</span>);
<a name="l00349"></a>00349     }
<a name="l00350"></a>00350 }
<a name="l00351"></a>00351 
<a name="l00352"></a>00352 
<a name="l00353"></a>00353 <span class="comment">// Public functions:</span>
<a name="l00354"></a>00354 
<a name="l00355"></a>00355 
<a name="l00356"></a><a class="code" href="class_rak_serv.html#af217795bed31c82f9f92f64d98e5c419">00356</a> <span class="keywordtype">void</span> <a class="code" href="class_rak_serv.html#af217795bed31c82f9f92f64d98e5c419" title="Stop the currently running server.">RakServ::StopServer</a>(){
<a name="l00357"></a>00357     bDoRun=<span class="keyword">false</span>; <span class="comment">// stop receiving packets</span>
<a name="l00358"></a>00358     wait(); <span class="comment">// wait untill no more packets are received</span>
<a name="l00359"></a>00359     <span class="keywordflow">if</span>(bSceneIsConnected){ <span class="comment">// Disconnect from the BEAMING Scene</span>
<a name="l00360"></a>00360         bSceneIsConnected=<span class="keyword">false</span>;
<a name="l00361"></a>00361         removeAllNodes();
<a name="l00362"></a>00362         stop();
<a name="l00363"></a>00363     }
<a name="l00364"></a>00364     <span class="keywordflow">if</span> (peer-&gt;IsActive()) {
<a name="l00365"></a>00365         peer-&gt;Shutdown(300);
<a name="l00366"></a>00366     }
<a name="l00367"></a>00367     <a class="code" href="class_rak_serv.html#afbb9fa516f8722fcf64d56e24af7c8d1" title="A Qt Signal for a general message interface.">message</a>(tr(<span class="stringliteral">&quot;Server stopped...&quot;</span>),<span class="keyword">false</span>);
<a name="l00368"></a>00368 }
<a name="l00369"></a>00369 
<a name="l00370"></a>00370 
<a name="l00371"></a><a class="code" href="class_rak_serv.html#a442febed7a21d90e1d4acecc785465ee">00371</a> <span class="keywordtype">bool</span> <a class="code" href="class_rak_serv.html#a442febed7a21d90e1d4acecc785465ee" title="Test if the server is currently running.">RakServ::isRunning</a>(){
<a name="l00372"></a>00372     <span class="keywordflow">return</span> peer-&gt;IsActive(); <span class="comment">// just return &quot;running&quot; status if we are server</span>
<a name="l00373"></a>00373 }
<a name="l00374"></a>00374 
<a name="l00375"></a><a class="code" href="class_rak_serv.html#a798e36c5a3efd76074b3711d8a00ea6c">00375</a> <span class="keywordtype">unsigned</span> <span class="keywordtype">short</span> <a class="code" href="class_rak_serv.html#a798e36c5a3efd76074b3711d8a00ea6c" title="Get the port, which the servere is listening on.">RakServ::serverPort</a>(){
<a name="l00376"></a>00376     <span class="keywordflow">if</span>(peer-&gt;IsActive()){
<a name="l00377"></a>00377         <span class="keywordflow">return</span> ConnPort;
<a name="l00378"></a>00378     } <span class="keywordflow">else</span> {
<a name="l00379"></a>00379         <span class="keywordflow">return</span> 0;
<a name="l00380"></a>00380     }
<a name="l00381"></a>00381 }
<a name="l00382"></a>00382 
<a name="l00383"></a><a class="code" href="class_rak_serv.html#ab3ec5cc0fb25df253387c6910258d023">00383</a> <span class="keywordtype">unsigned</span> <span class="keywordtype">short</span> <a class="code" href="class_rak_serv.html#ab3ec5cc0fb25df253387c6910258d023" title="Get the number of clients that are currently connected.">RakServ::nConnections</a>(){
<a name="l00384"></a>00384     <span class="keywordtype">unsigned</span> <span class="keywordtype">short</span> numsys;
<a name="l00385"></a>00385     peer-&gt;GetConnectionList(0,&amp;numsys);
<a name="l00386"></a>00386     <span class="keywordflow">return</span> numsys;
<a name="l00387"></a>00387 }
<a name="l00388"></a>00388 
<a name="l00389"></a>00389 
<a name="l00390"></a><a class="code" href="class_rak_serv.html#a12314453963575c40667bf9131b69fae">00390</a> <span class="keywordtype">unsigned</span> <span class="keywordtype">short</span> <a class="code" href="class_rak_serv.html#a12314453963575c40667bf9131b69fae" title="Get the highest number of concurrent connections.">RakServ::maxConnections</a>(){
<a name="l00391"></a>00391     <span class="keywordflow">return</span> peer-&gt;GetMaximumIncomingConnections();
<a name="l00392"></a>00392 }
<a name="l00393"></a>00393 
<a name="l00394"></a><a class="code" href="class_rak_serv.html#a08111039f9cfcd53c1ddc1956aaee222">00394</a> <span class="keywordtype">void</span> <a class="code" href="class_rak_serv.html#a08111039f9cfcd53c1ddc1956aaee222" title="Get the highest number of concurrent connections.">RakServ::setMaxConnections</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">short</span> numAllowed){
<a name="l00395"></a>00395     peer-&gt;SetMaximumIncomingConnections(numAllowed);
<a name="l00396"></a>00396 }
<a name="l00397"></a>00397 
<a name="l00398"></a><a class="code" href="class_rak_serv.html#a6dc20891b8b106654975833b997d15ef">00398</a> QList&lt;RakServ::tClientInfo&gt; <a class="code" href="class_rak_serv.html#a6dc20891b8b106654975833b997d15ef" title="Get a list of all the connected clients.">RakServ::connectedClients</a>(){
<a name="l00399"></a>00399     QList&lt;tClientInfo&gt; clientlist;
<a name="l00400"></a>00400     clientlist &lt;&lt; visitors.values();
<a name="l00401"></a>00401     clientlist &lt;&lt; avatars.values();
<a name="l00402"></a>00402     clientlist &lt;&lt; locals.values();
<a name="l00403"></a>00403     clientlist &lt;&lt; arLocals.values();
<a name="l00404"></a>00404     clientlist &lt;&lt; customs.values();
<a name="l00405"></a>00405     clientlist &lt;&lt; proxies.values();
<a name="l00406"></a>00406     clientlist &lt;&lt; spectators.values();
<a name="l00407"></a>00407     clientlist &lt;&lt; listeners.values();
<a name="l00408"></a>00408     <span class="keywordflow">return</span> clientlist;
<a name="l00409"></a>00409 }
<a name="l00410"></a>00410 
<a name="l00411"></a>00411 <span class="comment">// Public Slots:</span>
<a name="l00412"></a>00412 
<a name="l00413"></a><a class="code" href="class_rak_serv.html#ad24690e318fe12ebba1c8d3a05c04684">00413</a> <span class="keywordtype">void</span> <a class="code" href="class_rak_serv.html#ad24690e318fe12ebba1c8d3a05c04684" title="Slot/function that can be used from an external program to disconnect a connected client...">RakServ::kickClient</a>(QString guid){
<a name="l00414"></a>00414     RakNetGUID kickId;
<a name="l00415"></a>00415     kickId.FromString(guid.toAscii().data()); <span class="comment">// convert to the RakNet GUID format</span>
<a name="l00416"></a>00416     peer-&gt;CloseConnection(peer-&gt;GetSystemAddressFromGuid(kickId),<span class="keyword">true</span>); <span class="comment">// kick the client from RakNet</span>
<a name="l00417"></a>00417 }
</pre></div></div>
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="rakserv_8cpp.html">rakserv.cpp</a>      </li>
      <li class="footer">Generated on Tue Apr 16 2013 14:18:01 for Beaming Audio by&#160;
<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.3 </li>
    </ul>
  </div>
<!--- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Defines</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>


</body>
</html>
