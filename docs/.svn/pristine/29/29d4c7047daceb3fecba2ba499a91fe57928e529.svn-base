<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>Beaming Audio: Classes/audioio.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript">
$(document).ready(initResizable);
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css"/>
</head>
<body onload='searchBox.OnSelectItem(0);'>
<!-- Generated by Doxygen 1.7.3 -->
<script type="text/javascript"><!--
var searchBox = new SearchBox("searchBox", "search",false,'Search');
--></script>
<div id="top">
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="BEAMING_LOGO2.jpg"></td>
  <td style="padding-left: 0.5em;">
   <div id="projectname">Beaming Audio&#160;<span id="projectnumber">0.9</span></div>
   <div id="projectbrief">Audio Client-Server for BEAMING</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.html"><span>Related&#160;Pages</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
      <li id="searchli">
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
      <li><a href="globals.html"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('audioio_8cpp.html','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<h1>Classes/audioio.cpp</h1>  </div>
</div>
<div class="contents">
<div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="preprocessor">#include &quot;audioio.h&quot;</span>
<a name="l00002"></a>00002 <span class="preprocessor">#include &lt;QDebug&gt;</span>
<a name="l00003"></a>00003 
<a name="l00004"></a>00004 <span class="comment">// constructor for the struct containing device information</span>
<a name="l00005"></a>00005 t_audioDevinfo::t_audioDevinfo(QString iname, <span class="keywordtype">int</span> iin, <span class="keywordtype">int</span> iout, QString iapi):
<a name="l00006"></a>00006         name(iname),
<a name="l00007"></a>00007         in(iin),
<a name="l00008"></a>00008         out(iout),
<a name="l00009"></a>00009         api(iapi)
<a name="l00010"></a>00010 {}
<a name="l00011"></a>00011 
<a name="l00012"></a>00012 AudioIO::AudioIO(<a class="code" href="class_audio_interface.html" title="Interface for asynchronous communication between audio modules.">AudioInterface</a> *audio,
<a name="l00013"></a>00013 #ifdef USE_SCENE
<a name="l00014"></a>00014         <a class="code" href="class_scene_interface.html">SceneInterface</a> *scene,
<a name="l00015"></a>00015 #<span class="keywordflow">else</span>
<a name="l00016"></a>00016         <span class="keywordtype">void</span> *scene,
<a name="l00017"></a>00017 #endif
<a name="l00018"></a>00018 #ifdef USE_HPTF
<a name="l00019"></a>00019         HpTFfilter *hptfFilter,
<a name="l00020"></a>00020 #<span class="keywordflow">else</span>
<a name="l00021"></a>00021         <span class="keywordtype">void</span> *,
<a name="l00022"></a>00022 #endif
<a name="l00023"></a>00023         <span class="keywordtype">bool</span> doinit,
<a name="l00024"></a>00024         QObject *parent) :
<a name="l00025"></a>00025     QObject(parent),
<a name="l00026"></a>00026     paSys(portaudio::System::instance()), <span class="comment">// setup paSys to point to the running PortAudio</span>
<a name="l00027"></a>00027     audioIF(audio), <span class="comment">// Init the interface (ringbuffer) pointer</span>
<a name="l00028"></a>00028 #ifdef USE_SCENE
<a name="l00029"></a>00029     sceneIF(scene), <span class="comment">// init the SceneInfo pointer</span>
<a name="l00030"></a>00030 #endif
<a name="l00031"></a>00031 #ifdef USE_HPTF
<a name="l00032"></a>00032     hptf(hptfFilter),
<a name="l00033"></a>00033 #endif
<a name="l00034"></a>00034     muteIn(false),
<a name="l00035"></a>00035     nIn(0),
<a name="l00036"></a>00036     nOut(0)
<a name="l00037"></a>00037 {
<a name="l00038"></a>00038 <span class="preprocessor">#ifndef USE_SCENE</span>
<a name="l00039"></a>00039 <span class="preprocessor"></span>    (void) scene; <span class="comment">// just avoiding a build warning for non-scene compilation</span>
<a name="l00040"></a>00040 <span class="preprocessor">#endif</span>
<a name="l00041"></a>00041 <span class="preprocessor"></span>    <span class="comment">// Initialize the device-list</span>
<a name="l00042"></a>00042 
<a name="l00043"></a>00043     <span class="comment">//devs.resize(paSys.deviceCount());</span>
<a name="l00044"></a>00044     <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=0;i&lt;paSys.deviceCount();i++)
<a name="l00045"></a>00045     {
<a name="l00046"></a>00046         devs.append(<a class="code" href="structt__audio_devinfo.html">t_audioDevinfo</a>(paSys.deviceByIndex(i).name(),
<a name="l00047"></a>00047                                    paSys.deviceByIndex(i).maxInputChannels(),
<a name="l00048"></a>00048                                    paSys.deviceByIndex(i).maxOutputChannels(),
<a name="l00049"></a>00049                                    paSys.deviceByIndex(i).hostApi().name() ));
<a name="l00050"></a>00050         qDebug() &lt;&lt; tr(<span class="stringliteral">&quot;Device %1: %2 \tin: %3 \tout: %4 \tapi: %5&quot;</span>).arg(QString::number(i),devs[i].name,QString::number(devs[i].in),QString::number(devs[i].out),devs[i].api);
<a name="l00051"></a>00051     }
<a name="l00052"></a>00052 
<a name="l00053"></a>00053 
<a name="l00054"></a>00054     <span class="keywordflow">if</span>(doinit){
<a name="l00055"></a>00055         init();
<a name="l00056"></a>00056     }
<a name="l00057"></a>00057 
<a name="l00058"></a>00058 }
<a name="l00059"></a>00059 
<a name="l00060"></a>00060 AudioIO::~AudioIO()
<a name="l00061"></a>00061 {
<a name="l00062"></a>00062     emit message(tr(<span class="stringliteral">&quot;Terminating Audio interface&quot;</span>));
<a name="l00063"></a>00063 }
<a name="l00064"></a>00064 
<a name="l00065"></a>00065 
<a name="l00066"></a>00066 <span class="keywordtype">bool</span> AudioIO::init(<span class="keywordtype">int</span> inDevIdx, <span class="keywordtype">int</span> inChn, <span class="keywordtype">int</span> outDevIdx, <span class="keywordtype">int</span> outChn) {
<a name="l00067"></a>00067     <span class="keywordflow">return</span> (initIn(inDevIdx,inChn)|initOut(outDevIdx,outChn));
<a name="l00068"></a>00068 }
<a name="l00069"></a>00069 
<a name="l00070"></a>00070 <span class="keywordtype">bool</span> AudioIO::initIn(<span class="keywordtype">int</span> devIdx, <span class="keywordtype">int</span> nChn){
<a name="l00071"></a>00071     <span class="keywordflow">if</span>(streamIn.isOpen()){
<a name="l00072"></a>00072         <span class="keywordflow">if</span>(streamIn.isActive()){
<a name="l00073"></a>00073             streamIn.stop();
<a name="l00074"></a>00074         }
<a name="l00075"></a>00075         streamIn.close();
<a name="l00076"></a>00076     }
<a name="l00077"></a>00077     portaudio::Device *devIn = &amp;paSys.defaultInputDevice();
<a name="l00078"></a>00078     <span class="keywordflow">if</span>( (devIdx &gt;= 0) &amp; (devIdx &lt; paSys.deviceCount()) ){
<a name="l00079"></a>00079         devIn = &amp;paSys.deviceByIndex(devIdx);
<a name="l00080"></a>00080     }
<a name="l00081"></a>00081     <span class="keywordflow">if</span>( (nChn&lt;0)|(nChn&gt;devIn-&gt;maxInputChannels())){ <span class="comment">// if default number of channels or too many</span>
<a name="l00082"></a>00082         nIn = devIn-&gt;maxInputChannels(); <span class="comment">// set input to maximum available</span>
<a name="l00083"></a>00083     } <span class="keywordflow">else</span> { <span class="comment">// else set that number</span>
<a name="l00084"></a>00084         nIn = nChn;
<a name="l00085"></a>00085     }
<a name="l00086"></a>00086 
<a name="l00087"></a>00087     <span class="keywordflow">if</span>(nIn&gt;0) {
<a name="l00088"></a>00088         <span class="comment">// Define stream parameters for input and output</span>
<a name="l00089"></a>00089         portaudio::DirectionSpecificStreamParameters in(*devIn, <span class="comment">/* device */</span>
<a name="l00090"></a>00090                                                         nIn, <span class="comment">/* number of channels */</span>
<a name="l00091"></a>00091                                                         PA_FORMAT, <span class="comment">/* format */</span>
<a name="l00092"></a>00092                                                         <span class="keyword">false</span>, <span class="comment">/* interleaved */</span>
<a name="l00093"></a>00093                                                         paSys.defaultInputDevice().defaultLowInputLatency(), <span class="comment">/* suggested latency */</span>
<a name="l00094"></a>00094                                                         0); <span class="comment">/* Host API specific information (none) */</span>
<a name="l00095"></a>00095 
<a name="l00096"></a>00096 
<a name="l00097"></a>00097         portaudio::StreamParameters ioparms(in,in.null(),PA_FS,PA_BUFLEN,paNoFlag);
<a name="l00098"></a>00098 
<a name="l00099"></a>00099         portaudio::MemFunCallbackStream&lt;AudioIO&gt;::CallbackFunPtr callback; <span class="comment">// define a callback function pointer</span>
<a name="l00100"></a>00100         callback=&amp;AudioIO::PaCallbackIn;
<a name="l00101"></a>00101         <span class="keywordflow">if</span>(ioparms.isSupported()){
<a name="l00102"></a>00102             <span class="comment">// Apply it all to the stream and open it</span>
<a name="l00103"></a>00103             streamIn.open(ioparms,*<span class="keyword">this</span>,callback);
<a name="l00104"></a>00104             qDebug() &lt;&lt; tr(<span class="stringliteral">&quot;Selected input device opened: %1 \tin: %2 \tout: %3 \tapi: %4&quot;</span>).arg(devIn-&gt;name(),QString::number(devIn-&gt;maxInputChannels()),QString::number(devIn-&gt;maxOutputChannels()),devIn-&gt;hostApi().name());
<a name="l00105"></a>00105         } <span class="keywordflow">else</span> {
<a name="l00106"></a>00106             emit message(tr(<span class="stringliteral">&quot;Portaudio error: %1&quot;</span>).arg(Pa_GetErrorText((Pa_IsFormatSupported(ioparms.inputParameters().paStreamParameters(),ioparms.outputParameters().paStreamParameters(),PA_FS)))));
<a name="l00107"></a>00107             <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00108"></a>00108         }
<a name="l00109"></a>00109     } <span class="keywordflow">else</span> {
<a name="l00110"></a>00110         emit message(tr(<span class="stringliteral">&quot;No input channels are available - ignoring input&quot;</span>),<span class="keyword">true</span>);
<a name="l00111"></a>00111         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00112"></a>00112     }
<a name="l00113"></a>00113 <span class="preprocessor">#ifdef FILEIN // Read the file input and store in the vector array</span>
<a name="l00114"></a>00114 <span class="preprocessor"></span>    QFile file(FILEIN_NAME);
<a name="l00115"></a>00115     <span class="keywordflow">if</span>(file.open(QFile::ReadOnly | QFile::Text)){
<a name="l00116"></a>00116         QTextStream fin(&amp;file);
<a name="l00117"></a>00117         <span class="keywordflow">while</span>(!fin.atEnd()){
<a name="l00118"></a>00118             QString line = fin.readLine();
<a name="l00119"></a>00119             <span class="keywordflow">if</span>(line.size()&gt;0){ <span class="comment">// ignore empty lines</span>
<a name="l00120"></a>00120                 <span class="keywordflow">if</span>(line[0] != QChar(<span class="charliteral">&#39;#&#39;</span>)){ <span class="comment">// ignore commented lines</span>
<a name="l00121"></a>00121                     QStringList fields = line.split(<span class="stringliteral">&quot; &quot;</span>, QString::SkipEmptyParts);
<a name="l00122"></a>00122                     <span class="keywordflow">if</span>(filein.size()&lt;fields.size()){ <span class="comment">// make sure we have buffers allocated</span>
<a name="l00123"></a>00123                         filein.resize(fields.size());
<a name="l00124"></a>00124                     }
<a name="l00125"></a>00125                     <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i = 0 ; i&lt; fields.size() ; i++){ <span class="comment">// write to the buffers</span>
<a name="l00126"></a>00126                         filein[i].append(fields.at(i).toShort());
<a name="l00127"></a>00127                     }
<a name="l00128"></a>00128                 }
<a name="l00129"></a>00129             }
<a name="l00130"></a>00130         }
<a name="l00131"></a>00131         file.close();
<a name="l00132"></a>00132     }
<a name="l00133"></a>00133     <span class="keywordflow">if</span>(filein.size()&lt;nIn){
<a name="l00134"></a>00134         filein.resize(nIn);
<a name="l00135"></a>00135         <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i = 1; i &lt; filein.size() ; i++){
<a name="l00136"></a>00136             filein[i].resize(filein[0].size()); <span class="comment">// make sure all buffers have the same size</span>
<a name="l00137"></a>00137         }
<a name="l00138"></a>00138     }
<a name="l00139"></a>00139     filein_idx = 0;
<a name="l00140"></a>00140 <span class="preprocessor">#endif // FILEIN</span>
<a name="l00141"></a>00141 <span class="preprocessor"></span>    <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00142"></a>00142 }
<a name="l00143"></a>00143 
<a name="l00144"></a>00144 <span class="keywordtype">bool</span> AudioIO::initOut(<span class="keywordtype">int</span> devIdx, <span class="keywordtype">int</span> nChn){
<a name="l00145"></a>00145     <span class="keywordflow">if</span>(streamOut.isOpen()){
<a name="l00146"></a>00146         <span class="keywordflow">if</span>(streamOut.isActive()){
<a name="l00147"></a>00147             streamOut.stop();
<a name="l00148"></a>00148         }
<a name="l00149"></a>00149         streamOut.close();
<a name="l00150"></a>00150     }
<a name="l00151"></a>00151     qDebug() &lt;&lt; <span class="stringliteral">&quot;init out...&quot;</span>;
<a name="l00152"></a>00152     portaudio::Device *devOut = &amp;paSys.defaultOutputDevice(); <span class="comment">// Initialize the selected device to be the default device</span>
<a name="l00153"></a>00153     <span class="keywordflow">if</span>( (devIdx &gt;= 0) &amp; (devIdx &lt; paSys.deviceCount()) ){
<a name="l00154"></a>00154         devOut = &amp;paSys.deviceByIndex(devIdx);
<a name="l00155"></a>00155     }
<a name="l00156"></a>00156     <span class="keywordflow">if</span>( (nChn&lt;0) | (nChn&gt;devOut-&gt;maxOutputChannels())){ <span class="comment">// if default number of channels or too many</span>
<a name="l00157"></a>00157         <span class="keywordflow">if</span>(devOut-&gt;maxOutputChannels()&gt;= 2){ <span class="comment">// limit output channels to stereo</span>
<a name="l00158"></a>00158             nOut = 2;
<a name="l00159"></a>00159         } <span class="keywordflow">else</span> <span class="keywordflow">if</span>(devOut-&gt;maxOutputChannels()&gt;0) {
<a name="l00160"></a>00160             nOut = 1;
<a name="l00161"></a>00161         } <span class="keywordflow">else</span> { <span class="comment">// if no outpput channels are available, return an error</span>
<a name="l00162"></a>00162             nOut = 0;
<a name="l00163"></a>00163             emit message(tr(<span class="stringliteral">&quot;No output channels are available - ignoring output&quot;</span>),<span class="keyword">true</span>);
<a name="l00164"></a>00164             <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00165"></a>00165         }
<a name="l00166"></a>00166     } <span class="keywordflow">else</span> { <span class="comment">// else set that number</span>
<a name="l00167"></a>00167         nOut = nChn;
<a name="l00168"></a>00168     }
<a name="l00169"></a>00169 
<a name="l00170"></a>00170     qDebug() &lt;&lt; <span class="stringliteral">&quot;init out...&quot;</span> &lt;&lt; nOut;
<a name="l00171"></a>00171     <span class="comment">// define stream parameters for the output device</span>
<a name="l00172"></a>00172     portaudio::DirectionSpecificStreamParameters out(*devOut,
<a name="l00173"></a>00173                                                      nOut,
<a name="l00174"></a>00174                                                      PA_FORMAT,
<a name="l00175"></a>00175                                                      <span class="keyword">false</span>,
<a name="l00176"></a>00176                                                      paSys.defaultOutputDevice().defaultLowOutputLatency(),
<a name="l00177"></a>00177                                                      0);
<a name="l00178"></a>00178     portaudio::StreamParameters ioparms(out.null(),out,PA_FS,PA_BUFLEN,paNoFlag);
<a name="l00179"></a>00179 
<a name="l00180"></a>00180     <span class="comment">// define a callback function pointer</span>
<a name="l00181"></a>00181     portaudio::MemFunCallbackStream&lt;AudioIO&gt;::CallbackFunPtr callback;
<a name="l00182"></a>00182     callback=&amp;AudioIO::PaCallbackOut; <span class="comment">// select the correct callback (note - NO () on the function reference)</span>
<a name="l00183"></a>00183     <span class="keywordflow">if</span>(ioparms.isSupported()){
<a name="l00184"></a>00184         <span class="comment">// Apply it all to the stream and open it</span>
<a name="l00185"></a>00185         streamOut.open(ioparms,*<span class="keyword">this</span>,callback);
<a name="l00186"></a>00186         qDebug() &lt;&lt; tr(<span class="stringliteral">&quot;Selected output device opened: %1 \tin: %2 \tout: %3 \tapi: %4&quot;</span>).arg(devOut-&gt;name(),QString::number(devOut-&gt;maxInputChannels()),QString::number(devOut-&gt;maxOutputChannels()),devOut-&gt;hostApi().name());
<a name="l00187"></a>00187     } <span class="keywordflow">else</span> {
<a name="l00188"></a>00188         nOut=0;
<a name="l00189"></a>00189         emit message(tr(<span class="stringliteral">&quot;Portaudio error: %1&quot;</span>).arg(Pa_GetErrorText((Pa_IsFormatSupported(ioparms.inputParameters().paStreamParameters(),ioparms.outputParameters().paStreamParameters(),PA_FS)))));
<a name="l00190"></a>00190         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00191"></a>00191     }
<a name="l00192"></a>00192 <span class="preprocessor">#ifdef FILEOUT // make sure there is enough room in the file buffers</span>
<a name="l00193"></a>00193 <span class="preprocessor"></span>    fileout_l.resize(FILEOUT_SIZE);
<a name="l00194"></a>00194     fileout_r.resize(FILEOUT_SIZE);
<a name="l00195"></a>00195     fileout_multi.resize(8);
<a name="l00196"></a>00196     <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=0;i&lt;8;i++){
<a name="l00197"></a>00197         fileout_multi[i].resize(FILEOUT_SIZE);
<a name="l00198"></a>00198     }
<a name="l00199"></a>00199 <span class="preprocessor">#endif // FILEOUT</span>
<a name="l00200"></a>00200 <span class="preprocessor"></span>    <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00201"></a>00201 }
<a name="l00202"></a>00202 
<a name="l00203"></a>00203 <span class="keywordtype">void</span> AudioIO::start()
<a name="l00204"></a>00204 {
<a name="l00205"></a>00205     <span class="keywordflow">if</span>(nIn&gt;0){
<a name="l00206"></a>00206         <span class="keywordflow">if</span>(streamIn.isOpen()&amp;streamIn.isStopped()){
<a name="l00207"></a>00207 <span class="preprocessor">#ifdef FILEIN // reset the buffer pointer</span>
<a name="l00208"></a>00208 <span class="preprocessor"></span>            filein_idx = 0;
<a name="l00209"></a>00209 <span class="preprocessor">#endif // FILEIN</span>
<a name="l00210"></a>00210 <span class="preprocessor"></span>            streamIn.start();
<a name="l00211"></a>00211             emit message(tr(<span class="stringliteral">&quot;AudioIO: Input stream started&quot;</span>));
<a name="l00212"></a>00212         } <span class="keywordflow">else</span> <span class="keywordflow">if</span>(streamIn.isStopped()) {
<a name="l00213"></a>00213             emit message(tr(<span class="stringliteral">&quot;AudioIO: Input stream is not open!&quot;</span>),1);
<a name="l00214"></a>00214         } <span class="keywordflow">else</span> {
<a name="l00215"></a>00215             emit message(tr(<span class="stringliteral">&quot;AudioIO: Input stream is already running&quot;</span>),1);
<a name="l00216"></a>00216         }
<a name="l00217"></a>00217     }
<a name="l00218"></a>00218 
<a name="l00219"></a>00219     <span class="keywordflow">if</span>(nOut&gt;0){
<a name="l00220"></a>00220         <span class="keywordflow">if</span>(streamOut.isOpen()&amp;streamOut.isStopped()){
<a name="l00221"></a>00221 <span class="preprocessor">#ifdef FILEOUT // reset the file buffer</span>
<a name="l00222"></a>00222 <span class="preprocessor"></span>        fileout_l.fill(0);
<a name="l00223"></a>00223         fileout_r.fill(0);
<a name="l00224"></a>00224         <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=0;i&lt;8;i++){
<a name="l00225"></a>00225             fileout_multi[i].fill(0);
<a name="l00226"></a>00226         }
<a name="l00227"></a>00227         fileout_idx=0;
<a name="l00228"></a>00228 <span class="preprocessor">#endif // FILEOUT</span>
<a name="l00229"></a>00229 <span class="preprocessor"></span>            streamOut.start();
<a name="l00230"></a>00230             emit message(tr(<span class="stringliteral">&quot;AudioIO: Output stream started&quot;</span>));
<a name="l00231"></a>00231         } <span class="keywordflow">else</span> <span class="keywordflow">if</span>(streamOut.isStopped()) {
<a name="l00232"></a>00232             emit message(tr(<span class="stringliteral">&quot;AudioIO: Output stream is not open!&quot;</span>),1);
<a name="l00233"></a>00233         } <span class="keywordflow">else</span> {
<a name="l00234"></a>00234             emit message(tr(<span class="stringliteral">&quot;AudioIO: Output stream is already running&quot;</span>),1);
<a name="l00235"></a>00235         }
<a name="l00236"></a>00236     }
<a name="l00237"></a>00237 }
<a name="l00238"></a>00238 
<a name="l00239"></a>00239 <span class="keywordtype">void</span> AudioIO::stop()
<a name="l00240"></a>00240 {
<a name="l00241"></a>00241     <span class="keywordflow">if</span>(streamIn.isOpen()){
<a name="l00242"></a>00242         <span class="keywordflow">if</span>(streamIn.isActive()){
<a name="l00243"></a>00243             streamIn.stop();
<a name="l00244"></a>00244             emit message(tr(<span class="stringliteral">&quot;AudioIO: Input stream stopped&quot;</span>));
<a name="l00245"></a>00245         }
<a name="l00246"></a>00246     }
<a name="l00247"></a>00247 
<a name="l00248"></a>00248     <span class="keywordflow">if</span>(streamOut.isOpen()){
<a name="l00249"></a>00249         <span class="keywordflow">if</span>(streamOut.isActive()){
<a name="l00250"></a>00250             streamOut.stop();
<a name="l00251"></a>00251             emit message(tr(<span class="stringliteral">&quot;AudioIO: Input stream stopped&quot;</span>));
<a name="l00252"></a>00252 <span class="preprocessor">#ifdef FILEOUT // Write the output to a file</span>
<a name="l00253"></a>00253 <span class="preprocessor"></span>            QDateTime dt=QDateTime::currentDateTime();
<a name="l00254"></a>00254             QFile file(FILEOUT_BASENAME+dt.toString(<span class="stringliteral">&quot;yyMMdd_HHmm&quot;</span>)+<span class="stringliteral">&quot;.log&quot;</span>);
<a name="l00255"></a>00255             <span class="keywordflow">if</span>(file.open(QFile::WriteOnly | QFile::Text)){
<a name="l00256"></a>00256                 QTextStream fout(&amp;file);
<a name="l00257"></a>00257                 fout &lt;&lt; <span class="stringliteral">&quot;# Debugging output from Client on &quot;</span> &lt;&lt; dt.toString(<span class="stringliteral">&quot;d. MMM. yyyy at HH:mm&quot;</span>) &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>;
<a name="l00258"></a>00258                 fout &lt;&lt; qSetFieldWidth(10) &lt;&lt; left &lt;&lt; <span class="stringliteral">&quot;# Left&quot;</span> &lt;&lt; <span class="stringliteral">&quot;Right&quot;</span> &lt;&lt; qSetFieldWidth(0) &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>;
<a name="l00259"></a>00259                 <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=0;i&lt;fileout_idx;i++){
<a name="l00260"></a>00260                     fout &lt;&lt; qSetFieldWidth(10) &lt;&lt; fileout_l[i] &lt;&lt; fileout_r[i] &lt;&lt; qSetFieldWidth(0) &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>;
<a name="l00261"></a>00261                 }
<a name="l00262"></a>00262                 file.close();
<a name="l00263"></a>00263             }
<a name="l00264"></a>00264             file.setFileName(FILEOUT_BASENAME+QString::QString(<span class="stringliteral">&quot;multi_&quot;</span>)+dt.toString(<span class="stringliteral">&quot;yyMMdd_HHmm&quot;</span>)+<span class="stringliteral">&quot;.log&quot;</span>);
<a name="l00265"></a>00265             <span class="keywordflow">if</span>(file.open(QFile::WriteOnly | QFile::Text)){
<a name="l00266"></a>00266                 QTextStream fout(&amp;file);
<a name="l00267"></a>00267                 fout &lt;&lt; <span class="stringliteral">&quot;# Debugging output from Client on &quot;</span> &lt;&lt; dt.toString(<span class="stringliteral">&quot;d. MMM. yyyy at HH:mm&quot;</span>) &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>;
<a name="l00268"></a>00268                 fout &lt;&lt; qSetFieldWidth(10) &lt;&lt; left &lt;&lt; <span class="stringliteral">&quot;# channel 1-8&quot;</span> &lt;&lt; qSetFieldWidth(0) &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>;
<a name="l00269"></a>00269                 <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=0;i&lt;fileout_idx;i++){
<a name="l00270"></a>00270                     fout &lt;&lt; qSetFieldWidth(10);
<a name="l00271"></a>00271                     <span class="keywordflow">for</span>(<span class="keywordtype">int</span> j=0;j&lt;8;j++){
<a name="l00272"></a>00272                         fout &lt;&lt; fileout_multi[j][i];
<a name="l00273"></a>00273                     }
<a name="l00274"></a>00274                     fout &lt;&lt; qSetFieldWidth(0) &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>;
<a name="l00275"></a>00275                 }
<a name="l00276"></a>00276                 file.close();
<a name="l00277"></a>00277             }
<a name="l00278"></a>00278 <span class="preprocessor">#endif // FILEOUT</span>
<a name="l00279"></a>00279 <span class="preprocessor"></span>        }
<a name="l00280"></a>00280     }
<a name="l00281"></a>00281 
<a name="l00282"></a>00282 }
<a name="l00283"></a>00283 
<a name="l00284"></a>00284 <span class="keywordtype">bool</span> AudioIO::isrunning(){
<a name="l00285"></a>00285     <span class="keywordflow">return</span> (streamIn.isActive()|streamOut.isActive());
<a name="l00286"></a>00286 }
<a name="l00287"></a>00287 
<a name="l00288"></a>00288 
<a name="l00289"></a>00289 <span class="keywordtype">void</span> AudioIO::muteMic(<span class="keywordtype">bool</span> mute)
<a name="l00290"></a>00290 {
<a name="l00291"></a>00291     muteIn=mute;
<a name="l00292"></a>00292 }
<a name="l00293"></a>00293 
<a name="l00294"></a>00294 <span class="keywordtype">bool</span> AudioIO::isMuted()
<a name="l00295"></a>00295 {
<a name="l00296"></a>00296    <span class="keywordflow">return</span> muteIn;
<a name="l00297"></a>00297 }
<a name="l00298"></a>00298 
<a name="l00299"></a>00299 <span class="keywordtype">void</span> AudioIO::enablePostFilter(<span class="keywordtype">bool</span> doFilt){
<a name="l00300"></a>00300     postFilterEnabled = (doFilt &amp; postFilterLoaded);<span class="comment">// only enable filtering if there is actually a filter loaded</span>
<a name="l00301"></a>00301 }
<a name="l00302"></a>00302 
<a name="l00303"></a>00303 <span class="keywordtype">bool</span> AudioIO::isPostFilterEnabled(){
<a name="l00304"></a>00304     <span class="keywordflow">return</span> postFilterEnabled;
<a name="l00305"></a>00305 }
<a name="l00306"></a>00306 
<a name="l00307"></a>00307 <span class="keywordtype">void</span> AudioIO::loadPostFilter(QString filename){
<a name="l00308"></a>00308     QFile file(filename);
<a name="l00309"></a>00309     <span class="keywordflow">if</span>(file.open(QFile::ReadOnly | QFile::Text)){
<a name="l00310"></a>00310         QTextStream fin(&amp;file);
<a name="l00311"></a>00311         QString line = fin.readLine(); <span class="comment">// Read headerline - should be in the format:</span>
<a name="l00312"></a>00312                                        <span class="comment">//   #firfilter mono|stereo ntaps</span>
<a name="l00313"></a>00313                                        <span class="comment">// eg. for a mono filter with 128 taps:</span>
<a name="l00314"></a>00314                                        <span class="comment">//   #firfilter mono 128</span>
<a name="l00315"></a>00315                                        <span class="comment">// or for a stereo (different left/right filters) with 256 taps:</span>
<a name="l00316"></a>00316                                        <span class="comment">//   #firfilter stereo 256</span>
<a name="l00317"></a>00317         QStringList fields = line.split(<span class="stringliteral">&quot; &quot;</span>, QString::SkipEmptyParts);
<a name="l00318"></a>00318         <span class="keywordflow">if</span>( (fields.size()==3) &amp; (fields.at(0)==<span class="stringliteral">&quot;#firfilter&quot;</span>)){
<a name="l00319"></a>00319             <span class="keywordtype">int</span> channels = 0,taps=0;
<a name="l00320"></a>00320             <span class="keywordflow">if</span>(fields.at(1)==<span class="stringliteral">&quot;mono&quot;</span>){
<a name="l00321"></a>00321                 channels=1;
<a name="l00322"></a>00322             } <span class="keywordflow">else</span> <span class="keywordflow">if</span>(fields.at(1)==<span class="stringliteral">&quot;stereo&quot;</span>) {
<a name="l00323"></a>00323                 channels=2;
<a name="l00324"></a>00324             } <span class="keywordflow">else</span> {
<a name="l00325"></a>00325                 emit message(tr(<span class="stringliteral">&quot;The input file \&quot;%1\&quot; is not a valid filter&quot;</span>));
<a name="l00326"></a>00326             }
<a name="l00327"></a>00327             taps=fields.at(2).toShort();
<a name="l00328"></a>00328             bufsize=1 &lt;&lt; (int)ceil(log2((<span class="keywordtype">double</span>)taps)); <span class="comment">// buffersize the next power of 2 to make effective circular buffer</span>
<a name="l00329"></a>00329             <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=0;i&lt;channels;i++){
<a name="l00330"></a>00330                 postBuf.append(QVector&lt;signed short&gt; (bufsize));
<a name="l00331"></a>00331                 postFilter.append(QVector&lt;signed short&gt; (bufsize));
<a name="l00332"></a>00332             }
<a name="l00333"></a>00333 
<a name="l00334"></a>00334 
<a name="l00335"></a>00335         }
<a name="l00336"></a>00336 
<a name="l00337"></a>00337 <span class="comment">//        while(!fin.atEnd()){</span>
<a name="l00338"></a>00338 <span class="comment">//            line = fin.readLine();</span>
<a name="l00339"></a>00339 <span class="comment">//            if(line.size()&gt;0){ // ignore empty lines</span>
<a name="l00340"></a>00340 <span class="comment">//                if(line.trimmed()[0] != QChar(&#39;#&#39;)){ // ignore commented lines</span>
<a name="l00341"></a>00341 <span class="comment">//                    fields = line.split(&quot; &quot;, QString::SkipEmptyParts);</span>
<a name="l00342"></a>00342 <span class="comment">//                    if(filein.size()&lt;fields.size()){ // make sure we have buffers allocated</span>
<a name="l00343"></a>00343 <span class="comment">//                        filein.resize(fields.size());</span>
<a name="l00344"></a>00344 <span class="comment">//                    }</span>
<a name="l00345"></a>00345 <span class="comment">//                    for(int i = 0 ; i&lt; fields.size() ; i++){ // write to the buffers</span>
<a name="l00346"></a>00346 <span class="comment">//                        filein[i].append(fields.at(i).toShort());</span>
<a name="l00347"></a>00347 <span class="comment">//                    }</span>
<a name="l00348"></a>00348 <span class="comment">//                }</span>
<a name="l00349"></a>00349 <span class="comment">//            }</span>
<a name="l00350"></a>00350 <span class="comment">//        }</span>
<a name="l00351"></a>00351         file.close();
<a name="l00352"></a>00352     }
<a name="l00353"></a>00353 <span class="comment">//    if(filein.size()&lt;nIn){</span>
<a name="l00354"></a>00354 <span class="comment">//        filein.resize(nIn);</span>
<a name="l00355"></a>00355 <span class="comment">//        for(int i = 1; i &lt; filein.size() ; i++){</span>
<a name="l00356"></a>00356 <span class="comment">//            filein[i].resize(filein[0].size()); // make sure all buffers have the same size</span>
<a name="l00357"></a>00357 <span class="comment">//        }</span>
<a name="l00358"></a>00358 <span class="comment">//    }</span>
<a name="l00359"></a>00359 <span class="comment">//    filein_idx = 0;</span>
<a name="l00360"></a>00360 }
<a name="l00361"></a>00361 
<a name="l00362"></a>00362 <span class="keywordtype">bool</span> AudioIO::isPostFilterLoaded(){
<a name="l00363"></a>00363     <span class="keywordflow">return</span> postFilterLoaded;
<a name="l00364"></a>00364 }
<a name="l00365"></a>00365 
<a name="l00366"></a>00366 <span class="keywordtype">int</span> AudioIO::nChnIn(){
<a name="l00367"></a>00367     <span class="keywordflow">return</span> nIn;
<a name="l00368"></a>00368 }
<a name="l00369"></a>00369 
<a name="l00370"></a>00370 <span class="keywordtype">int</span> AudioIO::nChnOut(){
<a name="l00371"></a>00371     <span class="keywordflow">return</span> nOut;
<a name="l00372"></a>00372 }
<a name="l00373"></a>00373 
<a name="l00374"></a>00374 
<a name="l00375"></a>00375 QVector&lt;t_audioDevinfo&gt; AudioIO::deviceInfo(){
<a name="l00376"></a>00376     <span class="keywordflow">return</span> devs;
<a name="l00377"></a>00377 }
<a name="l00378"></a>00378 
<a name="l00379"></a>00379 <a class="code" href="structt__audio_devinfo.html">t_audioDevinfo</a> AudioIO::deviceInfo(<span class="keywordtype">int</span> devIdx){
<a name="l00380"></a>00380     <span class="keywordflow">if</span>( (devIdx&lt;0) | (devIdx&gt;=devs.size())){
<a name="l00381"></a>00381         <span class="keywordflow">return</span> <a class="code" href="structt__audio_devinfo.html">t_audioDevinfo</a>(); <span class="comment">// return an empty device if out of range</span>
<a name="l00382"></a>00382     }
<a name="l00383"></a>00383     <span class="keywordflow">return</span> devs[devIdx];
<a name="l00384"></a>00384 }
<a name="l00385"></a>00385 
<a name="l00386"></a>00386 
<a name="l00387"></a>00387 <span class="comment">// callbacks</span>
<a name="l00388"></a>00388 
<a name="l00389"></a>00389 <span class="keywordtype">int</span> AudioIO::PaCallbackIn (<span class="keyword">const</span> <span class="keywordtype">void</span> *input,
<a name="l00390"></a>00390                            <span class="keywordtype">void</span>* <span class="comment">/*output*/</span>,
<a name="l00391"></a>00391                            <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> framecount,
<a name="l00392"></a>00392                            <span class="keyword">const</span> PaStreamCallbackTimeInfo* <span class="comment">/*timeInfo*/</span>,
<a name="l00393"></a>00393                            PaStreamCallbackFlags <span class="comment">/*flags*/</span>)
<a name="l00394"></a>00394 {
<a name="l00395"></a>00395 
<a name="l00396"></a>00396     <span class="comment">// Read mic input if there is room for it in the buffer...</span>
<a name="l00397"></a>00397     <span class="keywordtype">signed</span> <span class="keywordtype">short</span> **in = (<span class="keywordtype">signed</span> <span class="keywordtype">short</span> **)input; <span class="comment">// cast PA input buffer to the right format</span>
<a name="l00398"></a>00398     <span class="keywordflow">if</span>(!muteIn){
<a name="l00399"></a>00399 <span class="preprocessor">#ifdef FILEIN</span>
<a name="l00400"></a>00400 <span class="preprocessor"></span>        (void)in; <span class="comment">// just for eliminating the warning</span>
<a name="l00401"></a>00401         <span class="keywordflow">if</span>(filein_idx + static_cast&lt;int&gt;(framecount) &lt; filein[0].size()){
<a name="l00402"></a>00402             <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=0;i &lt; std::min(audioIF-&gt;<a class="code" href="class_audio_interface.html#a9cee063cdbec8d17af8588b0486be515" title="Get the number of Capture channels.">nChnCapture</a>(),nIn);i++){ <span class="comment">// read from channel 0 to the maximum channel available in BOTH PA and interface</span>
<a name="l00403"></a>00403                 audioIF-&gt;<a class="code" href="class_audio_interface.html#adf47b99cee9fdeb3b843a624dfad2f4e" title="Write to a Capture channel.">writeCapture</a>(filein[i].data()+filein_idx,framecount,i);<span class="comment">// write to the buffer, ignoring surplus data</span>
<a name="l00404"></a>00404             }
<a name="l00405"></a>00405             filein_idx = filein_idx + framecount;
<a name="l00406"></a>00406         }
<a name="l00407"></a>00407 <span class="preprocessor">#else // FILEIN</span>
<a name="l00408"></a>00408 <span class="preprocessor"></span>        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=0;i &lt; std::min(audioIF-&gt;<a class="code" href="class_audio_interface.html#a9cee063cdbec8d17af8588b0486be515" title="Get the number of Capture channels.">nChnCapture</a>(),nIn);i++){ <span class="comment">// read from channel 0 to the maximum channel available in BOTH PA and interface</span>
<a name="l00409"></a>00409             audioIF-&gt;<a class="code" href="class_audio_interface.html#adf47b99cee9fdeb3b843a624dfad2f4e" title="Write to a Capture channel.">writeCapture</a>(in[i],framecount,i);<span class="comment">// write to the buffer, ignoring surplus data</span>
<a name="l00410"></a>00410         }
<a name="l00411"></a>00411 <span class="preprocessor">#endif // FILEIN</span>
<a name="l00412"></a>00412 <span class="preprocessor"></span><span class="comment">//        audioIF-&gt;writeOutput(in,framecount);// loopback buffer test</span>
<a name="l00413"></a>00413     }
<a name="l00414"></a>00414     <span class="keywordflow">return</span> paNoError;
<a name="l00415"></a>00415 }
<a name="l00416"></a>00416 
<a name="l00417"></a>00417 
<a name="l00418"></a>00418 <span class="keywordtype">int</span> AudioIO::PaCallbackOut (<span class="keyword">const</span> <span class="keywordtype">void</span>* <span class="comment">/*input*/</span>,
<a name="l00419"></a>00419                             <span class="keywordtype">void</span> *output,
<a name="l00420"></a>00420                             <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> framecount,
<a name="l00421"></a>00421                             <span class="keyword">const</span> PaStreamCallbackTimeInfo* <span class="comment">/*timeInfo*/</span>,
<a name="l00422"></a>00422                             PaStreamCallbackFlags <span class="comment">/*flags*/</span>)
<a name="l00423"></a>00423 {
<a name="l00424"></a>00424 
<a name="l00425"></a>00425     <span class="keywordflow">if</span>(nOut&gt;0){ <span class="comment">// only handle output if PA is set up for it</span>
<a name="l00426"></a>00426         <span class="keywordtype">signed</span> <span class="keywordtype">short</span> **out = (<span class="keywordtype">signed</span> <span class="keywordtype">short</span> **)output; <span class="comment">// cast PA output buffer to the right format</span>
<a name="l00427"></a>00427         <span class="keywordflow">if</span>(nOut==2){
<a name="l00428"></a>00428             <span class="keyword">static</span> QVector&lt;short&gt; tmp(framecount),tmpl(framecount),tmpr(framecount),outl(framecount),outr(framecount); <span class="comment">// static to avoid reallocation each callback</span>
<a name="l00429"></a>00429 
<a name="l00430"></a>00430             outl.fill(0); outr.fill(0);
<a name="l00431"></a>00431             <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=0 ; i &lt; audioIF-&gt;<a class="code" href="class_audio_interface.html#a30e09099d70d0c10d23422db185b3f38" title="Get the number of Output channels.">nChnOutput</a>() ; i++){ <span class="comment">// now go through each channel individually</span>
<a name="l00432"></a>00432                 tmp.fill(0); <span class="comment">// zero the vectors before each use, since we always  fill the output buffer with this!</span>
<a name="l00433"></a>00433                 <span class="keywordflow">if</span>( audioIF-&gt;<a class="code" href="class_audio_interface.html#a8364736e18cc33aeff7eeb389356fe88" title="Test how many samples are available on a particular Output channel.">nAvailOutput</a>(i) &gt;= <span class="keyword">static_cast&lt;</span><span class="keywordtype">long</span><span class="keyword">&gt;</span>(framecount)){ <span class="comment">// if there is anything in this channel</span>
<a name="l00434"></a>00434                     audioIF-&gt;<a class="code" href="class_audio_interface.html#a089f7cb8b1327c9c83e2442b3ef5c4d0" title="Read from an Output channel.">readOutput</a>(tmp.data(),framecount,i); <span class="comment">// read it to a temporary variable</span>
<a name="l00435"></a>00435                 }
<a name="l00436"></a>00436 <span class="preprocessor">#ifdef USE_SCENE</span>
<a name="l00437"></a>00437 <span class="preprocessor"></span>                    sceneIF-&gt;process(audioIF-&gt;<a class="code" href="class_audio_interface.html#ab91b9a3336a716ca6689da5e1411d57e" title="Get the ID associated to a particular Output channel.">outputID</a>(i),tmp.data(),tmpl.data(),tmpr.data(),framecount);
<a name="l00438"></a>00438 <span class="preprocessor">#else</span>
<a name="l00439"></a>00439 <span class="preprocessor"></span>                    tmpl = tmp;
<a name="l00440"></a>00440                     tmpr = tmp;
<a name="l00441"></a>00441 <span class="preprocessor">#endif</span>
<a name="l00442"></a>00442 <span class="preprocessor"></span>                    <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> j=0;j&lt;framecount ; j++){ <span class="comment">// and mix this entire channel into the target</span>
<a name="l00443"></a>00443 <span class="preprocessor">#ifdef FILEOUT</span>
<a name="l00444"></a>00444 <span class="preprocessor"></span>                        fileout_multi[i][fileout_idx+j]=tmpl[j];
<a name="l00445"></a>00445 <span class="comment">//                        fileout_multi[i][fileout_idx+j]=tmpr[j];</span>
<a name="l00446"></a>00446 <span class="preprocessor">#endif</span>
<a name="l00447"></a>00447 <span class="preprocessor"></span>                        outl[j]=outl[j]+tmpl[j]; <span class="comment">// append to final output variables</span>
<a name="l00448"></a>00448                         outr[j]=outr[j]+tmpr[j];
<a name="l00449"></a>00449                     }
<a name="l00450"></a>00450             }
<a name="l00451"></a>00451 
<a name="l00452"></a>00452             <span class="comment">// Headphone filtering of outl and outr goes here</span>
<a name="l00453"></a>00453             <span class="comment">// A macro is used to wrap the filtering or do nothing</span>
<a name="l00454"></a>00454             <span class="comment">// This limits the use of #ifdef&#39;s within #ifdef&#39;s</span>
<a name="l00455"></a>00455             <span class="comment">// note that the part &quot;hptf-&gt;&quot; is dependent on what is defined in the header!</span>
<a name="l00456"></a>00456 <span class="preprocessor">#ifdef USE_HPTF</span>
<a name="l00457"></a>00457 <span class="preprocessor"></span><span class="preprocessor">#define hptfLeftFilter(x) static_cast&lt;short&gt;(hptf-&gt;leftFilter(static_cast&lt;double&gt;(x)/32767)*32767)</span>
<a name="l00458"></a>00458 <span class="preprocessor"></span><span class="preprocessor">#define hptfRightFilter(x) static_cast&lt;short&gt;(hptf-&gt;rightFilter(static_cast&lt;double&gt;(x)/32767)*32767)</span>
<a name="l00459"></a>00459 <span class="preprocessor"></span><span class="preprocessor">#else</span>
<a name="l00460"></a>00460 <span class="preprocessor"></span><span class="preprocessor">#define hptfLeftFilter(x) x</span>
<a name="l00461"></a>00461 <span class="preprocessor"></span><span class="preprocessor">#define hptfRightFilter(x) x</span>
<a name="l00462"></a>00462 <span class="preprocessor"></span><span class="preprocessor">#endif // USE_HPTF</span>
<a name="l00463"></a>00463 <span class="preprocessor"></span>
<a name="l00464"></a>00464 <span class="preprocessor">#ifdef FILEOUT</span>
<a name="l00465"></a>00465 <span class="preprocessor"></span>            <span class="keywordflow">if</span>(fileout_idx&lt;FILEOUT_SIZE){
<a name="l00466"></a>00466                 <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> j=0; j&lt;framecount ; j++) {
<a name="l00467"></a>00467                     fileout_l[fileout_idx] = hptfLeftFilter(outl[j]);
<a name="l00468"></a>00468                     fileout_r[fileout_idx++] = hptfRightFilter(outr[j]);
<a name="l00469"></a>00469                     out[0][j] = 0;
<a name="l00470"></a>00470                     out[1][j] = 0;
<a name="l00471"></a>00471                 }
<a name="l00472"></a>00472             }
<a name="l00473"></a>00473 <span class="preprocessor">#else // not FILEOUT</span>
<a name="l00474"></a>00474 <span class="preprocessor"></span>            <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> j=0; j&lt;framecount ; j++) {
<a name="l00475"></a>00475                 out[0][j] = hptfLeftFilter(outl[j]);
<a name="l00476"></a>00476             }
<a name="l00477"></a>00477             <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> j=0; j&lt;framecount ; j++) {
<a name="l00478"></a>00478                 out[1][j] = hptfRightFilter(outr[j]);
<a name="l00479"></a>00479             }
<a name="l00480"></a>00480 
<a name="l00481"></a>00481 <span class="preprocessor">#endif // FILEOUT</span>
<a name="l00482"></a>00482 <span class="preprocessor"></span>        } <span class="keywordflow">else</span> {
<a name="l00483"></a>00483             <span class="keyword">static</span> QVector&lt;signed short&gt; tmp(framecount),outtmp(framecount); <span class="comment">// static to avoid reallocation each callback</span>
<a name="l00484"></a>00484             tmp.fill(0);outtmp.fill(0); <span class="comment">// zero the vectors before each use, since we always  fill the output buffer with this!</span>
<a name="l00485"></a>00485             <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=0 ; i &lt; audioIF-&gt;<a class="code" href="class_audio_interface.html#a30e09099d70d0c10d23422db185b3f38" title="Get the number of Output channels.">nChnOutput</a>() ; i++){ <span class="comment">// now go through each channel individually</span>
<a name="l00486"></a>00486                 <span class="keywordflow">if</span>( audioIF-&gt;<a class="code" href="class_audio_interface.html#a8364736e18cc33aeff7eeb389356fe88" title="Test how many samples are available on a particular Output channel.">nAvailOutput</a>(i) &gt;= <span class="keyword">static_cast&lt;</span><span class="keywordtype">long</span><span class="keyword">&gt;</span>(framecount)){ <span class="comment">// if there is anything in this channel</span>
<a name="l00487"></a>00487                     audioIF-&gt;<a class="code" href="class_audio_interface.html#a089f7cb8b1327c9c83e2442b3ef5c4d0" title="Read from an Output channel.">readOutput</a>(tmp.data(),framecount,i); <span class="comment">// read it to a temporary variable</span>
<a name="l00488"></a>00488                     <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> j=0;j&lt;framecount ; j++){ <span class="comment">// and mix this entire channel into the target</span>
<a name="l00489"></a>00489 <span class="preprocessor">#ifdef USE_SCENE</span>
<a name="l00490"></a>00490 <span class="preprocessor"></span>                        outtmp[j]=outtmp[j]+tmp[j]*sceneIF-&gt;gain(audioIF-&gt;<a class="code" href="class_audio_interface.html#ab91b9a3336a716ca6689da5e1411d57e" title="Get the ID associated to a particular Output channel.">outputID</a>(i));
<a name="l00491"></a>00491 <span class="preprocessor">#else</span>
<a name="l00492"></a>00492 <span class="preprocessor"></span>                        outtmp[j]=outtmp[j]+tmp[j];
<a name="l00493"></a>00493 <span class="preprocessor">#endif // USE_SCENE</span>
<a name="l00494"></a>00494 <span class="preprocessor"></span>                    }
<a name="l00495"></a>00495                 }
<a name="l00496"></a>00496             }
<a name="l00497"></a>00497             <span class="comment">// and copy everything to the actual output buffer(s) - advantage is we fall back to 0 if nothing is available</span>
<a name="l00498"></a>00498 
<a name="l00499"></a>00499 <span class="preprocessor">#ifdef FILEOUT</span>
<a name="l00500"></a>00500 <span class="preprocessor"></span>            <span class="keywordflow">if</span>(fileout_idx&lt;FILEOUT_SIZE){
<a name="l00501"></a>00501                 <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> j=0; j&lt;framecount ; j++) {
<a name="l00502"></a>00502                     fileout_l[fileout_idx++] = outtmp[j];
<a name="l00503"></a>00503                 }
<a name="l00504"></a>00504             }
<a name="l00505"></a>00505             <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i = 0; i&lt;nOut; i++){
<a name="l00506"></a>00506                 <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> j=0; j&lt;framecount ; j++) {
<a name="l00507"></a>00507                     out[i][j] = 0;
<a name="l00508"></a>00508                 }
<a name="l00509"></a>00509             }
<a name="l00510"></a>00510 <span class="preprocessor">#else // not FILEOUT</span>
<a name="l00511"></a>00511 <span class="preprocessor"></span>            <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i = 0; i&lt;nOut; i++){
<a name="l00512"></a>00512                 <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> j=0; j&lt;framecount ; j++) {
<a name="l00513"></a>00513                     out[i][j] = outtmp[j];
<a name="l00514"></a>00514                 }
<a name="l00515"></a>00515             }
<a name="l00516"></a>00516 <span class="preprocessor">#endif // FILEOUT</span>
<a name="l00517"></a>00517 <span class="preprocessor"></span>        }
<a name="l00518"></a>00518     }
<a name="l00519"></a>00519 
<a name="l00520"></a>00520 <span class="comment">//    for(unsigned long i=0; i&lt;framecount ; i++) *out++ = *in++; // raw loopback test</span>
<a name="l00521"></a>00521     <span class="keywordflow">return</span> paNoError;
<a name="l00522"></a>00522 }
<a name="l00523"></a>00523 
</pre></div></div>
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><b>audioio.cpp</b>      </li>
      <li class="footer">Generated on Wed Dec 19 2012 00:54:12 for Beaming Audio by&#160;
<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.3 </li>
    </ul>
  </div>
<!--- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Defines</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>


</body>
</html>
