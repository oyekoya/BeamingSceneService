<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>Beaming Audio: Classes/sceneinterface.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript">
$(document).ready(initResizable);
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css"/>
</head>
<body onload='searchBox.OnSelectItem(0);'>
<!-- Generated by Doxygen 1.7.3 -->
<script type="text/javascript"><!--
var searchBox = new SearchBox("searchBox", "search",false,'Search');
--></script>
<div id="top">
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="BEAMING_LOGO2.jpg"></td>
  <td style="padding-left: 0.5em;">
   <div id="projectname">Beaming Audio&#160;<span id="projectnumber">0.9</span></div>
   <div id="projectbrief">Audio Client-Server for BEAMING</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.html"><span>Related&#160;Pages</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
      <li id="searchli">
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
      <li><a href="globals.html"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('sceneinterface_8cpp.html','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<h1>Classes/sceneinterface.cpp</h1>  </div>
</div>
<div class="contents">
<div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="preprocessor">#include &quot;sceneinterface.h&quot;</span>
<a name="l00002"></a>00002 <span class="preprocessor">#include &quot;client.h&quot;</span> <span class="comment">//  From BEAMING svn: the netManager Client Library</span>
<a name="l00003"></a>00003 
<a name="l00004"></a>00004 
<a name="l00008"></a><a class="code" href="structt__scene_info_data.html#ad32854fb07b92e491f75af898a3a15c3">00008</a> <a class="code" href="structt__scene_info_data.html#ad32854fb07b92e491f75af898a3a15c3">t_sceneInfoData::t_sceneInfoData</a>(<span class="keywordtype">double</span> igain, <span class="keywordtype">double</span> iazimuth, <span class="keywordtype">double</span> ielevation, <span class="keywordtype">float</span> ix, <span class="keywordtype">float</span> iy, <span class="keywordtype">float</span> iz)
<a name="l00009"></a>00009     :
<a name="l00010"></a>00010     gain(igain),
<a name="l00011"></a>00011     sgain(igain*GAIN_SCALE),
<a name="l00012"></a>00012     azimuth(iazimuth),
<a name="l00013"></a>00013     elevation(ielevation),
<a name="l00014"></a>00014     translation(ix,iy,iz)
<a name="l00015"></a>00015 {}
<a name="l00016"></a>00016 
<a name="l00022"></a><a class="code" href="structt__process_info.html#a2221096a6ef57600bdeea1c991e7a606">00022</a> <a class="code" href="structt__process_info.html#a2221096a6ef57600bdeea1c991e7a606">t_processInfo::t_processInfo</a>(<span class="keywordtype">bool</span> init){
<a name="l00023"></a>00023     <span class="keywordflow">if</span>(init){
<a name="l00024"></a>00024         binaural = <span class="keyword">new</span> AauBinFilter();
<a name="l00025"></a>00025     } <span class="keywordflow">else</span> {
<a name="l00026"></a>00026         binaural = NULL;
<a name="l00027"></a>00027     }
<a name="l00028"></a>00028 }
<a name="l00029"></a>00029 
<a name="l00034"></a><a class="code" href="structt__process_info.html#a9a759605078c5913be327d250f2dcdc7">00034</a> <a class="code" href="structt__process_info.html#a9a759605078c5913be327d250f2dcdc7">t_processInfo::~t_processInfo</a>(){
<a name="l00035"></a>00035     <span class="keywordflow">if</span>(((<span class="keywordtype">long</span>)(binaural))!=0){
<a name="l00036"></a>00036         <span class="keyword">delete</span> binaural;
<a name="l00037"></a>00037     }
<a name="l00038"></a>00038 }
<a name="l00039"></a>00039 
<a name="l00040"></a>00040 
<a name="l00045"></a><a class="code" href="class_scene_interface.html#a52b4e22cae0a0eb85223417458fc6a81">00045</a> <a class="code" href="class_scene_interface.html#a52b4e22cae0a0eb85223417458fc6a81">SceneInterface::SceneInterface</a>(QObject *parent) :
<a name="l00046"></a>00046     QThread(parent),
<a name="l00047"></a>00047     isConnected(false)
<a name="l00048"></a>00048 {
<a name="l00049"></a>00049 
<a name="l00050"></a>00050 }
<a name="l00051"></a>00051 
<a name="l00052"></a>00052 SceneInterface::~SceneInterface(){
<a name="l00053"></a>00053     disconnectFromScene();
<a name="l00054"></a>00054     wait();
<a name="l00055"></a>00055 }
<a name="l00056"></a>00056 
<a name="l00064"></a>00064 <span class="comment">//#define SCENEDBG</span>
<a name="l00065"></a>00065 
<a name="l00066"></a>00066 <span class="preprocessor">#ifdef SCENEDBG</span>
<a name="l00067"></a>00067 <span class="preprocessor"></span><span class="preprocessor">#include &lt;QDebug&gt;</span>
<a name="l00068"></a>00068 <span class="preprocessor">#endif</span>
<a name="l00069"></a>00069 <span class="preprocessor"></span><span class="keywordtype">void</span> SceneInterface::run(){
<a name="l00070"></a>00070     QVector&lt;QString&gt; nodeid(8);
<a name="l00071"></a>00071     QVector&lt; QVector&lt;float&gt; &gt; node(8);
<a name="l00072"></a>00072     <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=0;i&lt;8;i++){
<a name="l00073"></a>00073         node[i].resize(7);
<a name="l00074"></a>00074         nodeid[i]=QString::number(i);
<a name="l00075"></a>00075     }
<a name="l00076"></a>00076     msleep(5000);
<a name="l00077"></a>00077     check();
<a name="l00078"></a>00078     <span class="keywordtype">char</span> sceneinfo[1024],tmphost[128],tmpurl[128]; <span class="comment">// Variables for obtaining information from the scene</span>
<a name="l00079"></a>00079 <span class="preprocessor">#ifdef SCENEDBG</span>
<a name="l00080"></a>00080 <span class="preprocessor"></span>    qDebug() &lt;&lt; <span class="stringliteral">&quot;Connected clients: &quot;</span> &lt;&lt; getPeersInfo(sceneinfo);
<a name="l00081"></a>00081     qDebug() &lt;&lt; sceneinfo;
<a name="l00082"></a>00082 <span class="preprocessor">#endif</span>
<a name="l00083"></a>00083 <span class="preprocessor"></span>    <span class="keywordflow">while</span>(isConnected){
<a name="l00084"></a>00084 <span class="preprocessor">#ifdef SCENEDBG</span>
<a name="l00085"></a>00085 <span class="preprocessor"></span>        qDebug() &lt;&lt; <span class="stringliteral">&quot;\n--------------------------------------------------------------------\n&quot;</span>;
<a name="l00086"></a>00086 <span class="preprocessor">#endif</span>
<a name="l00087"></a>00087 <span class="preprocessor"></span>        QReadLocker srlocker(&amp;infoMutex);
<a name="l00088"></a>00088         <span class="keywordflow">if</span>(sceneData.size()&gt;0){ <span class="comment">// only obtain data if there is actually something to retreive data for</span>
<a name="l00089"></a>00089             srlocker.unlock();
<a name="l00090"></a>00090             CMatrix mVisitor,mLocal,mTmp; <span class="comment">// Transformation matrix class</span>
<a name="l00091"></a>00091             CVec3 debugtrans;
<a name="l00092"></a>00092             check();
<a name="l00093"></a>00093             <span class="comment">// If there are multiple nodes available, it is an avatar skeleton, which we wish to traverse</span>
<a name="l00094"></a>00094             <span class="keywordflow">if</span>(getNodesInfo(myID.toAscii().data(),sceneinfo)&gt;1){
<a name="l00095"></a>00095                 mVisitor.Identity(); <span class="comment">// start with identity matrix</span>
<a name="l00096"></a>00096                 <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=2;i&lt;8;i++){ <span class="comment">// loop through nodes 2 to 7</span>
<a name="l00097"></a>00097                     <span class="keywordflow">if</span>(getAvatarSpecificData(myID.toAscii().data(),myName.toAscii().data(),nodeid[i].toAscii().data(),node[i].data())){ <span class="comment">// fetch the data from the scene</span>
<a name="l00098"></a>00098                         CQuat(node[i][3],node[i][4],node[i][5],node[i][6]).ToMatrix(mTmp.mf); <span class="comment">// fill out a transformation matrix with this node</span>
<a name="l00099"></a>00099 <span class="comment">//                        mTmp=mTmp.InvertRot(); // apparently they cannot agree with themselves on the basis of rotation/translation...</span>
<a name="l00100"></a>00100                         mTmp.mf[12] = node[i][0];
<a name="l00101"></a>00101                         mTmp.mf[13] = node[i][1];
<a name="l00102"></a>00102                         mTmp.mf[14] = node[i][2];
<a name="l00103"></a>00103 <span class="comment">//                        mVisitor=mVisitor*mTmp; // concatenate this node to the visitor transformation</span>
<a name="l00104"></a>00104                         mVisitor=mTmp*mVisitor; <span class="comment">// concatenate this node to the visitor transformation</span>
<a name="l00105"></a>00105 
<a name="l00106"></a>00106 <span class="preprocessor">#ifdef SCENEDBG</span>
<a name="l00107"></a>00107 <span class="preprocessor"></span>                        qDebug() &lt;&lt; <span class="stringliteral">&quot;Visitor node&quot;</span> &lt;&lt; nodeid[i] &lt;&lt; <span class="stringliteral">&quot;: x: &quot;</span> &lt;&lt; node[i][0] &lt;&lt; <span class="stringliteral">&quot; y: &quot;</span> &lt;&lt; node[i][1] &lt;&lt; <span class="stringliteral">&quot; z: &quot;</span> &lt;&lt; node[i][2] &lt;&lt; <span class="stringliteral">&quot; qx: &quot;</span> &lt;&lt; node[i][3] &lt;&lt; <span class="stringliteral">&quot; qy: &quot;</span> &lt;&lt; node[i][4] &lt;&lt; <span class="stringliteral">&quot; qz: &quot;</span> &lt;&lt; node[i][5] &lt;&lt; <span class="stringliteral">&quot; qw: &quot;</span> &lt;&lt; node[i][6];
<a name="l00108"></a>00108                         <span class="keywordtype">float</span> head, bank, att;
<a name="l00109"></a>00109                         mTmp.ToEuler(&amp;head,&amp;bank,&amp;att);
<a name="l00110"></a>00110                         qDebug() &lt;&lt; <span class="stringliteral">&quot;   head: &quot;</span> &lt;&lt; head &lt;&lt; <span class="stringliteral">&quot; bank: &quot;</span> &lt;&lt; bank &lt;&lt; <span class="stringliteral">&quot; att: &quot;</span> &lt;&lt; att;
<a name="l00111"></a>00111                         debugtrans = mVisitor.GetTranslate();
<a name="l00112"></a>00112                         qDebug() &lt;&lt; <span class="stringliteral">&quot;   Visitor translation:&quot;</span> &lt;&lt; debugtrans.x &lt;&lt; <span class="stringliteral">&quot; &quot;</span> &lt;&lt; debugtrans.y &lt;&lt; <span class="stringliteral">&quot; &quot;</span> &lt;&lt; debugtrans.z &lt;&lt; <span class="stringliteral">&quot; Distance: &quot;</span> &lt;&lt; debugtrans.Distance(CVec3());
<a name="l00113"></a>00113 <span class="preprocessor">#endif</span>
<a name="l00114"></a>00114 <span class="preprocessor"></span>                    } <span class="keywordflow">else</span> {
<a name="l00115"></a>00115                         message(tr(<span class="stringliteral">&quot;No visitor data for %1 (node _%2)&quot;</span>).arg(myID,i),<span class="keyword">true</span>);
<a name="l00116"></a>00116                         message(tr(<span class="stringliteral">&quot;Connected clients: %1&quot;</span>).arg(getPeersInfo(sceneinfo)),<span class="keyword">false</span>);
<a name="l00117"></a>00117                         message(sceneinfo,<span class="keyword">false</span>);
<a name="l00118"></a>00118                         <span class="keywordflow">break</span>;
<a name="l00119"></a>00119                     }
<a name="l00120"></a>00120                 }
<a name="l00121"></a>00121 
<a name="l00122"></a>00122             } <span class="keywordflow">else</span> { <span class="comment">// only a single node is available for a tracking point - this generally should not happen and means someone else implemented something wrong</span>
<a name="l00123"></a>00123                 <span class="comment">// format of sceneinfo after using getNodesInfo is NODENAME1,NODEID1,NODETYPE1,NODECFG1;NODENAME2,NODEID2,NODETYPE2,NODECFG2;...</span>
<a name="l00124"></a>00124                 <span class="keywordflow">if</span>(getAvatarSpecificData(myID.toAscii().data(), <span class="comment">// Our GUID</span>
<a name="l00125"></a>00125                                          QString::fromAscii(sceneinfo).section(<span class="charliteral">&#39;;&#39;</span>,0,0).section(<span class="charliteral">&#39;,&#39;</span>,0,0).toAscii().data(), <span class="comment">// First NODENAME</span>
<a name="l00126"></a>00126                                          QString::fromAscii(sceneinfo).section(<span class="charliteral">&#39;;&#39;</span>,0,0).section(<span class="charliteral">&#39;,&#39;</span>,1,1).toAscii().data(), <span class="comment">// First NODEID</span>
<a name="l00127"></a>00127                                          node[0].data())){ <span class="comment">// fetch the data from the scene</span>
<a name="l00128"></a>00128                     CQuat(node[0][3],node[0][4],node[0][5],node[0][6]).ToMatrix(mVisitor.mf); <span class="comment">// fill out a transformation matrix with this node</span>
<a name="l00129"></a>00129                     mVisitor=mVisitor.InvertRot(); <span class="comment">// apparently they cannot agree with themselves on the basis of rotation/translation...</span>
<a name="l00130"></a>00130                     mVisitor.mf[12] = node[0][0];
<a name="l00131"></a>00131                     mVisitor.mf[13] = node[0][1];
<a name="l00132"></a>00132                     mVisitor.mf[14] = node[0][2];
<a name="l00133"></a>00133 
<a name="l00134"></a>00134 <span class="preprocessor">#ifdef SCENEDBG</span>
<a name="l00135"></a>00135 <span class="preprocessor"></span>                    qDebug() &lt;&lt; <span class="stringliteral">&quot;Visitor node&quot;</span> &lt;&lt; QString::fromAscii(sceneinfo).section(<span class="charliteral">&#39;;&#39;</span>,0,0).section(<span class="charliteral">&#39;,&#39;</span>,0,0).toAscii().data() &lt;&lt; <span class="stringliteral">&quot;: x: &quot;</span> &lt;&lt; node[0][0] &lt;&lt; <span class="stringliteral">&quot; y: &quot;</span> &lt;&lt; node[0][1] &lt;&lt; <span class="stringliteral">&quot; z: &quot;</span> &lt;&lt; node[0][2] &lt;&lt; <span class="stringliteral">&quot; qx: &quot;</span> &lt;&lt; node[0][3] &lt;&lt; <span class="stringliteral">&quot; qy: &quot;</span> &lt;&lt; node[0][4] &lt;&lt; <span class="stringliteral">&quot; qz: &quot;</span> &lt;&lt; node[0][5] &lt;&lt; <span class="stringliteral">&quot; qw: &quot;</span> &lt;&lt; node[0][6];
<a name="l00136"></a>00136                     <span class="keywordtype">float</span> head, bank, att;
<a name="l00137"></a>00137                     mTmp.ToEuler(&amp;head,&amp;bank,&amp;att);
<a name="l00138"></a>00138                     qDebug() &lt;&lt; <span class="stringliteral">&quot;   head: &quot;</span> &lt;&lt; head &lt;&lt; <span class="stringliteral">&quot; bank: &quot;</span> &lt;&lt; bank &lt;&lt; <span class="stringliteral">&quot; att: &quot;</span> &lt;&lt; att;
<a name="l00139"></a>00139                     debugtrans = mVisitor.GetTranslate();
<a name="l00140"></a>00140                     qDebug() &lt;&lt; <span class="stringliteral">&quot;   Visitor translation:&quot;</span> &lt;&lt; debugtrans.x &lt;&lt; <span class="stringliteral">&quot; &quot;</span> &lt;&lt; debugtrans.y &lt;&lt; <span class="stringliteral">&quot; &quot;</span> &lt;&lt; debugtrans.z &lt;&lt; <span class="stringliteral">&quot; Distance: &quot;</span> &lt;&lt; debugtrans.Distance(CVec3());
<a name="l00141"></a>00141 <span class="preprocessor">#endif</span>
<a name="l00142"></a>00142 <span class="preprocessor"></span>                } <span class="keywordflow">else</span> {
<a name="l00143"></a>00143                     message(tr(<span class="stringliteral">&quot;No visitor data for %1 (node %2)&quot;</span>).arg(myID,QString::fromAscii(sceneinfo).section(<span class="charliteral">&#39;;&#39;</span>,0,0).section(<span class="charliteral">&#39;,&#39;</span>,0,0)),<span class="keyword">true</span>);
<a name="l00144"></a>00144                     message(tr(<span class="stringliteral">&quot;Connected clients: %1&quot;</span>).arg(getPeersInfo(sceneinfo)),<span class="keyword">false</span>);
<a name="l00145"></a>00145                     message(sceneinfo,<span class="keyword">false</span>);
<a name="l00146"></a>00146                     <span class="keywordflow">break</span>;
<a name="l00147"></a>00147                 }
<a name="l00148"></a>00148             }
<a name="l00149"></a>00149 
<a name="l00150"></a>00150             mVisitor=mVisitor.InvertSimple(); <span class="comment">// finally, invert the visitor transformation so we now have a description of origo from visitor point of view</span>
<a name="l00151"></a>00151 
<a name="l00152"></a>00152             QList&lt;QString&gt; locals=<a class="code" href="class_scene_interface.html#ac6fca129f77e5673b3d8df5381e01125" title="get a list of ID&amp;#39;s registered in this class">IDs</a>(); <span class="comment">// Read the ID&#39;s of the locals we are going to use - format is &quot;GUID,AVATAR_NAME&quot;</span>
<a name="l00153"></a>00153             <span class="keywordflow">for</span>(<span class="keywordtype">int</span> loc=0;loc&lt;locals.size();loc++){ <span class="comment">// for each local</span>
<a name="l00154"></a>00154                 <span class="keywordtype">bool</span> updated=<span class="keyword">false</span>;
<a name="l00155"></a>00155                 <span class="comment">// HACK!</span>
<a name="l00156"></a>00156                 <span class="comment">// special processing of identifier because SSSA stream data with multiple locals for each GUID,</span>
<a name="l00157"></a>00157                 <span class="comment">// with nodeID&#39;s named &quot;LOCAL0_7&quot; etc.</span>
<a name="l00158"></a>00158                 <span class="keywordflow">if</span>(locals.at(loc).contains(<span class="stringliteral">&quot;;&quot;</span>)){
<a name="l00159"></a>00159                     QString thisGUID = locals[loc].section(<span class="stringliteral">&quot;;&quot;</span>,0,0).toAscii().data();
<a name="l00160"></a>00160                     QString thisNodeName = locals[loc].section(<span class="stringliteral">&quot;;&quot;</span>,1,1).toAscii().data(); <span class="comment">// don&#39;t know about this! modified due to altered scene API!</span>
<a name="l00161"></a>00161                     QString thisNodeID = locals[loc].section(<span class="stringliteral">&quot;;&quot;</span>,1,1).toAscii().data();
<a name="l00162"></a>00162                     getNodesInfo(thisGUID.toAscii().data(),sceneinfo);
<a name="l00163"></a>00163                     QString localType = QString::fromAscii(sceneinfo).section(<span class="charliteral">&#39;;&#39;</span>,0,0).section(<span class="charliteral">&#39;,&#39;</span>,1);
<a name="l00164"></a>00164                     <span class="keywordflow">if</span>(localType.compare(<span class="stringliteral">&quot;AVATAR&quot;</span>)==0){
<a name="l00165"></a>00165 <span class="preprocessor">#ifdef SCENEDBG</span>
<a name="l00166"></a>00166 <span class="preprocessor"></span>                        qDebug() &lt;&lt; <span class="stringliteral">&quot;SSSA \&quot;LOCALX_N\&quot; processing&quot;</span>;
<a name="l00167"></a>00167 <span class="preprocessor">#endif</span>
<a name="l00168"></a>00168 <span class="preprocessor"></span>                        mLocal.Identity();
<a name="l00169"></a>00169                         <span class="keywordflow">if</span>(getAvatarSpecificData(thisGUID.toAscii().data(),thisNodeName.toAscii().data(),thisNodeID.toAscii().data(),node[0].data())){ <span class="comment">// fetch the data from the scene</span>
<a name="l00170"></a>00170                             CQuat(node[0][3],node[0][4],node[0][5],node[0][6]).ToMatrix(mLocal.mf); <span class="comment">// fill out a transformation matrix with this node</span>
<a name="l00171"></a>00171                             mLocal=mLocal.InvertRot(); <span class="comment">// apparently they cannot agree with themselves on the basis of rotation/translation...</span>
<a name="l00172"></a>00172                             mLocal.mf[12] = node[0][0];
<a name="l00173"></a>00173                             mLocal.mf[13] = node[0][1];
<a name="l00174"></a>00174                             mLocal.mf[14] = node[0][2];
<a name="l00175"></a>00175                             updated=<span class="keyword">true</span>;
<a name="l00176"></a>00176 
<a name="l00177"></a>00177 <span class="preprocessor">#ifdef SCENEDBG</span>
<a name="l00178"></a>00178 <span class="preprocessor"></span>                            qDebug() &lt;&lt; <span class="stringliteral">&quot;Local SSSA node&quot;</span> &lt;&lt; thisNodeID &lt;&lt; <span class="stringliteral">&quot;: x: &quot;</span> &lt;&lt; node[0][0] &lt;&lt; <span class="stringliteral">&quot; y: &quot;</span> &lt;&lt; node[0][1] &lt;&lt; <span class="stringliteral">&quot; z: &quot;</span> &lt;&lt; node[0][2] &lt;&lt; <span class="stringliteral">&quot; qx: &quot;</span> &lt;&lt; node[0][3] &lt;&lt; <span class="stringliteral">&quot; qy: &quot;</span> &lt;&lt; node[0][4] &lt;&lt; <span class="stringliteral">&quot; qz: &quot;</span> &lt;&lt; node[0][5] &lt;&lt; <span class="stringliteral">&quot; qw: &quot;</span> &lt;&lt; node[0][6];
<a name="l00179"></a>00179                             <span class="keywordtype">float</span> head, bank, att;
<a name="l00180"></a>00180                             mTmp.ToEuler(&amp;head,&amp;bank,&amp;att);
<a name="l00181"></a>00181                             qDebug() &lt;&lt; <span class="stringliteral">&quot;   head: &quot;</span> &lt;&lt; head &lt;&lt; <span class="stringliteral">&quot; bank: &quot;</span> &lt;&lt; bank &lt;&lt; <span class="stringliteral">&quot; att: &quot;</span> &lt;&lt; att;
<a name="l00182"></a>00182                             debugtrans = mLocal.GetTranslate();
<a name="l00183"></a>00183                             qDebug() &lt;&lt; <span class="stringliteral">&quot;   Local SSSA translation:&quot;</span> &lt;&lt; debugtrans.x &lt;&lt; <span class="stringliteral">&quot; &quot;</span> &lt;&lt; debugtrans.y &lt;&lt; <span class="stringliteral">&quot; &quot;</span> &lt;&lt; debugtrans.z &lt;&lt; <span class="stringliteral">&quot; Distance: &quot;</span> &lt;&lt; debugtrans.Distance(CVec3());
<a name="l00184"></a>00184 <span class="preprocessor">#endif</span>
<a name="l00185"></a>00185 <span class="preprocessor"></span>                        } <span class="keywordflow">else</span> {
<a name="l00186"></a>00186                             message(tr(<span class="stringliteral">&quot;No Local data for %1 (SSSA type)&quot;</span>).arg(thisGUID),<span class="keyword">true</span>);
<a name="l00187"></a>00187                             message(tr(<span class="stringliteral">&quot;Connected clients: %1&quot;</span>).arg(getPeersInfo(sceneinfo)),<span class="keyword">false</span>);
<a name="l00188"></a>00188                             message(sceneinfo,<span class="keyword">false</span>);
<a name="l00189"></a>00189                             <span class="keywordflow">break</span>;
<a name="l00190"></a>00190                         }
<a name="l00191"></a>00191                     }
<a name="l00192"></a>00192                 } <span class="keywordflow">else</span> {
<a name="l00193"></a>00193                     mLocal.Identity(); <span class="comment">// start with an identity transform</span>
<a name="l00194"></a>00194                     getNodesInfo(locals[loc].section(<span class="stringliteral">&quot;,&quot;</span>,0,0).toAscii().data(),sceneinfo);
<a name="l00195"></a>00195                     QString localType = QString::fromAscii(sceneinfo).section(<span class="charliteral">&#39;;&#39;</span>,0,0).section(<span class="charliteral">&#39;,&#39;</span>,1);
<a name="l00196"></a>00196 <span class="preprocessor">#ifdef SCENEDBG</span>
<a name="l00197"></a>00197 <span class="preprocessor"></span>                    qDebug() &lt;&lt; <span class="stringliteral">&quot;Type of Local:&quot;</span> &lt;&lt; localType;
<a name="l00198"></a>00198 <span class="preprocessor">#endif</span>
<a name="l00199"></a>00199 <span class="preprocessor"></span>                    <span class="keywordflow">if</span>(localType.compare(<span class="stringliteral">&quot;OBJECT&quot;</span>)==0){
<a name="l00200"></a>00200 <span class="preprocessor">#ifdef SCENEDBG</span>
<a name="l00201"></a>00201 <span class="preprocessor"></span>                        qDebug() &lt;&lt; <span class="stringliteral">&quot;object processing&quot;</span>;
<a name="l00202"></a>00202 <span class="preprocessor">#endif</span>
<a name="l00203"></a>00203 <span class="preprocessor"></span>                        <span class="keywordtype">int</span> i=0; <span class="comment">// not sure if we may need a loop later on</span>
<a name="l00204"></a>00204                         <span class="keywordflow">if</span>(getObjectSpecificData(locals[loc].section(<span class="stringliteral">&quot;,&quot;</span>,0,0).toAscii().data(),QString::fromAscii(sceneinfo).section(<span class="charliteral">&#39;;&#39;</span>,0,0).section(<span class="charliteral">&#39;,&#39;</span>,0,0).toAscii().data(),tmphost,0,tmpurl,node[i].data())){
<a name="l00205"></a>00205                             CQuat(node[i][3],node[i][4],node[i][5],node[i][6]).ToMatrix(mTmp.mf); <span class="comment">// fill out a transformation matrix with this node</span>
<a name="l00206"></a>00206                             mTmp=mTmp.InvertRot();
<a name="l00207"></a>00207                             mTmp.mf[12] = node[i][0];
<a name="l00208"></a>00208                             mTmp.mf[13] = node[i][1];
<a name="l00209"></a>00209                             mTmp.mf[14] = node[i][2];
<a name="l00210"></a>00210         <span class="comment">//                    mLocal=mLocal*mTmp;</span>
<a name="l00211"></a>00211                             mLocal=mTmp*mLocal;
<a name="l00212"></a>00212                             updated=<span class="keyword">true</span>;
<a name="l00213"></a>00213 <span class="preprocessor">#ifdef SCENEDBG</span>
<a name="l00214"></a>00214 <span class="preprocessor"></span>                            qDebug() &lt;&lt; <span class="stringliteral">&quot;Local &quot;</span> &lt;&lt; locals[loc] &lt;&lt; <span class="stringliteral">&quot; node&quot;</span> &lt;&lt; nodeid[i] &lt;&lt; <span class="stringliteral">&quot;: x: &quot;</span> &lt;&lt; node[i][0] &lt;&lt; <span class="stringliteral">&quot; y: &quot;</span> &lt;&lt; node[i][1] &lt;&lt; <span class="stringliteral">&quot; z: &quot;</span> &lt;&lt; node[i][2] &lt;&lt; <span class="stringliteral">&quot; qx: &quot;</span> &lt;&lt; node[i][3] &lt;&lt; <span class="stringliteral">&quot; qy: &quot;</span> &lt;&lt; node[i][4] &lt;&lt; <span class="stringliteral">&quot; qz: &quot;</span> &lt;&lt; node[i][5] &lt;&lt; <span class="stringliteral">&quot; qw: &quot;</span> &lt;&lt; node[i][6];
<a name="l00215"></a>00215                             <span class="keywordtype">float</span> head, bank, att;
<a name="l00216"></a>00216                             mTmp.ToEuler(&amp;head,&amp;bank,&amp;att);
<a name="l00217"></a>00217                             qDebug() &lt;&lt; <span class="stringliteral">&quot;  head: &quot;</span> &lt;&lt; head &lt;&lt; <span class="stringliteral">&quot; bank: &quot;</span> &lt;&lt; bank &lt;&lt; <span class="stringliteral">&quot; att: &quot;</span> &lt;&lt; att;
<a name="l00218"></a>00218                             debugtrans = mLocal.GetTranslate();
<a name="l00219"></a>00219                             qDebug() &lt;&lt; <span class="stringliteral">&quot;  Local translation:&quot;</span> &lt;&lt; debugtrans.x &lt;&lt; <span class="stringliteral">&quot; &quot;</span> &lt;&lt; debugtrans.y &lt;&lt; <span class="stringliteral">&quot; &quot;</span> &lt;&lt; debugtrans.z &lt;&lt; <span class="stringliteral">&quot; Distance: &quot;</span> &lt;&lt; debugtrans.Distance(CVec3());
<a name="l00220"></a>00220 <span class="preprocessor">#endif</span>
<a name="l00221"></a>00221 <span class="preprocessor"></span>                        } <span class="keywordflow">else</span> {
<a name="l00222"></a>00222                             message(tr(<span class="stringliteral">&quot;No Local data for %1&quot;</span>).arg(locals[loc]),<span class="keyword">true</span>);
<a name="l00223"></a>00223                             updated=<span class="keyword">false</span>;
<a name="l00224"></a>00224                         }
<a name="l00225"></a>00225 
<a name="l00226"></a>00226                     } <span class="keywordflow">else</span> <span class="keywordflow">if</span>(localType.compare(<span class="stringliteral">&quot;AVATAR&quot;</span>)==0){
<a name="l00227"></a>00227 <span class="preprocessor">#ifdef SCENEDBG</span>
<a name="l00228"></a>00228 <span class="preprocessor"></span>                        qDebug() &lt;&lt; <span class="stringliteral">&quot;avatar processing&quot;</span>;
<a name="l00229"></a>00229 <span class="preprocessor">#endif</span>
<a name="l00230"></a>00230 <span class="preprocessor"></span>                        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=2;i&lt;8;i++){
<a name="l00231"></a>00231                             <span class="keywordflow">if</span>(getAvatarSpecificData(locals[loc].section(<span class="stringliteral">&quot;,&quot;</span>,0,0).toAscii().data(),locals[loc].section(<span class="stringliteral">&quot;,&quot;</span>,1,1).toAscii().data(),nodeid[i].toAscii().data(),node[i].data())){
<a name="l00232"></a>00232                                 CQuat(node[i][3],node[i][4],node[i][5],node[i][6]).ToMatrix(mTmp.mf); <span class="comment">// fill out a transformation matrix with this node</span>
<a name="l00233"></a>00233                                 mTmp.mf[12] = node[i][0];
<a name="l00234"></a>00234                                 mTmp.mf[13] = node[i][1];
<a name="l00235"></a>00235                                 mTmp.mf[14] = node[i][2];
<a name="l00236"></a>00236             <span class="comment">//                    mLocal=mLocal*mTmp;</span>
<a name="l00237"></a>00237                                 mLocal=mTmp*mLocal;
<a name="l00238"></a>00238                                 updated=<span class="keyword">true</span>;
<a name="l00239"></a>00239 <span class="preprocessor">#ifdef SCENEDBG</span>
<a name="l00240"></a>00240 <span class="preprocessor"></span>                                qDebug() &lt;&lt; <span class="stringliteral">&quot;Local &quot;</span> &lt;&lt; locals[loc] &lt;&lt; <span class="stringliteral">&quot; node&quot;</span> &lt;&lt; nodeid[i] &lt;&lt; <span class="stringliteral">&quot;: x: &quot;</span> &lt;&lt; node[i][0] &lt;&lt; <span class="stringliteral">&quot; y: &quot;</span> &lt;&lt; node[i][1] &lt;&lt; <span class="stringliteral">&quot; z: &quot;</span> &lt;&lt; node[i][2] &lt;&lt; <span class="stringliteral">&quot; qx: &quot;</span> &lt;&lt; node[i][3] &lt;&lt; <span class="stringliteral">&quot; qy: &quot;</span> &lt;&lt; node[i][4] &lt;&lt; <span class="stringliteral">&quot; qz: &quot;</span> &lt;&lt; node[i][5] &lt;&lt; <span class="stringliteral">&quot; qw: &quot;</span> &lt;&lt; node[i][6];
<a name="l00241"></a>00241                                 <span class="keywordtype">float</span> head, bank, att;
<a name="l00242"></a>00242                                 mTmp.ToEuler(&amp;head,&amp;bank,&amp;att);
<a name="l00243"></a>00243                                 qDebug() &lt;&lt; <span class="stringliteral">&quot;  head: &quot;</span> &lt;&lt; head &lt;&lt; <span class="stringliteral">&quot; bank: &quot;</span> &lt;&lt; bank &lt;&lt; <span class="stringliteral">&quot; att: &quot;</span> &lt;&lt; att;
<a name="l00244"></a>00244                                 debugtrans = mLocal.GetTranslate();
<a name="l00245"></a>00245                                 qDebug() &lt;&lt; <span class="stringliteral">&quot;  Local translation:&quot;</span> &lt;&lt; debugtrans.x &lt;&lt; <span class="stringliteral">&quot; &quot;</span> &lt;&lt; debugtrans.y &lt;&lt; <span class="stringliteral">&quot; &quot;</span> &lt;&lt; debugtrans.z &lt;&lt; <span class="stringliteral">&quot; Distance: &quot;</span> &lt;&lt; debugtrans.Distance(CVec3());
<a name="l00246"></a>00246 <span class="preprocessor">#endif</span>
<a name="l00247"></a>00247 <span class="preprocessor"></span>                            } <span class="keywordflow">else</span> {
<a name="l00248"></a>00248                                 message(tr(<span class="stringliteral">&quot;No Local data for %1&quot;</span>).arg(locals[loc]),<span class="keyword">true</span>);
<a name="l00249"></a>00249                                 updated=<span class="keyword">false</span>;
<a name="l00250"></a>00250                                 <span class="keywordflow">break</span>;
<a name="l00251"></a>00251                             }
<a name="l00252"></a>00252                         }
<a name="l00253"></a>00253                     }
<a name="l00254"></a>00254                 }
<a name="l00255"></a>00255 
<a name="l00256"></a>00256 
<a name="l00257"></a>00257                 QWriteLocker swlocker(&amp;infoMutex); <span class="comment">// lock the scene info for writing</span>
<a name="l00258"></a>00258                 <span class="keywordflow">if</span>(updated){
<a name="l00259"></a>00259                     sceneData[locals[loc]].translation = mLocal.GetTranslate(); <span class="comment">// silently inserts the value if it does not exist already</span>
<a name="l00260"></a>00260                 }
<a name="l00261"></a>00261                 CVec3 finaltrans = mVisitor*sceneData[locals[loc]].translation;
<a name="l00262"></a>00262 <span class="preprocessor">#ifdef SCENEDBG</span>
<a name="l00263"></a>00263 <span class="preprocessor"></span>                qDebug() &lt;&lt; <span class="stringliteral">&quot;Final translation:&quot;</span> &lt;&lt; finaltrans.x &lt;&lt; <span class="stringliteral">&quot; &quot;</span> &lt;&lt; finaltrans.y &lt;&lt; <span class="stringliteral">&quot; &quot;</span> &lt;&lt; finaltrans.z &lt;&lt; <span class="stringliteral">&quot; Distance: &quot;</span> &lt;&lt; finaltrans.Distance(CVec3());
<a name="l00264"></a>00264 <span class="preprocessor">#endif</span>
<a name="l00265"></a>00265 <span class="preprocessor"></span>                sceneData[locals[loc]].azimuth = atan2(finaltrans.y,-finaltrans.z)*180*M_1_PI; <span class="comment">// overwrite azimuth and elevation with calculated values - adjusted for &quot;skeleton axes&quot; (x up, y left, z behind)</span>
<a name="l00266"></a>00266                 sceneData[locals[loc]].elevation = atan2(finaltrans.x,sqrt(finaltrans.z*finaltrans.z+finaltrans.y*finaltrans.y))*180*M_1_PI;
<a name="l00267"></a>00267 <span class="comment">//                sceneData[locals[loc]].azimuth = atan2(finaltrans.y,finaltrans.x)*180*M_1_PI; // overwrite azimuth and elevation with calculated values - Normal orientation (x front, y left, z up)</span>
<a name="l00268"></a>00268 <span class="comment">//                sceneData[locals[loc]].elevation = atan2(finaltrans.z,sqrt(finaltrans.x*finaltrans.x+finaltrans.y*finaltrans.y))*180*M_1_PI;</span>
<a name="l00269"></a>00269 <span class="preprocessor">#ifdef SCENEDBG</span>
<a name="l00270"></a>00270 <span class="preprocessor"></span>                qDebug() &lt;&lt; <span class="stringliteral">&quot;azi: &quot;</span> &lt;&lt; sceneData[locals[loc]].azimuth &lt;&lt; <span class="stringliteral">&quot; ele: &quot;</span> &lt;&lt; sceneData[locals[loc]].elevation;
<a name="l00271"></a>00271 <span class="preprocessor">#endif</span>
<a name="l00272"></a>00272 <span class="preprocessor"></span>                QReadLocker prlocker(&amp;processMutex); <span class="comment">// lock processing for reading</span>
<a name="l00273"></a>00273                 <span class="keywordflow">if</span>(processStarted(locals[loc])){
<a name="l00274"></a>00274                     processData[locals[loc]].binaural-&gt;setDirection(&amp;(sceneData[locals[loc]].azimuth),&amp;(sceneData[locals[loc]].elevation));
<a name="l00275"></a>00275                 }
<a name="l00276"></a>00276             }
<a name="l00277"></a>00277 
<a name="l00278"></a>00278         } <span class="keywordflow">else</span> {
<a name="l00279"></a>00279             message(tr(<span class="stringliteral">&quot;SceneInterface: Awaiting external connection... Connected clients: %1&quot;</span>).arg(getPeersInfo(sceneinfo)),<span class="keyword">false</span>);
<a name="l00280"></a>00280             message(sceneinfo,<span class="keyword">false</span>);
<a name="l00281"></a>00281             QStringList clients = QString::fromAscii(sceneinfo).split(<span class="stringliteral">&quot;;&quot;</span>,QString::SkipEmptyParts);
<a name="l00282"></a>00282             <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=0; i &lt; clients.size() ; i++ ){
<a name="l00283"></a>00283                 getNodesInfo(clients.at(i).section(<span class="charliteral">&#39;,&#39;</span>,0,0).toAscii().data(),sceneinfo);
<a name="l00284"></a>00284                 message(tr(<span class="stringliteral">&quot;%1 - %2&quot;</span>).arg(clients.at(i),QString::fromAscii(sceneinfo).section(<span class="charliteral">&#39;;&#39;</span>,0,0)));
<a name="l00285"></a>00285             }
<a name="l00286"></a>00286 
<a name="l00287"></a>00287             msleep(5000);
<a name="l00288"></a>00288         }
<a name="l00289"></a>00289 <span class="preprocessor">#ifdef SCENEDBG</span>
<a name="l00290"></a>00290 <span class="preprocessor"></span>        msleep(200);
<a name="l00291"></a>00291 <span class="preprocessor">#else</span>
<a name="l00292"></a>00292 <span class="preprocessor"></span>        msleep(10);
<a name="l00293"></a>00293 <span class="preprocessor">#endif</span>
<a name="l00294"></a>00294 <span class="preprocessor"></span>    }
<a name="l00295"></a>00295 }
<a name="l00296"></a>00296 
<a name="l00297"></a><a class="code" href="class_scene_interface.html#a32a7846a3ad562ec4ba1763e8e809e26">00297</a> <span class="keywordtype">bool</span> <a class="code" href="class_scene_interface.html#a32a7846a3ad562ec4ba1763e8e809e26" title="Scene connection functions.">SceneInterface::connectToScene</a>(QString myid,QString address, <span class="keywordtype">int</span> port){
<a name="l00298"></a>00298     <span class="keywordflow">if</span>(myID.isEmpty()){
<a name="l00299"></a>00299         myID=myid;
<a name="l00300"></a>00300     }
<a name="l00301"></a>00301     <span class="keywordtype">char</span> name[]=<span class="stringliteral">&quot;AAU&quot;</span>, type[]=<span class="stringliteral">&quot;AUDIO&quot;</span>, config[]=<span class="stringliteral">&quot;&quot;</span>;
<a name="l00302"></a>00302     isConnected = startclient(address.toAscii().data(),port,name,type,config,1,2,1,10);
<a name="l00303"></a>00303     start();
<a name="l00304"></a>00304     <span class="keywordflow">return</span>(isConnected);
<a name="l00305"></a>00305 }
<a name="l00306"></a>00306 
<a name="l00307"></a>00307 <span class="keywordtype">void</span> SceneInterface::setSceneID(QString myid){
<a name="l00308"></a>00308     myID=myid;
<a name="l00309"></a>00309 }
<a name="l00310"></a>00310 
<a name="l00311"></a>00311 <span class="keywordtype">void</span> SceneInterface::disconnectFromScene(){
<a name="l00312"></a>00312     <span class="keywordflow">if</span>(isConnected){
<a name="l00313"></a>00313         isConnected=<span class="keyword">false</span>;
<a name="l00314"></a>00314         removeAllNodes();
<a name="l00315"></a>00315         stop();
<a name="l00316"></a>00316     }
<a name="l00317"></a>00317 }
<a name="l00318"></a>00318 
<a name="l00319"></a>00319 <span class="keywordtype">bool</span> SceneInterface::isConnectedToScene(){
<a name="l00320"></a>00320     <span class="keywordflow">return</span>(isConnected);
<a name="l00321"></a>00321 }
<a name="l00322"></a>00322 
<a name="l00323"></a><a class="code" href="class_scene_interface.html#a2c9f50c877cd2ac7bf75bfb6af7fff46">00323</a> pair&lt;QString,unsigned short&gt; <a class="code" href="class_scene_interface.html#a2c9f50c877cd2ac7bf75bfb6af7fff46" title="obtain information about the audio server from the scene">SceneInterface::updateAudioServerInfo</a>(){
<a name="l00324"></a>00324     <span class="keywordflow">if</span>(isConnected){
<a name="l00325"></a>00325         check();
<a name="l00326"></a>00326         <span class="keywordtype">char</span> sceneinfo[1024];
<a name="l00327"></a>00327         getPeersInfo(sceneinfo); <span class="comment">// {GUID1,NAME1,TYPE1,CONFIG1;GUID2,NAME2,TYPE2,CONFIG2;...}</span>
<a name="l00328"></a>00328         QStringList infos = QString::fromAscii(sceneinfo).split(<span class="stringliteral">&quot;;&quot;</span>,QString::SkipEmptyParts);
<a name="l00329"></a>00329         <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=0;i&lt;infos.size();i++){
<a name="l00330"></a>00330             <span class="keywordflow">if</span>(infos.at(i).section(<span class="stringliteral">&quot;,&quot;</span>,2,2)==<span class="stringliteral">&quot;AUDIO&quot;</span>){ <span class="comment">// locate server publication</span>
<a name="l00331"></a>00331                 <span class="keywordtype">int</span> port;
<a name="l00332"></a>00332                 <span class="keywordtype">char</span> nodeids[128],host[128],file[128],conf[128];
<a name="l00333"></a>00333                 <span class="keywordflow">if</span>(getAudioData(infos.at(i).section(<span class="stringliteral">&quot;,&quot;</span>,0,0).toAscii().data(), nodeids, host, &amp;port, file, conf)){
<a name="l00334"></a>00334                     <span class="comment">//audioServAdress=QString::fromAscii(host); // bug in scene causing string to end with &quot;,&quot;?</span>
<a name="l00335"></a>00335                     audioServAdress=QString::fromAscii(host).section(<span class="stringliteral">&quot;,&quot;</span>,0,0); <span class="comment">// scene bug(?) workaround</span>
<a name="l00336"></a>00336                     audioServPort=port;
<a name="l00337"></a>00337                     emit audioServerFound(audioServAdress,audioServPort);
<a name="l00338"></a>00338                     emit message(tr(<span class="stringliteral">&quot;SceneInterface: Audio Server found at %1:%2&quot;</span>).arg(audioServAdress,QString::number(audioServPort)));
<a name="l00339"></a>00339                     <span class="keywordflow">return</span>(pair&lt;QString,unsigned short&gt;(audioServAdress,audioServPort));
<a name="l00340"></a>00340                 }
<a name="l00341"></a>00341 
<a name="l00342"></a>00342             }
<a name="l00343"></a>00343         }
<a name="l00344"></a>00344     }
<a name="l00345"></a>00345     <span class="keywordflow">return</span>(pair&lt;QString,unsigned short&gt;(QString(),0));
<a name="l00346"></a>00346 }
<a name="l00347"></a>00347 
<a name="l00348"></a>00348 QString SceneInterface::audioServerAdress(){
<a name="l00349"></a>00349     <span class="keywordflow">if</span>(isConnected){
<a name="l00350"></a>00350         <span class="keywordflow">return</span>(audioServAdress);
<a name="l00351"></a>00351     }
<a name="l00352"></a>00352     <span class="keywordflow">return</span>(QString());
<a name="l00353"></a>00353 }
<a name="l00354"></a>00354 
<a name="l00355"></a>00355 <span class="keywordtype">unsigned</span> <span class="keywordtype">short</span> SceneInterface::audioServerPort(){
<a name="l00356"></a>00356     <span class="keywordflow">if</span>(isConnected){
<a name="l00357"></a>00357         <span class="keywordflow">return</span>(audioServPort);
<a name="l00358"></a>00358     }
<a name="l00359"></a>00359     <span class="keywordflow">return</span>(0);
<a name="l00360"></a>00360 }
<a name="l00361"></a>00361 
<a name="l00362"></a>00362 QStringList SceneInterface::sceneClientsVisible(<span class="keywordtype">bool</span> IDonly){
<a name="l00363"></a>00363     <span class="keywordflow">if</span>(isConnected){
<a name="l00364"></a>00364 
<a name="l00365"></a>00365         <span class="comment">// first get a list of all the connected clients (GUID&#39;s)</span>
<a name="l00366"></a>00366         <span class="keywordtype">char</span> sceneinfo[1024];
<a name="l00367"></a>00367         getPeersID(sceneinfo);
<a name="l00368"></a>00368         QStringList guids = QString::fromAscii(sceneinfo).split(<span class="stringliteral">&quot;;&quot;</span>,QString::SkipEmptyParts);
<a name="l00369"></a>00369 
<a name="l00370"></a>00370         <span class="comment">// if this is all we want, just return this...</span>
<a name="l00371"></a>00371         <span class="keywordflow">if</span>(IDonly) <span class="keywordflow">return</span>(guids);
<a name="l00372"></a>00372 
<a name="l00373"></a>00373         <span class="comment">// Now we need to loop through each client with getNodesInfo and create a QStringList from this..</span>
<a name="l00374"></a>00374         QStringList avatarIds;
<a name="l00375"></a>00375         <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=0;i&lt;guids.size();i++){
<a name="l00376"></a>00376             <span class="comment">// Get information for this GUID and put in a temporary list</span>
<a name="l00377"></a>00377             getNodesInfo(guids.at(i).toAscii().data(),sceneinfo);
<a name="l00378"></a>00378             QStringList guidInfo = QString::fromAscii(sceneinfo).split(<span class="stringliteral">&quot;;&quot;</span>,QString::SkipEmptyParts);
<a name="l00379"></a>00379             <span class="comment">// Loop through the list and append each GUID-nodeInfo &quot;set&quot; to the output list</span>
<a name="l00380"></a>00380             <span class="keywordflow">for</span>(<span class="keywordtype">int</span> j=0;j&lt;guidInfo.size();j++){
<a name="l00381"></a>00381                 avatarIds.append(guids.at(i) + <span class="stringliteral">&quot;,&quot;</span> + guidInfo.at(j));
<a name="l00382"></a>00382                 <span class="comment">// Format: &quot;GUID,NAME,NODEID,TYPE,CONFIG&quot;</span>
<a name="l00383"></a>00383                 <span class="comment">// For obtaining a specific field, use QString::section(), eg.:</span>
<a name="l00384"></a>00384                 <span class="comment">// QString name = avatarIds.at(1).section(&quot;,&quot;,1,1); // NAME</span>
<a name="l00385"></a>00385                 <span class="comment">// QString guidAvatar = avatarIds.at(1).section(&quot;,&quot;,0,1); // GUID,NAME</span>
<a name="l00386"></a>00386             }
<a name="l00387"></a>00387         }
<a name="l00388"></a>00388         avatarIds.removeDuplicates();
<a name="l00389"></a>00389         <span class="keywordflow">return</span>(avatarIds);
<a name="l00390"></a>00390     }
<a name="l00391"></a>00391 
<a name="l00392"></a>00392     <span class="keywordflow">return</span>(QStringList());
<a name="l00393"></a>00393 }
<a name="l00400"></a><a class="code" href="class_scene_interface.html#aea18e3bfc539d329ee970a066a47fdcd">00400</a> <span class="keywordtype">bool</span> <a class="code" href="class_scene_interface.html#aea18e3bfc539d329ee970a066a47fdcd" title="test if a given ID exist on the scene and whether a processor is attached:">SceneInterface::exist</a>(QString <span class="keywordtype">id</span>){
<a name="l00401"></a>00401     QReadLocker locker(&amp;infoMutex); <span class="comment">// lock scene for reading and automatically release when this function returns - DO NOT CALL THIS FROM OTHER FUNCTIONS INSIDE!</span>
<a name="l00402"></a>00402     <span class="keywordflow">return</span>(sceneData.contains(<span class="keywordtype">id</span>));
<a name="l00403"></a>00403 }
<a name="l00404"></a>00404 
<a name="l00405"></a>00405 <span class="keywordtype">bool</span> SceneInterface::processStarted(QString <span class="keywordtype">id</span>){
<a name="l00406"></a>00406     QReadLocker locker(&amp;processMutex); <span class="comment">// lock process for reading</span>
<a name="l00407"></a>00407 <span class="comment">//    qDebug(QString::number( (processData.contains(id)) &amp; (processData.value(id).binaural!=0) ).toAscii().data());</span>
<a name="l00408"></a>00408     <span class="keywordflow">if</span>(processData.contains(<span class="keywordtype">id</span>)){
<a name="l00409"></a>00409         <span class="keywordflow">return</span>(!(processData[<span class="keywordtype">id</span>].binaural==NULL));
<a name="l00410"></a>00410     }
<a name="l00411"></a>00411     <span class="keywordflow">return</span>(<span class="keyword">false</span>);
<a name="l00412"></a>00412 }
<a name="l00413"></a>00413 
<a name="l00414"></a><a class="code" href="class_scene_interface.html#ac6fca129f77e5673b3d8df5381e01125">00414</a> QList&lt;QString&gt; <a class="code" href="class_scene_interface.html#ac6fca129f77e5673b3d8df5381e01125" title="get a list of ID&amp;#39;s registered in this class">SceneInterface::IDs</a>(){
<a name="l00415"></a>00415     QReadLocker locker(&amp;infoMutex); <span class="comment">// lock scene for reading</span>
<a name="l00416"></a>00416     <span class="keywordflow">return</span>(sceneData.keys());
<a name="l00417"></a>00417 }
<a name="l00418"></a>00418 
<a name="l00419"></a>00419 
<a name="l00420"></a>00420 
<a name="l00421"></a><a class="code" href="class_scene_interface.html#ae89618d6d530ae55f18fa3f4d8cf5f90">00421</a> <span class="keywordtype">void</span> <a class="code" href="class_scene_interface.html#ae89618d6d530ae55f18fa3f4d8cf5f90" title="add a default set of empty data">SceneInterface::addID</a>(QString <span class="keywordtype">id</span>, <span class="keywordtype">bool</span> startProcess){
<a name="l00422"></a>00422     <span class="keywordflow">if</span>(!<a class="code" href="class_scene_interface.html#aea18e3bfc539d329ee970a066a47fdcd" title="test if a given ID exist on the scene and whether a processor is attached:">exist</a>(<span class="keywordtype">id</span>)){
<a name="l00423"></a>00423         <a class="code" href="class_scene_interface.html#af2dfd9f8f4a1b231cf372d2e5f861321">setInfoData</a>(<span class="keywordtype">id</span>,<a class="code" href="structt__scene_info_data.html">t_sceneInfoData</a>());
<a name="l00424"></a>00424     }
<a name="l00425"></a>00425     <span class="keywordflow">if</span>( startProcess &amp; !processStarted(<span class="keywordtype">id</span>) ){
<a name="l00426"></a>00426         <a class="code" href="class_scene_interface.html#a3bfb14f28b5a32f8e28a84b710e5e776" title="Processing functionality.">startProcessing</a>(<span class="keywordtype">id</span>);
<a name="l00427"></a>00427     }
<a name="l00428"></a>00428 }
<a name="l00429"></a>00429 
<a name="l00430"></a><a class="code" href="class_scene_interface.html#a92285c3aea9e0aa135df93613dfe0bdf">00430</a> <span class="keywordtype">void</span> <a class="code" href="class_scene_interface.html#a92285c3aea9e0aa135df93613dfe0bdf" title="remove all data related to a particular ID">SceneInterface::removeID</a>(QString <span class="keywordtype">id</span>){
<a name="l00431"></a>00431     <span class="keywordflow">if</span>(processStarted(<span class="keywordtype">id</span>)){
<a name="l00432"></a>00432         stopProcessing(<span class="keywordtype">id</span>);
<a name="l00433"></a>00433     }
<a name="l00434"></a>00434     <span class="keywordflow">if</span>(<a class="code" href="class_scene_interface.html#aea18e3bfc539d329ee970a066a47fdcd" title="test if a given ID exist on the scene and whether a processor is attached:">exist</a>(<span class="keywordtype">id</span>)){
<a name="l00435"></a>00435         QWriteLocker locker(&amp;infoMutex); <span class="comment">// lock mutex for writing and automatically release when this function returns</span>
<a name="l00436"></a>00436         sceneData.remove(<span class="keywordtype">id</span>);
<a name="l00437"></a>00437     }
<a name="l00438"></a>00438 }
<a name="l00439"></a>00439 
<a name="l00440"></a>00440 
<a name="l00446"></a><a class="code" href="class_scene_interface.html#af2dfd9f8f4a1b231cf372d2e5f861321">00446</a> <span class="keywordtype">bool</span> <a class="code" href="class_scene_interface.html#af2dfd9f8f4a1b231cf372d2e5f861321">SceneInterface::setInfoData</a>(QString <span class="keywordtype">id</span>, <a class="code" href="structt__scene_info_data.html">t_sceneInfoData</a> idata){
<a name="l00447"></a>00447     QWriteLocker locker(&amp;infoMutex); <span class="comment">// lock mutex for writing and automatically release when this function returns</span>
<a name="l00448"></a>00448     <span class="keywordtype">bool</span> retval = !sceneData.contains(<span class="keywordtype">id</span>);
<a name="l00449"></a>00449     sceneData.insert(<span class="keywordtype">id</span>,idata); <span class="comment">// will either overwrite existing or create a new set</span>
<a name="l00450"></a>00450     <span class="keywordflow">return</span>(retval);
<a name="l00451"></a>00451 }
<a name="l00452"></a>00452 
<a name="l00453"></a>00453 <a class="code" href="structt__scene_info_data.html">t_sceneInfoData</a> SceneInterface::infoData(QString <span class="keywordtype">id</span>){
<a name="l00454"></a>00454     QReadLocker locker(&amp;infoMutex); <span class="comment">// lock mutex for reading and automatically release when this function returns</span>
<a name="l00455"></a>00455     <span class="keywordflow">return</span>(sceneData.value(<span class="keywordtype">id</span>)); <span class="comment">// returns the value if it exist or a default constructed otherwise</span>
<a name="l00456"></a>00456 }
<a name="l00457"></a>00457 
<a name="l00458"></a>00458 
<a name="l00459"></a>00459 <span class="keywordtype">bool</span> SceneInterface::setGain(QString <span class="keywordtype">id</span>, <span class="keywordtype">double</span> gain){
<a name="l00460"></a>00460     QWriteLocker locker(&amp;infoMutex);
<a name="l00461"></a>00461     <span class="keywordtype">bool</span> retval = !sceneData.contains(<span class="keywordtype">id</span>);
<a name="l00462"></a>00462     <span class="keywordflow">if</span>(gain&lt;0.0){gain=-gain;}
<a name="l00463"></a>00463     <span class="keywordflow">if</span>(gain&gt;2.0){gain=2.0;}
<a name="l00464"></a>00464     sceneData[id].gain = gain; <span class="comment">// silently inserts the value if it does not exist already</span>
<a name="l00465"></a>00465     sceneData[id].sgain = gain*GAIN_SCALE;
<a name="l00466"></a>00466     <span class="keywordflow">return</span>(retval);
<a name="l00467"></a>00467 }
<a name="l00468"></a>00468 
<a name="l00469"></a>00469 <span class="keywordtype">double</span> SceneInterface::gain(QString <span class="keywordtype">id</span>){
<a name="l00470"></a>00470     QReadLocker locker(&amp;infoMutex);
<a name="l00471"></a>00471     <span class="keywordflow">return</span>(sceneData.value(<span class="keywordtype">id</span>).gain); <span class="comment">// returns the value if it exist or a default constructed otherwise</span>
<a name="l00472"></a>00472 }
<a name="l00473"></a>00473 
<a name="l00474"></a>00474 
<a name="l00475"></a>00475 <span class="keywordtype">bool</span> SceneInterface::setDirection(QString <span class="keywordtype">id</span>, <span class="keywordtype">double</span> azimuth, <span class="keywordtype">double</span> elevation){
<a name="l00476"></a>00476     QWriteLocker swlocker(&amp;infoMutex); <span class="comment">// lock the scene info for writing</span>
<a name="l00477"></a>00477     <span class="keywordtype">bool</span> retval = !sceneData.contains(<span class="keywordtype">id</span>);
<a name="l00478"></a>00478     sceneData[id].azimuth = azimuth; <span class="comment">// silently inserts the value if it does not exist already</span>
<a name="l00479"></a>00479     sceneData[id].elevation = elevation;
<a name="l00480"></a>00480     QReadLocker prlocker(&amp;processMutex); <span class="comment">// lock processing for reading</span>
<a name="l00481"></a>00481     <span class="keywordflow">if</span>(processStarted(<span class="keywordtype">id</span>)){
<a name="l00482"></a>00482         processData[id].binaural-&gt;setDirection(&amp;(sceneData[<span class="keywordtype">id</span>].azimuth),&amp;(sceneData[<span class="keywordtype">id</span>].elevation));
<a name="l00483"></a>00483     }
<a name="l00484"></a>00484     <span class="keywordflow">return</span>(retval);
<a name="l00485"></a>00485 }
<a name="l00486"></a>00486 
<a name="l00487"></a>00487 pair&lt;double,double&gt; SceneInterface::direction(QString <span class="keywordtype">id</span>){
<a name="l00488"></a>00488     QReadLocker locker(&amp;infoMutex);
<a name="l00489"></a>00489     <span class="keywordflow">return</span>(pair&lt;double,double&gt;(sceneData.value(<span class="keywordtype">id</span>).azimuth,sceneData.value(<span class="keywordtype">id</span>).elevation));
<a name="l00490"></a>00490 }
<a name="l00491"></a>00491 
<a name="l00492"></a>00492 <span class="keywordtype">double</span> SceneInterface::azimuth(QString <span class="keywordtype">id</span>){
<a name="l00493"></a>00493     QReadLocker locker(&amp;infoMutex);
<a name="l00494"></a>00494     <span class="keywordflow">return</span>(sceneData.value(<span class="keywordtype">id</span>).azimuth);
<a name="l00495"></a>00495 }
<a name="l00496"></a>00496 
<a name="l00497"></a>00497 <span class="keywordtype">double</span> SceneInterface::elevation(QString <span class="keywordtype">id</span>){
<a name="l00498"></a>00498     QReadLocker locker(&amp;infoMutex);
<a name="l00499"></a>00499     <span class="keywordflow">return</span>(sceneData.value(<span class="keywordtype">id</span>).elevation);
<a name="l00500"></a>00500 }
<a name="l00501"></a>00501 
<a name="l00502"></a>00502 
<a name="l00503"></a>00503 <span class="comment">//#include &lt;QDebug&gt;</span>
<a name="l00504"></a>00504 <span class="keywordtype">bool</span> SceneInterface::setTranslation(QString <span class="keywordtype">id</span>, CVec3 translation){
<a name="l00505"></a>00505 
<a name="l00506"></a>00506     <span class="comment">//    qDebug() &lt;&lt; &quot;Local translation:&quot; &lt;&lt; translation.x &lt;&lt; &quot; &quot; &lt;&lt; translation.y &lt;&lt; &quot; &quot; &lt;&lt; translation.z;</span>
<a name="l00507"></a>00507     CMatrix tmp;
<a name="l00508"></a>00508     myquat.ToMatrix(tmp.mf);
<a name="l00509"></a>00509 <span class="comment">//    qDebug() &lt;&lt; &quot;Rotation matrix:&quot;;</span>
<a name="l00510"></a>00510 <span class="comment">//    qDebug() &lt;&lt; tmp.mf[0] &lt;&lt; &quot; &quot; &lt;&lt; tmp.mf[4] &lt;&lt; &quot; &quot; &lt;&lt; tmp.mf[8] &lt;&lt; &quot; &quot; &lt;&lt; tmp.mf[12];</span>
<a name="l00511"></a>00511 <span class="comment">//    qDebug() &lt;&lt; tmp.mf[1] &lt;&lt; &quot; &quot; &lt;&lt; tmp.mf[5] &lt;&lt; &quot; &quot; &lt;&lt; tmp.mf[9] &lt;&lt; &quot; &quot; &lt;&lt; tmp.mf[13];</span>
<a name="l00512"></a>00512 <span class="comment">//    qDebug() &lt;&lt; tmp.mf[2] &lt;&lt; &quot; &quot; &lt;&lt; tmp.mf[6] &lt;&lt; &quot; &quot; &lt;&lt; tmp.mf[10] &lt;&lt; &quot; &quot; &lt;&lt; tmp.mf[14];</span>
<a name="l00513"></a>00513 <span class="comment">//    qDebug() &lt;&lt; tmp.mf[3] &lt;&lt; &quot; &quot; &lt;&lt; tmp.mf[7] &lt;&lt; &quot; &quot; &lt;&lt; tmp.mf[11] &lt;&lt; &quot; &quot; &lt;&lt; tmp.mf[15];</span>
<a name="l00514"></a>00514     tmp.mf[12]=mytranslation.x;
<a name="l00515"></a>00515     tmp.mf[13]=mytranslation.y;
<a name="l00516"></a>00516     tmp.mf[14]=mytranslation.z;
<a name="l00517"></a>00517 <span class="comment">//    qDebug() &lt;&lt; &quot;transformation matrix:&quot;;</span>
<a name="l00518"></a>00518 <span class="comment">//    qDebug() &lt;&lt; tmp.mf[0] &lt;&lt; &quot; &quot; &lt;&lt; tmp.mf[4] &lt;&lt; &quot; &quot; &lt;&lt; tmp.mf[8] &lt;&lt; &quot; &quot; &lt;&lt; tmp.mf[12];</span>
<a name="l00519"></a>00519 <span class="comment">//    qDebug() &lt;&lt; tmp.mf[1] &lt;&lt; &quot; &quot; &lt;&lt; tmp.mf[5] &lt;&lt; &quot; &quot; &lt;&lt; tmp.mf[9] &lt;&lt; &quot; &quot; &lt;&lt; tmp.mf[13];</span>
<a name="l00520"></a>00520 <span class="comment">//    qDebug() &lt;&lt; tmp.mf[2] &lt;&lt; &quot; &quot; &lt;&lt; tmp.mf[6] &lt;&lt; &quot; &quot; &lt;&lt; tmp.mf[10] &lt;&lt; &quot; &quot; &lt;&lt; tmp.mf[14];</span>
<a name="l00521"></a>00521 <span class="comment">//    qDebug() &lt;&lt; tmp.mf[3] &lt;&lt; &quot; &quot; &lt;&lt; tmp.mf[7] &lt;&lt; &quot; &quot; &lt;&lt; tmp.mf[11] &lt;&lt; &quot; &quot; &lt;&lt; tmp.mf[15];</span>
<a name="l00522"></a>00522     tmp = tmp.InvertSimple();
<a name="l00523"></a>00523 <span class="comment">//    qDebug() &lt;&lt; &quot;inverted matrix:&quot;;</span>
<a name="l00524"></a>00524 <span class="comment">//    qDebug() &lt;&lt; tmp.mf[0] &lt;&lt; &quot; &quot; &lt;&lt; tmp.mf[4] &lt;&lt; &quot; &quot; &lt;&lt; tmp.mf[8] &lt;&lt; &quot; &quot; &lt;&lt; tmp.mf[12];</span>
<a name="l00525"></a>00525 <span class="comment">//    qDebug() &lt;&lt; tmp.mf[1] &lt;&lt; &quot; &quot; &lt;&lt; tmp.mf[5] &lt;&lt; &quot; &quot; &lt;&lt; tmp.mf[9] &lt;&lt; &quot; &quot; &lt;&lt; tmp.mf[13];</span>
<a name="l00526"></a>00526 <span class="comment">//    qDebug() &lt;&lt; tmp.mf[2] &lt;&lt; &quot; &quot; &lt;&lt; tmp.mf[6] &lt;&lt; &quot; &quot; &lt;&lt; tmp.mf[10] &lt;&lt; &quot; &quot; &lt;&lt; tmp.mf[14];</span>
<a name="l00527"></a>00527 <span class="comment">//    qDebug() &lt;&lt; tmp.mf[3] &lt;&lt; &quot; &quot; &lt;&lt; tmp.mf[7] &lt;&lt; &quot; &quot; &lt;&lt; tmp.mf[11] &lt;&lt; &quot; &quot; &lt;&lt; tmp.mf[15];</span>
<a name="l00528"></a>00528 
<a name="l00529"></a>00529     CVec3 finaltrans = tmp * translation;
<a name="l00530"></a>00530 <span class="comment">//    qDebug() &lt;&lt; &quot;Final translation:&quot; &lt;&lt; finaltrans.x &lt;&lt; &quot; &quot; &lt;&lt; finaltrans.y &lt;&lt; &quot; &quot; &lt;&lt; finaltrans.z;</span>
<a name="l00531"></a>00531 
<a name="l00532"></a>00532     QWriteLocker swlocker(&amp;infoMutex); <span class="comment">// lock the scene info for writing</span>
<a name="l00533"></a>00533     <span class="keywordtype">bool</span> retval = !sceneData.contains(<span class="keywordtype">id</span>);
<a name="l00534"></a>00534     sceneData[id].translation = translation; <span class="comment">// silently inserts the value if it does not exist already</span>
<a name="l00535"></a>00535     sceneData[id].azimuth = atan2(finaltrans.y,finaltrans.x)*180*M_1_PI; <span class="comment">// overwrite azimuth and elevation with calculated values</span>
<a name="l00536"></a>00536     sceneData[id].elevation = atan2(finaltrans.z,sqrt(finaltrans.x*finaltrans.x+finaltrans.y*finaltrans.y))*180*M_1_PI;
<a name="l00537"></a>00537     QReadLocker prlocker(&amp;processMutex); <span class="comment">// lock processing for reading</span>
<a name="l00538"></a>00538     <span class="keywordflow">if</span>(processStarted(<span class="keywordtype">id</span>)){
<a name="l00539"></a>00539         processData[id].binaural-&gt;setDirection(&amp;(sceneData[<span class="keywordtype">id</span>].azimuth),&amp;(sceneData[<span class="keywordtype">id</span>].elevation));
<a name="l00540"></a>00540     }
<a name="l00541"></a>00541     <span class="keywordflow">return</span>(retval);
<a name="l00542"></a>00542 }
<a name="l00543"></a>00543 
<a name="l00544"></a>00544 <span class="keywordtype">bool</span> SceneInterface::setTranslation(QString <span class="keywordtype">id</span>, <span class="keywordtype">float</span> x, <span class="keywordtype">float</span> y, <span class="keywordtype">float</span> z){
<a name="l00545"></a>00545     <span class="keywordflow">return</span>(setTranslation(<span class="keywordtype">id</span>,CVec3(x,y,z)));
<a name="l00546"></a>00546 }
<a name="l00547"></a>00547 
<a name="l00548"></a>00548 CVec3 SceneInterface::translation(QString <span class="keywordtype">id</span>){
<a name="l00549"></a>00549     QReadLocker locker(&amp;infoMutex);
<a name="l00550"></a>00550     <span class="keywordflow">return</span>(sceneData.value(<span class="keywordtype">id</span>).translation);
<a name="l00551"></a>00551 }
<a name="l00552"></a>00552 
<a name="l00553"></a>00553 <span class="keywordtype">float</span> SceneInterface::x(QString <span class="keywordtype">id</span>){
<a name="l00554"></a>00554     QReadLocker locker(&amp;infoMutex);
<a name="l00555"></a>00555     <span class="keywordflow">return</span>(sceneData.value(<span class="keywordtype">id</span>).translation.x);
<a name="l00556"></a>00556 }
<a name="l00557"></a>00557 
<a name="l00558"></a>00558 <span class="keywordtype">float</span> SceneInterface::y(QString <span class="keywordtype">id</span>){
<a name="l00559"></a>00559     QReadLocker locker(&amp;infoMutex);
<a name="l00560"></a>00560     <span class="keywordflow">return</span>(sceneData.value(<span class="keywordtype">id</span>).translation.y);
<a name="l00561"></a>00561 }
<a name="l00562"></a>00562 
<a name="l00563"></a>00563 <span class="keywordtype">float</span> SceneInterface::z(QString <span class="keywordtype">id</span>){
<a name="l00564"></a>00564     QReadLocker locker(&amp;infoMutex);
<a name="l00565"></a>00565     <span class="keywordflow">return</span>(sceneData.value(<span class="keywordtype">id</span>).translation.z);
<a name="l00566"></a>00566 }
<a name="l00567"></a>00567 
<a name="l00568"></a>00568 
<a name="l00569"></a>00569 <span class="keywordtype">void</span> SceneInterface::setMyTranslation(CVec3 translation){
<a name="l00570"></a>00570     QWriteLocker swlocker(&amp;infoMutex); <span class="comment">// lock the scene info for writing</span>
<a name="l00571"></a>00571     mytranslation=translation;
<a name="l00572"></a>00572 }
<a name="l00573"></a>00573 
<a name="l00574"></a>00574 <span class="keywordtype">void</span> SceneInterface::setMyTranslation(<span class="keywordtype">float</span> x, <span class="keywordtype">float</span> y, <span class="keywordtype">float</span> z){
<a name="l00575"></a>00575     QWriteLocker swlocker(&amp;infoMutex); <span class="comment">// lock the scene info for writing</span>
<a name="l00576"></a>00576     mytranslation.x=x;
<a name="l00577"></a>00577     mytranslation.y=y;
<a name="l00578"></a>00578     mytranslation.z=z;
<a name="l00579"></a>00579 }
<a name="l00580"></a>00580 
<a name="l00581"></a>00581 CVec3 SceneInterface::myTranslation(){
<a name="l00582"></a>00582     QReadLocker locker(&amp;infoMutex);
<a name="l00583"></a>00583     <span class="keywordflow">return</span>(mytranslation);
<a name="l00584"></a>00584 }
<a name="l00585"></a>00585 
<a name="l00586"></a>00586 <span class="keywordtype">float</span> SceneInterface::myX(){
<a name="l00587"></a>00587     QReadLocker locker(&amp;infoMutex);
<a name="l00588"></a>00588     <span class="keywordflow">return</span>(mytranslation.x);
<a name="l00589"></a>00589 }
<a name="l00590"></a>00590 
<a name="l00591"></a>00591 <span class="keywordtype">float</span> SceneInterface::myY(){
<a name="l00592"></a>00592     QReadLocker locker(&amp;infoMutex);
<a name="l00593"></a>00593     <span class="keywordflow">return</span>(mytranslation.y);
<a name="l00594"></a>00594 }
<a name="l00595"></a>00595 
<a name="l00596"></a>00596 <span class="keywordtype">float</span> SceneInterface::myZ(){
<a name="l00597"></a>00597     QReadLocker locker(&amp;infoMutex);
<a name="l00598"></a>00598     <span class="keywordflow">return</span>(mytranslation.z);
<a name="l00599"></a>00599 }
<a name="l00600"></a>00600 
<a name="l00601"></a>00601 <span class="keywordtype">void</span> SceneInterface::setMyQuat(CQuat quat){
<a name="l00602"></a>00602     QWriteLocker swlocker(&amp;infoMutex); <span class="comment">// lock the scene info for writing</span>
<a name="l00603"></a>00603     myquat=quat;
<a name="l00604"></a>00604 }
<a name="l00605"></a>00605 
<a name="l00606"></a>00606 <span class="keywordtype">void</span> SceneInterface::setMyQuat(<span class="keywordtype">float</span> qx, <span class="keywordtype">float</span> qy, <span class="keywordtype">float</span> qz, <span class="keywordtype">float</span> qw){
<a name="l00607"></a>00607     QWriteLocker swlocker(&amp;infoMutex); <span class="comment">// lock the scene info for writing</span>
<a name="l00608"></a>00608     myquat.x=qx;
<a name="l00609"></a>00609     myquat.y=qy;
<a name="l00610"></a>00610     myquat.z=qz;
<a name="l00611"></a>00611     myquat.w=qw;
<a name="l00612"></a>00612 }
<a name="l00613"></a>00613 
<a name="l00614"></a>00614 CQuat SceneInterface::myQuat(){
<a name="l00615"></a>00615     QReadLocker locker(&amp;infoMutex);
<a name="l00616"></a>00616     <span class="keywordflow">return</span>(myquat);
<a name="l00617"></a>00617 }
<a name="l00618"></a>00618 
<a name="l00619"></a>00619 <span class="keywordtype">float</span> SceneInterface::myQx(){
<a name="l00620"></a>00620     QReadLocker locker(&amp;infoMutex);
<a name="l00621"></a>00621     <span class="keywordflow">return</span>(myquat.x);
<a name="l00622"></a>00622 }
<a name="l00623"></a>00623 
<a name="l00624"></a>00624 <span class="keywordtype">float</span> SceneInterface::myQy(){
<a name="l00625"></a>00625     QReadLocker locker(&amp;infoMutex);
<a name="l00626"></a>00626     <span class="keywordflow">return</span>(myquat.y);
<a name="l00627"></a>00627 }
<a name="l00628"></a>00628 
<a name="l00629"></a>00629 <span class="keywordtype">float</span> SceneInterface::myQz(){
<a name="l00630"></a>00630     QReadLocker locker(&amp;infoMutex);
<a name="l00631"></a>00631     <span class="keywordflow">return</span>(myquat.z);
<a name="l00632"></a>00632 }
<a name="l00633"></a>00633 
<a name="l00634"></a>00634 <span class="keywordtype">float</span> SceneInterface::myQw(){
<a name="l00635"></a>00635     QReadLocker locker(&amp;infoMutex);
<a name="l00636"></a>00636     <span class="keywordflow">return</span>(myquat.w);
<a name="l00637"></a>00637 }
<a name="l00638"></a>00638 
<a name="l00643"></a><a class="code" href="class_scene_interface.html#a3bfb14f28b5a32f8e28a84b710e5e776">00643</a> <span class="keywordtype">bool</span> <a class="code" href="class_scene_interface.html#a3bfb14f28b5a32f8e28a84b710e5e776" title="Processing functionality.">SceneInterface::startProcessing</a>(QString <span class="keywordtype">id</span>){
<a name="l00644"></a>00644     <span class="keywordflow">if</span>((processStarted(<span class="keywordtype">id</span>))|(!<a class="code" href="class_scene_interface.html#aea18e3bfc539d329ee970a066a47fdcd" title="test if a given ID exist on the scene and whether a processor is attached:">exist</a>(<span class="keywordtype">id</span>))){
<a name="l00645"></a>00645         <span class="keywordflow">return</span>(<span class="keyword">false</span>); <span class="comment">// don&#39;t start/create the filtering class unless it ALSO exist in the scene and is NOT running already</span>
<a name="l00646"></a>00646     }
<a name="l00647"></a>00647 
<a name="l00648"></a>00648     <span class="comment">// creating a new instance - this can be a bit slow (~1ms), so we are not interested in wasting locked time on this</span>
<a name="l00649"></a>00649     AauBinFilter *tmp = <span class="keyword">new</span> AauBinFilter();
<a name="l00650"></a>00650 
<a name="l00651"></a>00651     QWriteLocker pwlocker(&amp;processMutex); <span class="comment">// now we lock the processing hashmap for writing</span>
<a name="l00652"></a>00652     processData[id].binaural=tmp; <span class="comment">// silently create a new value in the QHash if needed (operator[] does that) and set it to our newly instantiated class</span>
<a name="l00653"></a>00653     pwlocker.unlock();
<a name="l00654"></a>00654     QReadLocker srlocker(&amp;infoMutex);
<a name="l00655"></a>00655     processData[id].binaural-&gt;setDirection(&amp;(sceneData[<span class="keywordtype">id</span>].azimuth),&amp;(sceneData[<span class="keywordtype">id</span>].elevation));
<a name="l00656"></a>00656     <span class="keywordflow">return</span>(<span class="keyword">true</span>);
<a name="l00657"></a>00657 }
<a name="l00658"></a>00658 
<a name="l00659"></a>00659 <span class="keywordtype">bool</span> SceneInterface::stopProcessing(QString <span class="keywordtype">id</span>){
<a name="l00660"></a>00660     <span class="keywordflow">if</span>( !(processStarted(<span class="keywordtype">id</span>)) ){
<a name="l00661"></a>00661         <span class="keywordflow">return</span>(<span class="keyword">false</span>); <span class="comment">// no reason to continue if it does not exist</span>
<a name="l00662"></a>00662     }
<a name="l00663"></a>00663     QWriteLocker pwlocker(&amp;processMutex); <span class="comment">// now we lock the processing hashmap for writing</span>
<a name="l00664"></a>00664     processData.remove(<span class="keywordtype">id</span>); <span class="comment">// remove this ID - the destructor of the class should handle deallocating the processing class</span>
<a name="l00665"></a>00665     <span class="keywordflow">return</span>(<span class="keyword">true</span>);
<a name="l00666"></a>00666 }
<a name="l00667"></a>00667 
<a name="l00668"></a>00668 pair&lt;short,short&gt; SceneInterface::process(QString <span class="keywordtype">id</span>, <span class="keywordtype">short</span> sample){
<a name="l00669"></a>00669     QReadLocker prlocker(&amp;processMutex);
<a name="l00670"></a>00670     <span class="keywordflow">if</span>( processStarted(<span class="keywordtype">id</span>) ){
<a name="l00671"></a>00671         <span class="keywordflow">return</span>(processData[<span class="keywordtype">id</span>].binaural-&gt;filter(sample));
<a name="l00672"></a>00672     } <span class="keywordflow">else</span> {
<a name="l00673"></a>00673         <span class="keywordflow">return</span>(pair&lt;short,short&gt;(sample,sample));
<a name="l00674"></a>00674     }
<a name="l00675"></a>00675 }
<a name="l00676"></a>00676 
<a name="l00677"></a>00677 pair&lt;float,float&gt; SceneInterface::process(QString <span class="keywordtype">id</span>, <span class="keywordtype">float</span> sample){
<a name="l00678"></a>00678     QReadLocker prlocker(&amp;processMutex);
<a name="l00679"></a>00679     <span class="keywordflow">if</span>(  processStarted(<span class="keywordtype">id</span>) ){
<a name="l00680"></a>00680         <span class="keywordflow">return</span>(processData[<span class="keywordtype">id</span>].binaural-&gt;filter(sample));
<a name="l00681"></a>00681     } <span class="keywordflow">else</span> {
<a name="l00682"></a>00682         <span class="keywordflow">return</span>(pair&lt;float,float&gt;(sample,sample));
<a name="l00683"></a>00683     }
<a name="l00684"></a>00684 }
<a name="l00685"></a>00685 
<a name="l00686"></a>00686 <span class="keywordtype">void</span> SceneInterface::process(QString <span class="keywordtype">id</span>, <span class="keywordtype">short</span> *sample, <span class="keywordtype">short</span> *left, <span class="keywordtype">short</span> *right, <span class="keywordtype">int</span> len){
<a name="l00687"></a>00687 
<a name="l00688"></a>00688     QReadLocker srlocker(&amp;infoMutex);
<a name="l00689"></a>00689     <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=0;i&lt;len;i++){
<a name="l00690"></a>00690         sample[i]=sample[i]*sceneData.value(<span class="keywordtype">id</span>).gain;
<a name="l00691"></a>00691 <span class="comment">//        sample[i] = (sample[i]*sceneData.value(id).sgain) &gt;&gt; GAIN_SHIFT ;</span>
<a name="l00692"></a>00692     }
<a name="l00693"></a>00693     srlocker.unlock();
<a name="l00694"></a>00694 
<a name="l00695"></a>00695     QReadLocker prlocker(&amp;processMutex);
<a name="l00696"></a>00696     <span class="keywordflow">if</span>( processStarted(<span class="keywordtype">id</span>) ){
<a name="l00697"></a>00697         processData[id].binaural-&gt;filter(sample,left,right,len);
<a name="l00698"></a>00698 
<a name="l00699"></a>00699     } <span class="keywordflow">else</span> {
<a name="l00700"></a>00700         <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=0;i&lt;len;i++){
<a name="l00701"></a>00701             *left++=*sample;
<a name="l00702"></a>00702             *right++=*sample++;
<a name="l00703"></a>00703         }
<a name="l00704"></a>00704     }
<a name="l00705"></a>00705 }
<a name="l00706"></a>00706 
<a name="l00707"></a>00707 <span class="keywordtype">void</span> SceneInterface::process(QString <span class="keywordtype">id</span>, <span class="keywordtype">float</span> *sample, <span class="keywordtype">float</span> *left, <span class="keywordtype">float</span> *right, <span class="keywordtype">int</span> len){
<a name="l00708"></a>00708     QReadLocker prlocker(&amp;processMutex);
<a name="l00709"></a>00709     *sample=*sample*gain(<span class="keywordtype">id</span>);
<a name="l00710"></a>00710     <span class="keywordflow">if</span>( processStarted(<span class="keywordtype">id</span>) ){
<a name="l00711"></a>00711         processData[id].binaural-&gt;filter(sample,left,right,len);
<a name="l00712"></a>00712     } <span class="keywordflow">else</span> {
<a name="l00713"></a>00713         *left=*sample;
<a name="l00714"></a>00714         *right=*sample;
<a name="l00715"></a>00715     }
<a name="l00716"></a>00716 }
</pre></div></div>
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><b>sceneinterface.cpp</b>      </li>
      <li class="footer">Generated on Wed Dec 19 2012 00:54:14 for Beaming Audio by&#160;
<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.3 </li>
    </ul>
  </div>
<!--- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Defines</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>


</body>
</html>
