<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>Beaming Scene Service: netClient/PHPConnections.cpp Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>

</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  <td id="projectlogo"><img alt="Logo" src="BEAMING_LOGO2.jpg"/></td>
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">Beaming Scene Service
   &#160;<span id="projectnumber">2.0</span>
   </div>
   <div id="projectbrief">RakNet wrapper for managing data communications between multiple Beaming clients</div>
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.html"><span>Related&#160;Pages</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
      <li><a href="globals.html"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('_p_h_p_connections_8cpp.html','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">netClient/PHPConnections.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_p_h_p_connections_8cpp.html">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 
<a name="l00002"></a>00002 
<a name="l00003"></a>00003 
<a name="l00004"></a>00004 
<a name="l00005"></a>00005 
<a name="l00006"></a>00006 
<a name="l00007"></a>00007 
<a name="l00008"></a>00008 
<a name="l00009"></a>00009 
<a name="l00010"></a>00010 
<a name="l00011"></a>00011 
<a name="l00012"></a>00012 
<a name="l00013"></a>00013 
<a name="l00014"></a>00014 
<a name="l00015"></a>00015 
<a name="l00016"></a>00016 
<a name="l00017"></a>00017 <span class="preprocessor">#include &quot;<a class="code" href="_p_h_p_connections_8h.html" title="Contains PHPConnections, a client for communicating with a HTTP list of connected clients...">PHPConnections.h</a>&quot;</span>
<a name="l00018"></a>00018 <span class="preprocessor">#include &quot;HTTPConnection.h&quot;</span>
<a name="l00019"></a>00019 <span class="preprocessor">#include &quot;RakSleep.h&quot;</span>
<a name="l00020"></a>00020 <span class="preprocessor">#include &quot;RakString.h&quot;</span>
<a name="l00021"></a>00021 <span class="preprocessor">#include &quot;RakNetTypes.h&quot;</span>
<a name="l00022"></a>00022 <span class="preprocessor">#include &quot;GetTime.h&quot;</span>
<a name="l00023"></a>00023 <span class="preprocessor">#include &quot;RakAssert.h&quot;</span>
<a name="l00024"></a>00024 <span class="preprocessor">#include &lt;cstring&gt;</span>
<a name="l00025"></a>00025 <span class="preprocessor">#include &lt;cstdlib&gt;</span>
<a name="l00026"></a>00026 <span class="preprocessor">#include &lt;cstdio&gt;</span>
<a name="l00027"></a>00027 <span class="preprocessor">#include &quot;Itoa.h&quot;</span>
<a name="l00028"></a>00028 
<a name="l00029"></a>00029 
<a name="l00030"></a>00030 
<a name="l00031"></a>00031 <span class="comment">// Column with this header contains the name of the client, passed to UploadTable()</span>
<a name="l00032"></a>00032 <span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">char</span> *CLIENT_NAME_COMMAND=<span class="stringliteral">&quot;__CLIENT_NAME&quot;</span>;
<a name="l00033"></a>00033 <span class="comment">// Column with this header contains the port of the client, passed to UploadTable()</span>
<a name="l00034"></a>00034 <span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">char</span> *CLIENT_PORT_COMMAND=<span class="stringliteral">&quot;__CLIENT_PORT&quot;</span>;
<a name="l00035"></a>00035 <span class="comment">// Column with this header contains the IP address of the client, passed to UploadTable()</span>
<a name="l00036"></a>00036 <span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">char</span> *SYSTEM_ADDRESS_COMMAND=<span class="stringliteral">&quot;_System_Address&quot;</span>;
<a name="l00037"></a>00037 <span class="comment">// Returned from the PHP server indicating when this row was last updated.</span>
<a name="l00038"></a>00038 <span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">char</span> *LAST_UPDATE_COMMAND=<span class="stringliteral">&quot;__SEC_AFTER_EPOCH_SINCE_LAST_UPDATE&quot;</span>;
<a name="l00039"></a>00039 
<a name="l00040"></a>00040 <span class="keyword">using namespace </span>RakNet;
<a name="l00041"></a>00041 <span class="keyword">using namespace </span>DataStructures;
<a name="l00042"></a>00042 
<a name="l00043"></a><a class="code" href="class_p_h_p_connections.html#aee7e43b6b9f53e862c8ea49c49192959">00043</a> <a class="code" href="class_p_h_p_connections.html#aee7e43b6b9f53e862c8ea49c49192959">PHPConnections::PHPConnections</a>()
<a name="l00044"></a>00044     : nextRepost(0)
<a name="l00045"></a>00045 {
<a name="l00046"></a>00046     Map&lt;RakString, RakString&gt;::IMPLEMENT_DEFAULT_COMPARISON();
<a name="l00047"></a>00047 }
<a name="l00048"></a><a class="code" href="class_p_h_p_connections.html#a6c5bfcc460fe10b014acd8a856aaa573">00048</a> <a class="code" href="class_p_h_p_connections.html#a6c5bfcc460fe10b014acd8a856aaa573">PHPConnections::~PHPConnections</a>()
<a name="l00049"></a>00049 {
<a name="l00050"></a>00050 }
<a name="l00051"></a><a class="code" href="class_p_h_p_connections.html#a0148f571f264e60ecf5fcba24c2c5e16">00051</a> <span class="keywordtype">void</span> <a class="code" href="class_p_h_p_connections.html#a0148f571f264e60ecf5fcba24c2c5e16">PHPConnections::Init</a>(HTTPConnection *_http, <span class="keyword">const</span> <span class="keywordtype">char</span> *_path)
<a name="l00052"></a>00052 {
<a name="l00053"></a>00053         http=_http;
<a name="l00054"></a>00054         pathToPHP=_path;
<a name="l00055"></a>00055 }
<a name="l00056"></a>00056 
<a name="l00057"></a><a class="code" href="class_p_h_p_connections.html#a8f91f59a6f6b7f6849d8601928134651">00057</a> <span class="keywordtype">void</span> <a class="code" href="class_p_h_p_connections.html#a8f91f59a6f6b7f6849d8601928134651">PHPConnections::SetField</a>( RakNet::RakString columnName, RakNet::RakString value )
<a name="l00058"></a>00058 {
<a name="l00059"></a>00059         <span class="keywordflow">if</span> (columnName.IsEmpty())
<a name="l00060"></a>00060                 <span class="keywordflow">return</span>;
<a name="l00061"></a>00061 
<a name="l00062"></a>00062         <span class="keywordflow">if</span> (columnName==CLIENT_NAME_COMMAND ||
<a name="l00063"></a>00063                 columnName==CLIENT_PORT_COMMAND ||
<a name="l00064"></a>00064                 columnName==LAST_UPDATE_COMMAND)
<a name="l00065"></a>00065         {
<a name="l00066"></a>00066                 RakAssert(<span class="stringliteral">&quot;PHPConnections::SetField attempted to set reserved column name&quot;</span> &amp;&amp; 0);
<a name="l00067"></a>00067                 <span class="keywordflow">return</span>;
<a name="l00068"></a>00068         }
<a name="l00069"></a>00069 
<a name="l00070"></a>00070     fields.Set(columnName, value);
<a name="l00071"></a>00071 }
<a name="l00072"></a><a class="code" href="class_p_h_p_connections.html#af51cc5bbd5b54a955ddbac13bd2b6609">00072</a> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="class_p_h_p_connections.html#af51cc5bbd5b54a955ddbac13bd2b6609" title="Returns the number of fields set with SetField()">PHPConnections::GetFieldCount</a>(<span class="keywordtype">void</span>)<span class="keyword"> const</span>
<a name="l00073"></a>00073 <span class="keyword"></span>{
<a name="l00074"></a>00074         <span class="keywordflow">return</span> fields.Size();
<a name="l00075"></a>00075 }
<a name="l00076"></a><a class="code" href="class_p_h_p_connections.html#a3cfe77b74364ef6b7a33111b3d6f47fa">00076</a> <span class="keywordtype">void</span> <a class="code" href="class_p_h_p_connections.html#a3cfe77b74364ef6b7a33111b3d6f47fa">PHPConnections::GetField</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="client_8s3d.html#ae4b896af19aae26b1e5317acf4126807">index</a>, RakNet::RakString &amp;columnName, RakNet::RakString &amp;value)
<a name="l00077"></a>00077 {
<a name="l00078"></a>00078         RakAssert(index &lt; fields.Size());
<a name="l00079"></a>00079         columnName=fields.GetKeyAtIndex(index);
<a name="l00080"></a>00080         value=fields[<a class="code" href="client_8s3d.html#ae4b896af19aae26b1e5317acf4126807">index</a>];
<a name="l00081"></a>00081 }
<a name="l00082"></a><a class="code" href="class_p_h_p_connections.html#a9afcd5448f1beca213ab9cafa673e565">00082</a> <span class="keywordtype">void</span> <a class="code" href="class_p_h_p_connections.html#a9afcd5448f1beca213ab9cafa673e565">PHPConnections::SetFields</a>(DataStructures::Table *table)
<a name="l00083"></a>00083 {
<a name="l00084"></a>00084         <a class="code" href="class_p_h_p_connections.html#ab0bd8b95920e9ddf15914789ca77e82b" title="Clear all fields.">ClearFields</a>();
<a name="l00085"></a>00085 
<a name="l00086"></a>00086         <span class="keywordtype">unsigned</span> columnIndex, rowIndex;
<a name="l00087"></a>00087         DataStructures::Table::Row *row;
<a name="l00088"></a>00088         
<a name="l00089"></a>00089         <span class="keywordflow">for</span> (rowIndex=0; rowIndex &lt; table-&gt;GetRowCount(); rowIndex++)
<a name="l00090"></a>00090         {
<a name="l00091"></a>00091                 row = table-&gt;GetRowByIndex(rowIndex, 0);
<a name="l00092"></a>00092                 <span class="keywordflow">for</span> (columnIndex=0; columnIndex &lt; table-&gt;GetColumnCount(); columnIndex++)
<a name="l00093"></a>00093                 {
<a name="l00094"></a>00094                         <a class="code" href="class_p_h_p_connections.html#a8f91f59a6f6b7f6849d8601928134651">SetField</a>( table-&gt;ColumnName(columnIndex), row-&gt;cells[columnIndex]-&gt;ToString(table-&gt;GetColumnType(columnIndex)) );
<a name="l00095"></a>00095                 }
<a name="l00096"></a>00096         }
<a name="l00097"></a>00097 }
<a name="l00098"></a>00098 
<a name="l00099"></a><a class="code" href="class_p_h_p_connections.html#ab0bd8b95920e9ddf15914789ca77e82b">00099</a> <span class="keywordtype">void</span> <a class="code" href="class_p_h_p_connections.html#ab0bd8b95920e9ddf15914789ca77e82b" title="Clear all fields.">PHPConnections::ClearFields</a>(<span class="keywordtype">void</span>)
<a name="l00100"></a>00100 {
<a name="l00101"></a>00101         fields.Clear();
<a name="l00102"></a>00102         nextRepost=0;
<a name="l00103"></a>00103 }
<a name="l00104"></a>00104 
<a name="l00105"></a><a class="code" href="class_p_h_p_connections.html#a0ef3622bfec30ffc3c46d52cc9dcfe29">00105</a> <span class="keywordtype">void</span> <a class="code" href="class_p_h_p_connections.html#a0ef3622bfec30ffc3c46d52cc9dcfe29">PHPConnections::UploadTable</a>(RakNet::RakString uploadPassword, RakNet::RakString clientName, <span class="keywordtype">unsigned</span> <span class="keywordtype">short</span> clientPort, <span class="keywordtype">bool</span> autoRepost)
<a name="l00106"></a>00106 {
<a name="l00107"></a>00107         clientNameParam=clientName;
<a name="l00108"></a>00108         clientPortParam=clientPort;
<a name="l00109"></a>00109         currentOperation=<span class="stringliteral">&quot;&quot;</span>;
<a name="l00110"></a>00110         currentOperation=<span class="stringliteral">&quot;?query=upload&amp;uploadPassword=&quot;</span>;
<a name="l00111"></a>00111         currentOperation+=uploadPassword;
<a name="l00112"></a>00112         SendOperation();
<a name="l00113"></a>00113 
<a name="l00114"></a>00114         <span class="keywordflow">if</span> (autoRepost)
<a name="l00115"></a>00115                 nextRepost=RakNet::GetTimeMS()+50000;
<a name="l00116"></a>00116         <span class="keywordflow">else</span>
<a name="l00117"></a>00117                 nextRepost=0;
<a name="l00118"></a>00118 }
<a name="l00119"></a><a class="code" href="class_p_h_p_connections.html#aa2370d0c50caeaddcafd9750b8d925e8">00119</a> <span class="keywordtype">void</span> <a class="code" href="class_p_h_p_connections.html#aa2370d0c50caeaddcafd9750b8d925e8">PHPConnections::DownloadTable</a>(RakNet::RakString downloadPassword)
<a name="l00120"></a>00120 {
<a name="l00121"></a>00121         currentOperation=<span class="stringliteral">&quot;?query=download&amp;downloadPassword=&quot;</span>;
<a name="l00122"></a>00122         currentOperation+=downloadPassword;
<a name="l00123"></a>00123         SendOperation();
<a name="l00124"></a>00124 }
<a name="l00125"></a><a class="code" href="class_p_h_p_connections.html#af2022ae14757546de09fa5e077c386ec">00125</a> <span class="keywordtype">void</span> <a class="code" href="class_p_h_p_connections.html#af2022ae14757546de09fa5e077c386ec">PHPConnections::UploadAndDownloadTable</a>(RakNet::RakString uploadPassword, RakNet::RakString downloadPassword, RakNet::RakString clientName, <span class="keywordtype">unsigned</span> <span class="keywordtype">short</span> clientPort, <span class="keywordtype">bool</span> autoRepost)
<a name="l00126"></a>00126 {
<a name="l00127"></a>00127         clientNameParam=clientName;
<a name="l00128"></a>00128         clientPortParam=clientPort;
<a name="l00129"></a>00129         currentOperation=<span class="stringliteral">&quot;?query=upDown&amp;downloadPassword=&quot;</span>;
<a name="l00130"></a>00130         currentOperation+=downloadPassword;
<a name="l00131"></a>00131         currentOperation+=<span class="stringliteral">&quot;&amp;uploadPassword=&quot;</span>;
<a name="l00132"></a>00132         currentOperation+=uploadPassword;
<a name="l00133"></a>00133 
<a name="l00134"></a>00134         SendOperation();
<a name="l00135"></a>00135 
<a name="l00136"></a>00136         <span class="keywordflow">if</span> (autoRepost)
<a name="l00137"></a>00137                 nextRepost=RakNet::GetTimeMS()+50000;
<a name="l00138"></a>00138         <span class="keywordflow">else</span>
<a name="l00139"></a>00139                 nextRepost=0;
<a name="l00140"></a>00140 }
<a name="l00141"></a>00141 
<a name="l00142"></a><a class="code" href="class_p_h_p_connections.html#a9805c800c0f90287d80a3dabba97a99f">00142</a> <a class="code" href="_p_h_p_connections_8h.html#a04cf74531493c3dacc73cd0acbcb714a">HTTPReadResult</a> <a class="code" href="class_p_h_p_connections.html#a9805c800c0f90287d80a3dabba97a99f">PHPConnections::ProcessHTTPRead</a>(RakNet::RakString httpRead)
<a name="l00143"></a>00143 {
<a name="l00144"></a>00144         <span class="keyword">const</span> <span class="keywordtype">char</span> *c = (<span class="keyword">const</span> <span class="keywordtype">char</span>*) httpRead.C_String(); <span class="comment">// current position</span>
<a name="l00145"></a>00145         <a class="code" href="_p_h_p_connections_8h.html#a04cf74531493c3dacc73cd0acbcb714a">HTTPReadResult</a> resultCode=<a class="code" href="_p_h_p_connections_8h.html#a04cf74531493c3dacc73cd0acbcb714aa2701d2048027da8946074bd803f3dda9">HTTP_RESULT_EMPTY</a>;
<a name="l00146"></a>00146 
<a name="l00147"></a>00147         lastDownloadedTable.Clear();
<a name="l00148"></a>00148 
<a name="l00149"></a>00149 
<a name="l00150"></a>00150         <span class="keywordflow">if</span> (*c==<span class="charliteral">&#39;\n&#39;</span>)
<a name="l00151"></a>00151                 c++;
<a name="l00152"></a>00152         <span class="keywordtype">char</span> buff[256];
<a name="l00153"></a>00153         <span class="keywordtype">int</span> buffIndex;
<a name="l00154"></a>00154         <span class="keywordtype">bool</span> isCommand=<span class="keyword">true</span>;
<a name="l00155"></a>00155         DataStructures::List&lt;RakNet::RakString&gt; columns;
<a name="l00156"></a>00156         DataStructures::List&lt;RakNet::RakString&gt; values;
<a name="l00157"></a>00157         RakNet::RakString curString;
<a name="l00158"></a>00158         <span class="keywordtype">bool</span> isComment=<span class="keyword">false</span>;
<a name="l00159"></a>00159         buffIndex=0;
<a name="l00160"></a>00160         <span class="keywordflow">while</span>(c &amp;&amp; *c)
<a name="l00161"></a>00161         {
<a name="l00162"></a>00162                 <span class="comment">// 3 is comment</span>
<a name="l00163"></a>00163                 <span class="keywordflow">if</span> (*c==<span class="charliteral">&#39;\003&#39;</span>)
<a name="l00164"></a>00164                 {
<a name="l00165"></a>00165                         isComment=!isComment;
<a name="l00166"></a>00166                         c++;
<a name="l00167"></a>00167                         <span class="keywordflow">continue</span>;
<a name="l00168"></a>00168                 }
<a name="l00169"></a>00169                 <span class="keywordflow">if</span> (isComment)
<a name="l00170"></a>00170                 {
<a name="l00171"></a>00171                         c++;
<a name="l00172"></a>00172                         <span class="keywordflow">continue</span>;
<a name="l00173"></a>00173                 }
<a name="l00174"></a>00174 
<a name="l00175"></a>00175                 <span class="comment">// 1 or 2 separates fields</span>
<a name="l00176"></a>00176                 <span class="comment">// 4 separates rows</span>
<a name="l00177"></a>00177                 <span class="keywordflow">if</span> (*c==<span class="charliteral">&#39;\001&#39;</span>)
<a name="l00178"></a>00178                 {
<a name="l00179"></a>00179                         <span class="keywordflow">if</span> (isCommand)
<a name="l00180"></a>00180                         {
<a name="l00181"></a>00181                                 buff[buffIndex]=0;
<a name="l00182"></a>00182                                 columns.Push(RakString::NonVariadic(buff), __FILE__, __LINE__);
<a name="l00183"></a>00183                                 isCommand=<span class="keyword">false</span>;
<a name="l00184"></a>00184                                 <span class="keywordflow">if</span> (buff[0]!=0)
<a name="l00185"></a>00185                                         resultCode=<a class="code" href="_p_h_p_connections_8h.html#a04cf74531493c3dacc73cd0acbcb714aaacb8ce72043d6a9a40a8b2caeedeadba">HTTP_RESULT_GOT_TABLE</a>;
<a name="l00186"></a>00186                         }
<a name="l00187"></a>00187                         <span class="keywordflow">else</span>
<a name="l00188"></a>00188                         {
<a name="l00189"></a>00189                                 buff[buffIndex]=0;
<a name="l00190"></a>00190                                 values.Push(RakString::NonVariadic(buff), __FILE__, __LINE__);
<a name="l00191"></a>00191                                 isCommand=<span class="keyword">true</span>;
<a name="l00192"></a>00192                         }
<a name="l00193"></a>00193                         buffIndex=0;
<a name="l00194"></a>00194                 }
<a name="l00195"></a>00195                 <span class="keywordflow">else</span> <span class="keywordflow">if</span> (*c==<span class="charliteral">&#39;\002&#39;</span>)
<a name="l00196"></a>00196                 {
<a name="l00197"></a>00197                         buff[buffIndex]=0;
<a name="l00198"></a>00198                         buffIndex=0;
<a name="l00199"></a>00199                         values.Push(RakString::NonVariadic(buff), __FILE__, __LINE__);
<a name="l00200"></a>00200                         isCommand=<span class="keyword">true</span>;
<a name="l00201"></a>00201                         PushColumnsAndValues(columns, values);
<a name="l00202"></a>00202                         columns.Clear(<span class="keyword">true</span>, __FILE__, __LINE__);
<a name="l00203"></a>00203                         values.Clear(<span class="keyword">true</span>, __FILE__, __LINE__);
<a name="l00204"></a>00204 
<a name="l00205"></a>00205                 }
<a name="l00206"></a>00206                 <span class="keywordflow">else</span>
<a name="l00207"></a>00207                 {
<a name="l00208"></a>00208                         <span class="keywordflow">if</span> (buffIndex&lt;256-1)
<a name="l00209"></a>00209                                 buff[buffIndex++]=*c;
<a name="l00210"></a>00210                 }
<a name="l00211"></a>00211                 c++;
<a name="l00212"></a>00212         }
<a name="l00213"></a>00213         <span class="keywordflow">if</span> (buff[0] &amp;&amp; columns.Size()==values.Size()+1)
<a name="l00214"></a>00214         {
<a name="l00215"></a>00215                 buff[buffIndex]=0;
<a name="l00216"></a>00216                 values.Push(RakString::NonVariadic(buff), __FILE__, __LINE__);
<a name="l00217"></a>00217         }
<a name="l00218"></a>00218 
<a name="l00219"></a>00219         PushColumnsAndValues(columns, values);
<a name="l00220"></a>00220 
<a name="l00221"></a>00221         <span class="keywordflow">return</span> resultCode;
<a name="l00222"></a>00222 }
<a name="l00223"></a>00223 <span class="keywordtype">void</span> PHPConnections::PushColumnsAndValues(DataStructures::List&lt;RakNet::RakString&gt; &amp;columns, DataStructures::List&lt;RakNet::RakString&gt; &amp;values)
<a name="l00224"></a>00224 {
<a name="l00225"></a>00225         DataStructures::Table::Row *row=0;
<a name="l00226"></a>00226 
<a name="l00227"></a>00227         <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i;
<a name="l00228"></a>00228         <span class="keywordflow">for</span> (i=0; i &lt; columns.Size() &amp;&amp; i &lt; values.Size(); i++)
<a name="l00229"></a>00229         {
<a name="l00230"></a>00230                 <span class="keywordflow">if</span> (columns[i].IsEmpty()==<span class="keyword">false</span>)
<a name="l00231"></a>00231                 {
<a name="l00232"></a>00232                         <span class="keywordtype">unsigned</span> col = lastDownloadedTable.ColumnIndex(columns[i]);
<a name="l00233"></a>00233                         <span class="keywordflow">if</span>(col == (<span class="keywordtype">unsigned</span>)-1)
<a name="l00234"></a>00234                         {
<a name="l00235"></a>00235                                 col = lastDownloadedTable.AddColumn(columns[i], DataStructures::Table::STRING);
<a name="l00236"></a>00236                         }
<a name="l00237"></a>00237 
<a name="l00238"></a>00238                         <span class="keywordflow">if</span> (row==0)
<a name="l00239"></a>00239                         {
<a name="l00240"></a>00240                                 row = lastDownloadedTable.AddRow(lastDownloadedTable.GetAvailableRowId());
<a name="l00241"></a>00241                         }
<a name="l00242"></a>00242                         row-&gt;UpdateCell(col,values[i].C_String());
<a name="l00243"></a>00243                 }
<a name="l00244"></a>00244         }
<a name="l00245"></a>00245 }
<a name="l00246"></a><a class="code" href="class_p_h_p_connections.html#aae2fff2ce215f29ed1e175362e341247">00246</a> <span class="keyword">const</span> DataStructures::Table *<a class="code" href="class_p_h_p_connections.html#aae2fff2ce215f29ed1e175362e341247">PHPConnections::GetLastDownloadedTable</a>(<span class="keywordtype">void</span>)<span class="keyword"> const</span>
<a name="l00247"></a>00247 <span class="keyword"></span>{
<a name="l00248"></a>00248         <span class="keywordflow">return</span> &amp;lastDownloadedTable;
<a name="l00249"></a>00249 }
<a name="l00250"></a>00250 <span class="keywordtype">void</span> PHPConnections::SendOperation(<span class="keywordtype">void</span>)
<a name="l00251"></a>00251 {
<a name="l00252"></a>00252         RakString outgoingMessageBody;
<a name="l00253"></a>00253         <span class="keywordtype">char</span> buff[64];
<a name="l00254"></a>00254 
<a name="l00255"></a>00255         outgoingMessageBody += CLIENT_PORT_COMMAND;
<a name="l00256"></a>00256         outgoingMessageBody += <span class="charliteral">&#39;\001&#39;</span>;
<a name="l00257"></a>00257         outgoingMessageBody += Itoa(clientPortParam,buff,10);
<a name="l00258"></a>00258         outgoingMessageBody += <span class="charliteral">&#39;\001&#39;</span>;
<a name="l00259"></a>00259         outgoingMessageBody += CLIENT_NAME_COMMAND;
<a name="l00260"></a>00260         outgoingMessageBody += <span class="charliteral">&#39;\001&#39;</span>;
<a name="l00261"></a>00261         outgoingMessageBody += clientNameParam;
<a name="l00262"></a>00262 
<a name="l00263"></a>00263         <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> i = 0; i &lt; fields.Size(); i++)
<a name="l00264"></a>00264         {
<a name="l00265"></a>00265                 RakString value = fields[i];
<a name="l00266"></a>00266                 value.URLEncode();
<a name="l00267"></a>00267                 outgoingMessageBody += RakString(<span class="stringliteral">&quot;\001%s\001%s&quot;</span>,
<a name="l00268"></a>00268                         fields.GetKeyAtIndex(i).C_String(),
<a name="l00269"></a>00269                         value.C_String());
<a name="l00270"></a>00270         }
<a name="l00271"></a>00271 
<a name="l00272"></a>00272         RakString postURL;
<a name="l00273"></a>00273         postURL+=pathToPHP;
<a name="l00274"></a>00274         postURL+=currentOperation;
<a name="l00275"></a>00275         http-&gt;Post(postURL.C_String(), outgoingMessageBody, <span class="stringliteral">&quot;application/x-www-form-urlencoded&quot;</span>);
<a name="l00276"></a>00276 
<a name="l00277"></a>00277 }
<a name="l00278"></a><a class="code" href="class_p_h_p_connections.html#a75ce699ec49809ba1e77cc3299b735ed">00278</a> <span class="keywordtype">void</span> <a class="code" href="class_p_h_p_connections.html#a75ce699ec49809ba1e77cc3299b735ed" title="Call this periodically - it will handle connection states and refreshing updates to the server...">PHPConnections::Update</a>(<span class="keywordtype">void</span>)
<a name="l00279"></a>00279 {
<a name="l00280"></a>00280         <span class="keywordflow">if</span> (http-&gt;IsBusy())
<a name="l00281"></a>00281                 <span class="keywordflow">return</span>;
<a name="l00282"></a>00282 
<a name="l00283"></a>00283 
<a name="l00284"></a>00284         <span class="keywordflow">if</span> (nextRepost==0 || fields.Size()==0)
<a name="l00285"></a>00285                 <span class="keywordflow">return</span>;
<a name="l00286"></a>00286 
<a name="l00287"></a>00287         RakNetTimeMS time = GetTimeMS();
<a name="l00288"></a>00288 
<a name="l00289"></a>00289         <span class="comment">// Entry deletes itself after 60 seconds, so keep reposting if set to do so</span>
<a name="l00290"></a>00290         <span class="keywordflow">if</span> (time &gt; nextRepost)
<a name="l00291"></a>00291         {
<a name="l00292"></a>00292                 nextRepost=RakNet::GetTimeMS()+50000;
<a name="l00293"></a>00293                 SendOperation();
<a name="l00294"></a>00294         }
<a name="l00295"></a>00295 }
</pre></div></div><!-- contents -->
</div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Defines</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="_p_h_p_connections_8cpp.html">PHPConnections.cpp</a>      </li>

    <li class="footer">Generated on Thu Feb 7 2013 15:21:30 for Beaming Scene Service by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
