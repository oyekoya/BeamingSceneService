<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>Beaming Scene Service: ClientServer.h Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>

</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  <td id="projectlogo"><img alt="Logo" src="BEAMING_LOGO2.jpg"/></td>
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">Beaming Scene Service
   &#160;<span id="projectnumber">2.0</span>
   </div>
   <div id="projectbrief">RakNet wrapper for managing data communications between multiple Beaming clients</div>
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.html"><span>Related&#160;Pages</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
      <li><a href="globals.html"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('_client_server_8h.html','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">ClientServer.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_client_server_8h.html">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">// Uses ReplicaManager 3: A system to automatically create, destroy, and serialize objects</span>
<a name="l00002"></a>00002 
<a name="l00003"></a>00003 <span class="preprocessor">#include &quot;StringTable.h&quot;</span>
<a name="l00004"></a>00004 <span class="preprocessor">#include &quot;RakPeerInterface.h&quot;</span>
<a name="l00005"></a>00005 <span class="preprocessor">#include &quot;RakNetworkFactory.h&quot;</span>
<a name="l00006"></a>00006 <span class="preprocessor">#include &lt;stdio.h&gt;</span>
<a name="l00007"></a>00007 <span class="preprocessor">#include &quot;Kbhit.h&quot;</span>
<a name="l00008"></a>00008 <span class="preprocessor">#include &lt;string.h&gt;</span>
<a name="l00009"></a>00009 <span class="preprocessor">#include &quot;BitStream.h&quot;</span>
<a name="l00010"></a>00010 <span class="preprocessor">#include &quot;MessageIdentifiers.h&quot;</span>
<a name="l00011"></a>00011 <span class="preprocessor">#include &quot;ReplicaManager3.h&quot;</span>
<a name="l00012"></a>00012 <span class="preprocessor">#include &quot;NetworkIDManager.h&quot;</span>
<a name="l00013"></a>00013 <span class="preprocessor">#include &quot;RakSleep.h&quot;</span>
<a name="l00014"></a>00014 <span class="preprocessor">#include &quot;FormatString.h&quot;</span>
<a name="l00015"></a>00015 <span class="preprocessor">#include &quot;RakString.h&quot;</span>
<a name="l00016"></a>00016 <span class="preprocessor">#include &quot;GetTime.h&quot;</span>
<a name="l00017"></a>00017 <span class="preprocessor">#include &quot;SocketLayer.h&quot;</span>
<a name="l00018"></a>00018 <span class="preprocessor">#include &quot;Getche.h&quot;</span>
<a name="l00019"></a>00019 <span class="preprocessor">#include &lt;vector&gt;</span>
<a name="l00020"></a>00020 <span class="preprocessor">#include &quot;PacketFileLogger.h&quot;</span>
<a name="l00021"></a>00021 <span class="preprocessor">#include &quot;<a class="code" href="util_math_8h.html">utilMath.h</a>&quot;</span>
<a name="l00022"></a>00022 <span class="preprocessor">#include &lt;iostream&gt;</span>
<a name="l00023"></a>00023 <span class="preprocessor">#include &lt;string&gt;</span>
<a name="l00024"></a>00024 <span class="preprocessor">#include &lt;map&gt;</span>
<a name="l00025"></a>00025 <span class="preprocessor">#include &lt;math.h&gt;</span>
<a name="l00026"></a>00026 <span class="preprocessor">#if defined(__WIN32__) || defined(WIN32)</span>
<a name="l00027"></a>00027 <span class="preprocessor"></span><span class="preprocessor">        #include &lt;windows.h&gt;</span>
<a name="l00028"></a>00028 <span class="preprocessor">#else</span>
<a name="l00029"></a>00029 <span class="preprocessor"></span><span class="preprocessor">        #include &lt;cstdio&gt;</span>
<a name="l00030"></a>00030 <span class="preprocessor">#endif</span>
<a name="l00031"></a>00031 <span class="preprocessor"></span>
<a name="l00032"></a>00032 <span class="comment">//#define LOG_ENABLED</span>
<a name="l00033"></a>00033 
<a name="l00034"></a>00034 <span class="keyword">enum</span>
<a name="l00035"></a>00035 {
<a name="l00036"></a><a class="code" href="_client_server_8h.html#a06fc87d81c62e9abb8790b6e5713c55ba48e4cb37544c8e69715d45e5a83b2109">00036</a>         <a class="code" href="_client_server_8h.html#a06fc87d81c62e9abb8790b6e5713c55ba48e4cb37544c8e69715d45e5a83b2109">CLIENT</a>,
<a name="l00037"></a><a class="code" href="_client_server_8h.html#a06fc87d81c62e9abb8790b6e5713c55ba67c96b24b23bcb408bae7626730a04b7">00037</a>         <a class="code" href="_client_server_8h.html#a06fc87d81c62e9abb8790b6e5713c55ba67c96b24b23bcb408bae7626730a04b7">SERVER</a>
<a name="l00038"></a>00038 } <a class="code" href="_client_server_8h.html#ad9b4d2b6bfe35238ad017f255ce6d0a1">topology</a>;
<a name="l00039"></a>00039 
<a name="l00040"></a>00040 <span class="comment">// ReplicaManager3 is in the namespace RakNet</span>
<a name="l00041"></a>00041 <span class="keyword">using namespace </span>RakNet;
<a name="l00042"></a>00042 
<a name="l00043"></a>00043 <span class="keyword">class </span><a class="code" href="class_beaming_user.html" title="User Replica.">BeamingUser</a>;
<a name="l00044"></a>00044 <span class="keyword">class </span><a class="code" href="class_beaming_avatar_joint_replica.html" title="Avatar Joint Replica.">BeamingAvatarJointReplica</a>;
<a name="l00045"></a>00045 <span class="keyword">class </span><a class="code" href="class_beaming_emotion_replica.html" title="Emotion Replica - Affective State.">BeamingEmotionReplica</a>;
<a name="l00046"></a>00046 <span class="keyword">class </span><a class="code" href="class_beaming_facial_replica.html" title="Facial Replica.">BeamingFacialReplica</a>;
<a name="l00047"></a>00047 <span class="keyword">class </span><a class="code" href="class_beaming_tactile_replica.html" title="Tactile Replica.">BeamingTactileReplica</a>;
<a name="l00048"></a>00048 <span class="keyword">class </span><a class="code" href="class_beaming_robot_replica.html" title="Kali-Type Robot Replica.">BeamingRobotReplica</a>;
<a name="l00049"></a>00049 <span class="keyword">class </span><a class="code" href="class_beaming_room.html" title="Room Replica (destination)">BeamingRoom</a>;
<a name="l00050"></a>00050 <span class="keyword">class </span><a class="code" href="class_beaming_video_replica.html" title="Video Replica.">BeamingVideoReplica</a>;
<a name="l00051"></a>00051 <span class="keyword">class </span><a class="code" href="class_beaming_object_replica.html" title="Object Replica - 3D Models.">BeamingObjectReplica</a>;
<a name="l00052"></a>00052 <span class="keyword">class </span><a class="code" href="class_beaming_audio_replica.html" title="Audio Replica.">BeamingAudioReplica</a>;
<a name="l00053"></a>00053 <span class="keyword">class </span><a class="code" href="class_beaming_point_cloud_replica.html" title="Point Cloud Replica.">BeamingPointCloudReplica</a>;
<a name="l00054"></a><a class="code" href="_client_server_8h.html#a23ccb3d0e9aaae919d32876ed291503e">00054</a> <span class="keyword">class </span><a class="code" href="class_beaming_generic_replica.html" title="Generic Replica (to enable writing of generic replica up to 1024 bytes)">BeamingGenericReplica</a>;
<a name="l00055"></a>00055 
<a name="l00056"></a>00056 std::map&lt;RakNetGUID, std::vector&lt;std::string&gt; &gt; <a class="code" href="_client_server_8h.html#a23ccb3d0e9aaae919d32876ed291503e">new_clients</a>; <span class="comment">//for client checkstatus() function - deprecated</span>
<a name="l00057"></a>00057 <span class="comment">//NOTE: Perhaps using different maps may not be the most efficient approach, </span>
<a name="l00058"></a>00058 <span class="comment">//however, using one map for all replicas will require typecasting which can cause type errors or affect performance </span>
<a name="l00059"></a><a class="code" href="_client_server_8h.html#a045310ed105e329426e31b89e065b05c">00059</a> std::map&lt;RakNetGUID, std::vector&lt;BeamingAvatarJointReplica*&gt; &gt; <a class="code" href="_client_server_8h.html#a045310ed105e329426e31b89e065b05c">avatar_joint_replicas</a>; <span class="comment">//lookup by guid, to get pointers for avatar joint replicas</span>
<a name="l00060"></a><a class="code" href="_client_server_8h.html#a09e5b19ea35b0333e0b25fbe166acdfc">00060</a> std::map&lt;RakNetGUID, std::vector&lt;BeamingEmotionReplica*&gt; &gt; <a class="code" href="_client_server_8h.html#a09e5b19ea35b0333e0b25fbe166acdfc">emotion_replicas</a>; <span class="comment">//lookup by guid, to get pointers for emotion replicas</span>
<a name="l00061"></a><a class="code" href="_client_server_8h.html#a3ebf39ed2989b10581f8f5ef1b977b38">00061</a> std::map&lt;RakNetGUID, std::vector&lt;BeamingFacialReplica*&gt; &gt; <a class="code" href="_client_server_8h.html#a3ebf39ed2989b10581f8f5ef1b977b38">facial_replicas</a>; <span class="comment">//lookup by guid, to get pointers for facial replicas</span>
<a name="l00062"></a><a class="code" href="_client_server_8h.html#a6822ba84ee75da64dc977e6bc3646328">00062</a> std::map&lt;RakNetGUID, std::vector&lt;BeamingTactileReplica*&gt; &gt; <a class="code" href="_client_server_8h.html#a6822ba84ee75da64dc977e6bc3646328">tactile_replicas</a>; <span class="comment">//lookup by guid, to get pointers for tactile replicas</span>
<a name="l00063"></a><a class="code" href="_client_server_8h.html#a8f02b9433307fc8567cc587ed4be14bd">00063</a> std::map&lt;RakNetGUID, std::vector&lt;BeamingRobotReplica*&gt; &gt; <a class="code" href="_client_server_8h.html#a8f02b9433307fc8567cc587ed4be14bd">robot_replicas</a>; <span class="comment">//lookup by guid, to get pointers for robot replicas</span>
<a name="l00064"></a><a class="code" href="_client_server_8h.html#a0b1a936c33cf846d256dd0a4f8cab0de">00064</a> std::map&lt;RakNetGUID, std::vector&lt;BeamingVideoReplica*&gt; &gt; <a class="code" href="_client_server_8h.html#a0b1a936c33cf846d256dd0a4f8cab0de">video_replicas</a>; <span class="comment">//lookup by guid, to get pointers for video replicas</span>
<a name="l00065"></a><a class="code" href="_client_server_8h.html#aaac52d5fa5b61e29925ed124fe03d35d">00065</a> std::map&lt;RakNetGUID, std::vector&lt;BeamingObjectReplica*&gt; &gt; <a class="code" href="_client_server_8h.html#aaac52d5fa5b61e29925ed124fe03d35d">object_replicas</a>; <span class="comment">//lookup by guid, to get pointers for object replicas</span>
<a name="l00066"></a><a class="code" href="_client_server_8h.html#a40bd55104716ac13ddbfe90bf63f60da">00066</a> std::map&lt;RakNetGUID, std::vector&lt;BeamingAudioReplica*&gt; &gt; <a class="code" href="_client_server_8h.html#a40bd55104716ac13ddbfe90bf63f60da">audio_replicas</a>; <span class="comment">//lookup by guid, to get pointers for audio replicas</span>
<a name="l00067"></a><a class="code" href="_client_server_8h.html#a7c73662d8d9072e714396d76b8b98a1f">00067</a> std::map&lt;RakNetGUID, std::vector&lt;BeamingPointCloudReplica*&gt; &gt; <a class="code" href="_client_server_8h.html#a7c73662d8d9072e714396d76b8b98a1f">point_cloud_replicas</a>; <span class="comment">//lookup by guid, to get pointers for point cloud replicas</span>
<a name="l00068"></a><a class="code" href="_client_server_8h.html#a61cf6a51b1d3eed6ab9903aa09162bbc">00068</a> std::map&lt;RakNetGUID, std::vector&lt;BeamingGenericReplica*&gt; &gt; <a class="code" href="_client_server_8h.html#a61cf6a51b1d3eed6ab9903aa09162bbc">generic_replicas</a>; <span class="comment">//lookup by guid, to get pointers for generic replicas</span>
<a name="l00069"></a><a class="code" href="structnode__info.html">00069</a> <span class="keyword">struct </span><a class="code" href="structnode__info.html">node_info</a> {
<a name="l00070"></a><a class="code" href="structnode__info.html#a988e1ab3a75015487c4ec4437252a7c7">00070</a>         std::string <a class="code" href="structnode__info.html#a988e1ab3a75015487c4ec4437252a7c7">name</a>;
<a name="l00071"></a><a class="code" href="structnode__info.html#ae0ced250b53ea22030b06eba3ec72cdf">00071</a>         std::string <a class="code" href="structnode__info.html#ae0ced250b53ea22030b06eba3ec72cdf">type</a>;
<a name="l00072"></a><a class="code" href="structnode__info.html#a9fff45a48d3b146c63286ac1ed619253">00072</a>         <span class="keywordtype">char</span> *<a class="code" href="structnode__info.html#a9fff45a48d3b146c63286ac1ed619253">peername</a>;
<a name="l00073"></a><a class="code" href="structnode__info.html#af41b479f65d8e4fb4fa4ce60bf8178d4">00073</a>         <span class="keywordtype">char</span> *<a class="code" href="structnode__info.html#af41b479f65d8e4fb4fa4ce60bf8178d4">peertype</a>;
<a name="l00074"></a><a class="code" href="structnode__info.html#a7ee000868dae399f9257cad47949a2f8">00074</a>         <span class="keywordtype">char</span> *<a class="code" href="structnode__info.html#a7ee000868dae399f9257cad47949a2f8">peercfg</a>;
<a name="l00075"></a><a class="code" href="structnode__info.html#ada10d3d81f59e388bc3a0b83788de1e7">00075</a>         <span class="keywordtype">char</span> *<a class="code" href="structnode__info.html#ada10d3d81f59e388bc3a0b83788de1e7">ipport</a>;
<a name="l00076"></a>00076 };
<a name="l00077"></a><a class="code" href="_client_server_8h.html#aee6ed86d42821e392e49ae3ecb3f04b6">00077</a> std::map&lt;std::string, std::vector&lt;node_info*&gt; &gt; <a class="code" href="_client_server_8h.html#aee6ed86d42821e392e49ae3ecb3f04b6">nodes_map</a>; <span class="comment">//lookup by guid, to get node_info</span>
<a name="l00078"></a><a class="code" href="_client_server_8h.html#a87a1f273fa8ad585520f9a5e5d071ec4">00078</a> PacketFileLogger <a class="code" href="_client_server_8h.html#a87a1f273fa8ad585520f9a5e5d071ec4">logfileHandler</a>;
<a name="l00079"></a><a class="code" href="_client_server_8h.html#af7883388f6a285534cba3f39404124d4">00079</a> <span class="keywordtype">bool</span> <a class="code" href="_client_server_8h.html#af7883388f6a285534cba3f39404124d4">logging</a>=<span class="keyword">false</span>;
<a name="l00080"></a>00080 
<a name="l00081"></a>00081 
<a name="l00083"></a><a class="code" href="class_beaming_user.html">00083</a> <span class="keyword">class </span><a class="code" href="class_beaming_user.html" title="User Replica.">BeamingUser</a> : <span class="keyword">public</span> Replica3
<a name="l00084"></a>00084 {
<a name="l00085"></a>00085 <span class="keyword">public</span>:
<a name="l00086"></a><a class="code" href="class_beaming_user.html#afa3f9bf6fcb4105ad2c99842286d100e">00086</a>         <span class="keywordtype">void</span> PrintOutput(RakNet::BitStream *bs)
<a name="l00087"></a>00087         {
<a name="l00088"></a>00088                 <span class="keywordflow">if</span> (bs-&gt;GetNumberOfBitsUsed()==0)
<a name="l00089"></a>00089                         <span class="keywordflow">return</span>;
<a name="l00090"></a>00090                 RakNet::RakString rakString;
<a name="l00091"></a>00091                 bs-&gt;Read(rakString);
<a name="l00092"></a>00092                 printf(<span class="stringliteral">&quot;Receive: %s\n&quot;</span>, rakString.C_String());
<a name="l00093"></a>00093         }
<a name="l00094"></a><a class="code" href="class_beaming_user.html#af8ce956d94ab68f510432a82cc7b9f99">00094</a>         <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="class_beaming_user.html#af8ce956d94ab68f510432a82cc7b9f99">SerializeConstruction</a>(RakNet::BitStream *constructionBitstream, RakNet::Connection_RM3 *destinationConnection)     { 
<a name="l00095"></a>00095                 constructionBitstream-&gt;Write(clientname);
<a name="l00096"></a>00096                 constructionBitstream-&gt;Write(clientType);
<a name="l00097"></a>00097                 constructionBitstream-&gt;Write(clientConfig);
<a name="l00098"></a>00098                 constructionBitstream-&gt;Write(ip_port);
<a name="l00099"></a>00099                 strcpy(username,<span class="stringliteral">&quot;&quot;</span>);
<a name="l00100"></a>00100 <span class="preprocessor">#if defined(__WIN32__) || defined(WIN32)</span>
<a name="l00101"></a>00101 <span class="preprocessor"></span>          DWORD size;
<a name="l00102"></a>00102           (GetUserNameA( username, &amp;size ));
<a name="l00103"></a>00103 <span class="preprocessor">#else</span>
<a name="l00104"></a>00104 <span class="preprocessor"></span>                FILE *name;
<a name="l00105"></a>00105                 name = popen(<span class="stringliteral">&quot;whoami&quot;</span>, <span class="stringliteral">&quot;r&quot;</span>);
<a name="l00106"></a>00106                 fgets(username, <span class="keyword">sizeof</span>(username), name);
<a name="l00107"></a>00107                 pclose(name);
<a name="l00108"></a>00108 <span class="preprocessor">#endif</span>
<a name="l00109"></a>00109 <span class="preprocessor"></span>                constructionBitstream-&gt;Write(username);
<a name="l00110"></a>00110         }
<a name="l00111"></a><a class="code" href="class_beaming_user.html#a39ecc4e47f7bb41c9a5fac85fe491da2">00111</a>         <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="class_beaming_user.html#a39ecc4e47f7bb41c9a5fac85fe491da2">DeserializeConstruction</a>(RakNet::BitStream *constructionBitstream, RakNet::Connection_RM3 *sourceConnection) { 
<a name="l00112"></a>00112                 constructionBitstream-&gt;Read(clientname);
<a name="l00113"></a>00113                 constructionBitstream-&gt;Read(clientType);
<a name="l00114"></a>00114                 constructionBitstream-&gt;Read(clientConfig);
<a name="l00115"></a>00115                 constructionBitstream-&gt;Read(ip_port);
<a name="l00116"></a>00116                 constructionBitstream-&gt;Read(username);
<a name="l00117"></a>00117                 <span class="keywordflow">if</span> (<a class="code" href="_client_server_8h.html#ad9b4d2b6bfe35238ad017f255ce6d0a1">topology</a> == <a class="code" href="_client_server_8h.html#a06fc87d81c62e9abb8790b6e5713c55ba67c96b24b23bcb408bae7626730a04b7">SERVER</a>)
<a name="l00118"></a>00118                 {
<a name="l00119"></a>00119                         printf(<span class="stringliteral">&quot;Connection from user: %s, ip: %s\n&quot;</span>,username,sourceConnection-&gt;GetSystemAddress().ToString());
<a name="l00120"></a>00120                         sprintf(ip_port,<span class="stringliteral">&quot;%s&quot;</span>,sourceConnection-&gt;GetSystemAddress().ToString());
<a name="l00121"></a>00121 
<a name="l00122"></a>00122                 } <span class="keywordflow">else</span> {
<a name="l00123"></a>00123                         printf(<span class="stringliteral">&quot;Connection from user: %s\n&quot;</span>,username); }
<a name="l00124"></a>00124                 <a class="code" href="_client_server_8h.html#a23ccb3d0e9aaae919d32876ed291503e">new_clients</a>[this-&gt;GetCreatingSystemGUID()].push_back(clientname);
<a name="l00125"></a>00125                 <a class="code" href="_client_server_8h.html#a23ccb3d0e9aaae919d32876ed291503e">new_clients</a>[this-&gt;GetCreatingSystemGUID()].push_back(clientType);
<a name="l00126"></a>00126                 <a class="code" href="_client_server_8h.html#a23ccb3d0e9aaae919d32876ed291503e">new_clients</a>[this-&gt;GetCreatingSystemGUID()].push_back(clientConfig);
<a name="l00127"></a>00127                 <span class="keywordflow">return</span> <span class="keyword">true</span>; 
<a name="l00128"></a>00128         }
<a name="l00129"></a><a class="code" href="class_beaming_user.html#af2ace89dbd788247407e6b4f454a4c2a">00129</a>         <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="class_beaming_user.html#af2ace89dbd788247407e6b4f454a4c2a">SerializeDestruction</a>(RakNet::BitStream *destructionBitstream, RakNet::Connection_RM3 *destinationConnection) { }
<a name="l00130"></a><a class="code" href="class_beaming_user.html#a355093f433b903dcc86d63df13312c12">00130</a>         <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="class_beaming_user.html#a355093f433b903dcc86d63df13312c12">DeserializeDestruction</a>(RakNet::BitStream *destructionBitstream, RakNet::Connection_RM3 *sourceConnection) { <span class="keywordflow">return</span> <span class="keyword">true</span>; }
<a name="l00131"></a><a class="code" href="class_beaming_user.html#a421586e6baf0e4f34b5f8da90e6c7217">00131</a>         <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="class_beaming_user.html#a421586e6baf0e4f34b5f8da90e6c7217">DeallocReplica</a>(RakNet::Connection_RM3 *sourceConnection) { <span class="keyword">delete</span> <span class="keyword">this</span>; }
<a name="l00132"></a><a class="code" href="class_beaming_user.html#a5279ea44c4a41f6aa23b22a8da969168">00132</a>         <span class="keyword">virtual</span> RM3SerializationResult <a class="code" href="class_beaming_user.html#a5279ea44c4a41f6aa23b22a8da969168">Serialize</a>(SerializeParameters *serializeParameters)      {
<a name="l00133"></a>00133                 <span class="keywordflow">return</span> RM3SR_BROADCAST_IDENTICALLY;
<a name="l00134"></a>00134         }
<a name="l00135"></a><a class="code" href="class_beaming_user.html#ac2ed95cffb4e6e9e8b0e0e4be824ca90">00135</a>         <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="class_beaming_user.html#ac2ed95cffb4e6e9e8b0e0e4be824ca90">Deserialize</a>(RakNet::DeserializeParameters *deserializeParameters) { }
<a name="l00136"></a><a class="code" href="class_beaming_user.html#a7ccbf4a5236b5fc4cfedebadd3e3606e">00136</a>         <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="class_beaming_user.html#a7ccbf4a5236b5fc4cfedebadd3e3606e">SerializeConstructionRequestAccepted</a>(RakNet::BitStream *serializationBitstream, RakNet::Connection_RM3 *requestingConnection)      { }
<a name="l00137"></a><a class="code" href="class_beaming_user.html#a7ac5fc464ce4d3593d6ee63328d9e718">00137</a>         <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="class_beaming_user.html#a7ac5fc464ce4d3593d6ee63328d9e718">DeserializeConstructionRequestAccepted</a>(RakNet::BitStream *serializationBitstream, RakNet::Connection_RM3 *acceptingConnection) { }
<a name="l00138"></a><a class="code" href="class_beaming_user.html#a2bbb5bcdb76eb90c038e791044cd3348">00138</a>         <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="class_beaming_user.html#a2bbb5bcdb76eb90c038e791044cd3348">SerializeConstructionRequestRejected</a>(RakNet::BitStream *serializationBitstream, RakNet::Connection_RM3 *requestingConnection)      { }
<a name="l00139"></a><a class="code" href="class_beaming_user.html#a59286efd1d4929814904fb9dd549c23e">00139</a>         <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="class_beaming_user.html#a59286efd1d4929814904fb9dd549c23e">DeserializeConstructionRequestRejected</a>(RakNet::BitStream *serializationBitstream, RakNet::Connection_RM3 *rejectingConnection) { }
<a name="l00140"></a><a class="code" href="class_beaming_user.html#af883675522f74e2bf88864f27d931fc8">00140</a>         <span class="keyword">virtual</span> RM3ConstructionState <a class="code" href="class_beaming_user.html#af883675522f74e2bf88864f27d931fc8">QueryConstruction</a>(RakNet::Connection_RM3 *destinationConnection, ReplicaManager3 *replicaManager3) {
<a name="l00141"></a>00141                         <span class="keywordflow">return</span> QueryConstruction_ClientConstruction(destinationConnection);
<a name="l00142"></a>00142         }
<a name="l00143"></a><a class="code" href="class_beaming_user.html#a33b31518abb022f9fe5af4aea72fb756">00143</a>         <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="class_beaming_user.html#a33b31518abb022f9fe5af4aea72fb756">QueryRemoteConstruction</a>(RakNet::Connection_RM3 *sourceConnection) {
<a name="l00144"></a>00144                         <span class="keywordflow">return</span> QueryRemoteConstruction_ClientConstruction(sourceConnection);
<a name="l00145"></a>00145         }
<a name="l00146"></a>00146 
<a name="l00147"></a><a class="code" href="class_beaming_user.html#a66ddf7724664b781de2d1223df856a48">00147</a>         <span class="keyword">virtual</span> RM3QuerySerializationResult <a class="code" href="class_beaming_user.html#a66ddf7724664b781de2d1223df856a48">QuerySerialization</a>(RakNet::Connection_RM3 *destinationConnection) {
<a name="l00148"></a>00148                         <span class="keywordflow">return</span> QuerySerialization_ClientSerializable(destinationConnection);
<a name="l00149"></a>00149         }
<a name="l00150"></a><a class="code" href="class_beaming_user.html#a6d955c305cf102798d91516b22b35bc3">00150</a>         <span class="keyword">virtual</span> RM3ActionOnPopConnection <a class="code" href="class_beaming_user.html#a6d955c305cf102798d91516b22b35bc3">QueryActionOnPopConnection</a>(RakNet::Connection_RM3 *droppedConnection)<span class="keyword"> const </span>{
<a name="l00151"></a>00151                 <span class="keywordflow">if</span> (<a class="code" href="_client_server_8h.html#ad9b4d2b6bfe35238ad017f255ce6d0a1">topology</a>==<a class="code" href="_client_server_8h.html#a06fc87d81c62e9abb8790b6e5713c55ba67c96b24b23bcb408bae7626730a04b7">SERVER</a>)
<a name="l00152"></a>00152                         <span class="keywordflow">return</span> QueryActionOnPopConnection_Server(droppedConnection);
<a name="l00153"></a>00153                 <span class="keywordflow">else</span>
<a name="l00154"></a>00154                         <span class="keywordflow">return</span> QueryActionOnPopConnection_Client(droppedConnection);
<a name="l00155"></a>00155         }
<a name="l00156"></a>00156 
<a name="l00157"></a><a class="code" href="class_beaming_user.html#acf5fb1cd5185616fbc4de562c183f50d">00157</a>         <span class="keywordtype">char</span> clientname[128];
<a name="l00158"></a><a class="code" href="class_beaming_user.html#a85b985eb9faf36b41ac32bc5193d9012">00158</a>         <span class="keywordtype">char</span> clientConfig[128];
<a name="l00159"></a><a class="code" href="class_beaming_user.html#a453c969f37c387d13347dbc878c1bf1b">00159</a>         <span class="keywordtype">char</span> clientType[128];
<a name="l00160"></a><a class="code" href="class_beaming_user.html#a7c6d2512b4c3ea9e504cd6d0a67f0f0e">00160</a>         <span class="keywordtype">char</span> username[128];
<a name="l00161"></a><a class="code" href="class_beaming_user.html#aa5a657dd717e7627cb934a8b22d35f0a">00161</a>         <span class="keywordtype">char</span> logstr[1024];
<a name="l00162"></a><a class="code" href="class_beaming_user.html#aae712f8009bec3cc08590f92e3fb8e86">00162</a>         <span class="keywordtype">char</span> localtime[128];
<a name="l00163"></a><a class="code" href="class_beaming_user.html#aeffec51ee0134aacd71dee1b56abaddd">00163</a>         <span class="keywordtype">char</span> ip_port[128];
<a name="l00164"></a>00164 
<a name="l00165"></a><a class="code" href="class_beaming_user.html#a5f93059cb89c2f8f844f7326fb1c705e">00165</a>         <a class="code" href="class_beaming_user.html#a5f93059cb89c2f8f844f7326fb1c705e">BeamingUser</a>() { }
<a name="l00166"></a>00166 
<a name="l00167"></a><a class="code" href="class_beaming_user.html#af6e3830a9d52a7beb0aa51026054b4b2">00167</a>         <span class="keyword">virtual</span> <a class="code" href="class_beaming_user.html#af6e3830a9d52a7beb0aa51026054b4b2">~BeamingUser</a>() { 
<a name="l00168"></a>00168                 <span class="keywordflow">if</span> (<a class="code" href="_client_server_8h.html#ad9b4d2b6bfe35238ad017f255ce6d0a1">topology</a>==<a class="code" href="_client_server_8h.html#a06fc87d81c62e9abb8790b6e5713c55ba67c96b24b23bcb408bae7626730a04b7">SERVER</a>)
<a name="l00169"></a>00169                         BroadcastDestruction();
<a name="l00170"></a>00170         }
<a name="l00171"></a>00171 };
<a name="l00172"></a>00172 
<a name="l00173"></a>00173 
<a name="l00175"></a><a class="code" href="class_beaming_avatar_joint_replica.html">00175</a> <span class="keyword">class </span><a class="code" href="class_beaming_avatar_joint_replica.html" title="Avatar Joint Replica.">BeamingAvatarJointReplica</a> : <span class="keyword">public</span> <a class="code" href="class_beaming_user.html" title="User Replica.">BeamingUser</a>
<a name="l00176"></a>00176 {
<a name="l00177"></a>00177         <span class="keyword">virtual</span> RakNet::RakString GetName(<span class="keywordtype">void</span>)<span class="keyword"> const </span>{<span class="keywordflow">return</span> RakNet::RakString(<span class="stringliteral">&quot;AVATAR&quot;</span>);}
<a name="l00178"></a>00178         <span class="keyword">virtual</span> <span class="keywordtype">void</span> WriteAllocationID(RakNet::BitStream *allocationIdBitstream)<span class="keyword"> const </span>{
<a name="l00179"></a>00179                 allocationIdBitstream-&gt;Write(GetName());
<a name="l00180"></a>00180         }
<a name="l00181"></a>00181         <span class="keyword">virtual</span> <span class="keywordtype">void</span> SerializeConstruction(RakNet::BitStream *constructionBitstream, RakNet::Connection_RM3 *destinationConnection)     {
<a name="l00182"></a>00182                 <a class="code" href="class_beaming_user.html#af8ce956d94ab68f510432a82cc7b9f99">BeamingUser::SerializeConstruction</a>(constructionBitstream, destinationConnection);
<a name="l00183"></a>00183                 constructionBitstream-&gt;Write(GetName() + RakNet::RakString(avatarjoint_id) + RakNet::RakString(<span class="stringliteral">&quot; created for guid &quot;</span>) + RakNet::RakString(this-&gt;GetCreatingSystemGUID().ToString()));
<a name="l00184"></a>00184                 constructionBitstream-&gt;Write(avatarjoint_id);
<a name="l00185"></a>00185                 constructionBitstream-&gt;Write(parentbone);
<a name="l00186"></a>00186         }
<a name="l00187"></a>00187         <span class="keyword">virtual</span> <span class="keywordtype">bool</span> DeserializeConstruction(RakNet::BitStream *constructionBitstream, RakNet::Connection_RM3 *sourceConnection) {
<a name="l00188"></a>00188                 <span class="keywordflow">if</span> (!<a class="code" href="class_beaming_user.html#a39ecc4e47f7bb41c9a5fac85fe491da2">BeamingUser::DeserializeConstruction</a>(constructionBitstream, sourceConnection))
<a name="l00189"></a>00189                         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00190"></a>00190                 RakNetTimeMS time = RakNet::GetTime();
<a name="l00191"></a>00191                 PrintOutput(constructionBitstream);
<a name="l00192"></a>00192                 constructionBitstream-&gt;Read(avatarjoint_id);
<a name="l00193"></a>00193                 constructionBitstream-&gt;Read(parentbone);
<a name="l00194"></a>00194                 printf(<span class="stringliteral">&quot;Client: %s, Type: %s, Config: %s, Node: %s\n&quot;</span>,clientname,clientType,clientConfig,avatarjoint_id);
<a name="l00195"></a>00195                 <a class="code" href="_client_server_8h.html#a045310ed105e329426e31b89e065b05c">avatar_joint_replicas</a>[this-&gt;GetCreatingSystemGUID()].push_back(<span class="keyword">this</span>); <span class="comment">//create within map on new client connection</span>
<a name="l00196"></a>00196                 thisnode = <span class="keyword">new</span> <a class="code" href="structnode__info.html">node_info</a>;
<a name="l00197"></a>00197                 thisnode-&gt;<a class="code" href="structnode__info.html#a988e1ab3a75015487c4ec4437252a7c7">name</a>=avatarjoint_id;
<a name="l00198"></a>00198                 thisnode-&gt;type=GetName().C_String();
<a name="l00199"></a>00199                 thisnode-&gt;peername = clientname;
<a name="l00200"></a>00200                 thisnode-&gt;peertype = clientType;
<a name="l00201"></a>00201                 thisnode-&gt;peercfg = clientConfig;
<a name="l00202"></a>00202                 thisnode-&gt;ipport = ip_port;
<a name="l00203"></a>00203                 <a class="code" href="_client_server_8h.html#aee6ed86d42821e392e49ae3ecb3f04b6">nodes_map</a>[this-&gt;GetCreatingSystemGUID().ToString()].push_back(thisnode);
<a name="l00204"></a>00204                 <span class="keywordflow">if</span> ((<a class="code" href="_client_server_8h.html#ad9b4d2b6bfe35238ad017f255ce6d0a1">topology</a>==<a class="code" href="_client_server_8h.html#a06fc87d81c62e9abb8790b6e5713c55ba67c96b24b23bcb408bae7626730a04b7">SERVER</a>)&amp;&amp;(<a class="code" href="_client_server_8h.html#af7883388f6a285534cba3f39404124d4">logging</a>==<span class="keyword">true</span>))
<a name="l00205"></a>00205                 {
<a name="l00206"></a>00206                         <span class="comment">//printf(&quot;%&quot;PRINTF_64_BIT_MODIFIER&quot;u: %s client created; rem %i\n&quot;,(unsigned long long)time,sourceConnection-&gt;GetRakNetGUID().ToString(),avatar_joint_replicas.size());</span>
<a name="l00207"></a>00207                         <a class="code" href="_client_server_8h.html#a87a1f273fa8ad585520f9a5e5d071ec4">logfileHandler</a>.GetLocalTime(localtime);
<a name="l00208"></a>00208                         sprintf(logstr,<span class="stringliteral">&quot;C;%&quot;</span>PRINTF_64_BIT_MODIFIER<span class="stringliteral">&quot;u;%s;%s;0;%i&quot;</span>,(<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keywordtype">long</span>)time,localtime,sourceConnection-&gt;GetRakNetGUID().ToString(),<a class="code" href="_client_server_8h.html#a045310ed105e329426e31b89e065b05c">avatar_joint_replicas</a>.size());
<a name="l00209"></a>00209                         <a class="code" href="_client_server_8h.html#a87a1f273fa8ad585520f9a5e5d071ec4">logfileHandler</a>.WriteLog(logstr);
<a name="l00210"></a>00210                 }
<a name="l00211"></a>00211                 <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00212"></a>00212         }
<a name="l00213"></a>00213         <span class="keyword">virtual</span> <span class="keywordtype">void</span> SerializeDestruction(RakNet::BitStream *destructionBitstream, RakNet::Connection_RM3 *destinationConnection)       {
<a name="l00214"></a>00214                 <a class="code" href="class_beaming_user.html#af2ace89dbd788247407e6b4f454a4c2a">BeamingUser::SerializeDestruction</a>(destructionBitstream, destinationConnection);
<a name="l00215"></a>00215                 destructionBitstream-&gt;Write(GetName() + RakNet::RakString(avatarjoint_id) + RakNet::RakString(<span class="stringliteral">&quot; removed for guid &quot;</span>) + RakNet::RakString(this-&gt;GetCreatingSystemGUID().ToString()));
<a name="l00216"></a>00216         }
<a name="l00217"></a>00217         <span class="keyword">virtual</span> <span class="keywordtype">bool</span> DeserializeDestruction(RakNet::BitStream *destructionBitstream, RakNet::Connection_RM3 *sourceConnection) {
<a name="l00218"></a>00218                 <span class="keywordflow">if</span> (!<a class="code" href="class_beaming_user.html#a355093f433b903dcc86d63df13312c12">BeamingUser::DeserializeDestruction</a>(destructionBitstream, sourceConnection))
<a name="l00219"></a>00219                         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00220"></a>00220                 RakNetTimeMS time = RakNet::GetTime();
<a name="l00221"></a>00221                 PrintOutput(destructionBitstream);
<a name="l00222"></a>00222                 <span class="comment">//remove avatar joints from avatar_joint_replicas</span>
<a name="l00223"></a>00223                 <span class="keywordflow">for</span> ( std::vector&lt;BeamingAvatarJointReplica*&gt;::iterator cIter = <a class="code" href="_client_server_8h.html#a045310ed105e329426e31b89e065b05c">avatar_joint_replicas</a>[this-&gt;GetCreatingSystemGUID()].begin(); cIter!=<a class="code" href="_client_server_8h.html#a045310ed105e329426e31b89e065b05c">avatar_joint_replicas</a>[this-&gt;GetCreatingSystemGUID()].end(); cIter++ ) {
<a name="l00224"></a>00224                         <span class="keywordflow">if</span> (( strcmp((*cIter)-&gt;avatarjoint_id,avatarjoint_id) == 0 ) &amp;&amp;  ( strcmp((*cIter)-&gt;clientname,clientname) == 0 )) {
<a name="l00225"></a>00225                                 <a class="code" href="_client_server_8h.html#a045310ed105e329426e31b89e065b05c">avatar_joint_replicas</a>[this-&gt;GetCreatingSystemGUID()].erase(cIter);
<a name="l00226"></a>00226                                 <span class="keywordflow">break</span>;
<a name="l00227"></a>00227                         }
<a name="l00228"></a>00228                 }
<a name="l00229"></a>00229                 <span class="comment">//remove avatar joints from nodes_map</span>
<a name="l00230"></a>00230                 <span class="keywordflow">for</span> ( std::vector&lt;node_info*&gt;::iterator cIter = <a class="code" href="_client_server_8h.html#aee6ed86d42821e392e49ae3ecb3f04b6">nodes_map</a>[this-&gt;GetCreatingSystemGUID().ToString()].begin(); cIter!=<a class="code" href="_client_server_8h.html#aee6ed86d42821e392e49ae3ecb3f04b6">nodes_map</a>[this-&gt;GetCreatingSystemGUID().ToString()].end(); cIter++ ) {
<a name="l00231"></a>00231                         <span class="keywordflow">if</span> (( strcmp((*cIter)-&gt;name.c_str(),avatarjoint_id) == 0 ) &amp;&amp;  ( strcmp((*cIter)-&gt;peername,clientname) == 0 )) {
<a name="l00232"></a>00232                                 <a class="code" href="_client_server_8h.html#aee6ed86d42821e392e49ae3ecb3f04b6">nodes_map</a>[this-&gt;GetCreatingSystemGUID().ToString()].erase(cIter);
<a name="l00233"></a>00233                                 <span class="keywordflow">break</span>;
<a name="l00234"></a>00234                         }
<a name="l00235"></a>00235                 }
<a name="l00236"></a>00236                 <span class="keywordflow">if</span> (<a class="code" href="_client_server_8h.html#aee6ed86d42821e392e49ae3ecb3f04b6">nodes_map</a>[this-&gt;GetCreatingSystemGUID().ToString()].empty())
<a name="l00237"></a>00237                 {       <a class="code" href="_client_server_8h.html#aee6ed86d42821e392e49ae3ecb3f04b6">nodes_map</a>.erase(this-&gt;GetCreatingSystemGUID().ToString());      }
<a name="l00238"></a>00238                 <a class="code" href="_client_server_8h.html#a23ccb3d0e9aaae919d32876ed291503e">new_clients</a>.erase(this-&gt;GetCreatingSystemGUID()); <span class="comment">//deprecated</span>
<a name="l00239"></a>00239                 <span class="keywordflow">if</span> ((<a class="code" href="_client_server_8h.html#ad9b4d2b6bfe35238ad017f255ce6d0a1">topology</a>==<a class="code" href="_client_server_8h.html#a06fc87d81c62e9abb8790b6e5713c55ba67c96b24b23bcb408bae7626730a04b7">SERVER</a>)&amp;&amp;(<a class="code" href="_client_server_8h.html#af7883388f6a285534cba3f39404124d4">logging</a>==<span class="keyword">true</span>))
<a name="l00240"></a>00240                 {
<a name="l00241"></a>00241                         <span class="comment">//printf(&quot;%&quot;PRINTF_64_BIT_MODIFIER&quot;u: %s client deleted; rem %i\n&quot;,(unsigned long long)time,sourceConnection-&gt;GetRakNetGUID().ToString(),avatar_joint_replicas.size());</span>
<a name="l00242"></a>00242                         <a class="code" href="_client_server_8h.html#a87a1f273fa8ad585520f9a5e5d071ec4">logfileHandler</a>.GetLocalTime(localtime);
<a name="l00243"></a>00243                         sprintf(logstr,<span class="stringliteral">&quot;D;%&quot;</span>PRINTF_64_BIT_MODIFIER<span class="stringliteral">&quot;u;%s;%s;0;%i&quot;</span>,(<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keywordtype">long</span>)time,localtime,sourceConnection-&gt;GetRakNetGUID().ToString(),<a class="code" href="_client_server_8h.html#a045310ed105e329426e31b89e065b05c">avatar_joint_replicas</a>.size());
<a name="l00244"></a>00244                         <a class="code" href="_client_server_8h.html#a87a1f273fa8ad585520f9a5e5d071ec4">logfileHandler</a>.WriteLog(logstr);
<a name="l00245"></a>00245                 }
<a name="l00246"></a>00246                 <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00247"></a>00247         }
<a name="l00248"></a>00248         <span class="keyword">virtual</span> <span class="keywordtype">void</span> DeallocReplica(RakNet::Connection_RM3 *sourceConnection) {
<a name="l00249"></a>00249                 <span class="keyword">delete</span> <span class="keyword">this</span>;
<a name="l00250"></a>00250         }
<a name="l00251"></a>00251         <span class="keyword">virtual</span> RM3SerializationResult Serialize(SerializeParameters *serializeParameters)      {
<a name="l00252"></a>00252                 <a class="code" href="class_beaming_user.html#a5279ea44c4a41f6aa23b22a8da969168">BeamingUser::Serialize</a>(serializeParameters);
<a name="l00253"></a>00253                 RakNetTimeMS time = RakNet::GetTime();
<a name="l00254"></a>00254                 serializeParameters-&gt;outputBitstream[0].WriteAlignedBytes((<span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>*)&amp;fname,<span class="keyword">sizeof</span>(fname));
<a name="l00255"></a>00255                 serializeParameters-&gt;outputBitstream[0].WriteAlignedBytes((<span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>*)&amp;lname,<span class="keyword">sizeof</span>(lname));
<a name="l00256"></a>00256                 serializeParameters-&gt;outputBitstream[0].WriteAlignedBytes((<span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>*)&amp;position,<span class="keyword">sizeof</span>(position));
<a name="l00257"></a>00257                 serializeParameters-&gt;outputBitstream[0].WriteAlignedBytes((<span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>*)&amp;orientation,<span class="keyword">sizeof</span>(orientation));
<a name="l00258"></a>00258                 <span class="keywordflow">return</span> RM3SR_BROADCAST_IDENTICALLY;
<a name="l00259"></a>00259         }
<a name="l00260"></a>00260         <span class="keyword">virtual</span> <span class="keywordtype">void</span> Deserialize(RakNet::DeserializeParameters *deserializeParameters) {
<a name="l00261"></a>00261                 <a class="code" href="class_beaming_user.html#ac2ed95cffb4e6e9e8b0e0e4be824ca90">BeamingUser::Deserialize</a>(deserializeParameters);
<a name="l00262"></a>00262                 RakNetTimeMS time = RakNet::GetTime();
<a name="l00263"></a>00263                 deserializeParameters-&gt;serializationBitstream[0].ReadAlignedBytes((<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>*)&amp;fname,<span class="keyword">sizeof</span>(fname));
<a name="l00264"></a>00264                 deserializeParameters-&gt;serializationBitstream[0].ReadAlignedBytes((<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>*)&amp;lname,<span class="keyword">sizeof</span>(lname));
<a name="l00265"></a>00265                 deserializeParameters-&gt;serializationBitstream[0].ReadAlignedBytes((<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>*)&amp;position,<span class="keyword">sizeof</span>(position));
<a name="l00266"></a>00266                 deserializeParameters-&gt;serializationBitstream[0].ReadAlignedBytes((<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>*)&amp;orientation,<span class="keyword">sizeof</span>(orientation));
<a name="l00267"></a>00267                 <span class="comment">//printf(&quot;%&quot;PRINTF_64_BIT_MODIFIER&quot;u: %s %s %s %s %s - %.3f %.3f %.3f %.3f %.3f %.3f %.3f\n&quot;,(unsigned long long)time,clientname,this-&gt;GetCreatingSystemGUID().ToString(),clientType,clientConfig,avatarjoint_id,position.x,position.y,position.z,orientation.x,orientation.y,orientation.z,orientation.w);</span>
<a name="l00268"></a>00268                 <span class="keywordflow">if</span> ((<a class="code" href="_client_server_8h.html#ad9b4d2b6bfe35238ad017f255ce6d0a1">topology</a>==<a class="code" href="_client_server_8h.html#a06fc87d81c62e9abb8790b6e5713c55ba67c96b24b23bcb408bae7626730a04b7">SERVER</a>)&amp;&amp;(<a class="code" href="_client_server_8h.html#af7883388f6a285534cba3f39404124d4">logging</a>==<span class="keyword">true</span>))<span class="comment">//logging on server</span>
<a name="l00269"></a>00269                 {
<a name="l00270"></a>00270                                 <a class="code" href="_client_server_8h.html#a87a1f273fa8ad585520f9a5e5d071ec4">logfileHandler</a>.GetLocalTime(localtime);
<a name="l00271"></a>00271                                 sprintf(logstr,<span class="stringliteral">&quot;M;%&quot;</span>PRINTF_64_BIT_MODIFIER<span class="stringliteral">&quot;u;%s;%s;%s;%s;%s;%s;%.3f;%.3f;%.3f;%.3f;%.3f;%.3f;%.3f&quot;</span>,(<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keywordtype">long</span>)time,localtime,clientname,this-&gt;GetCreatingSystemGUID().ToString(),clientType,clientConfig,avatarjoint_id,position.x,position.y,position.z,orientation.x,orientation.y,orientation.z,orientation.w);
<a name="l00272"></a>00272                                 <a class="code" href="_client_server_8h.html#a87a1f273fa8ad585520f9a5e5d071ec4">logfileHandler</a>.WriteLog(logstr); <span class="comment">//writes additional lines</span>
<a name="l00273"></a>00273                 }
<a name="l00274"></a>00274         }
<a name="l00275"></a>00275         <span class="keyword">virtual</span> <span class="keywordtype">void</span> SerializeConstructionRequestAccepted(RakNet::BitStream *serializationBitstream, RakNet::Connection_RM3 *requestingConnection)      {
<a name="l00276"></a>00276                 serializationBitstream-&gt;Write(GetName() + RakNet::RakString(avatarjoint_id) + RakNet::RakString(<span class="stringliteral">&quot; created on server&quot;</span>));
<a name="l00277"></a>00277         }
<a name="l00278"></a>00278         <span class="keyword">virtual</span> <span class="keywordtype">void</span> DeserializeConstructionRequestAccepted(RakNet::BitStream *serializationBitstream, RakNet::Connection_RM3 *acceptingConnection) {
<a name="l00279"></a>00279                 PrintOutput(serializationBitstream);
<a name="l00280"></a>00280         }
<a name="l00281"></a>00281         <span class="keyword">virtual</span> <span class="keywordtype">void</span> SerializeConstructionRequestRejected(RakNet::BitStream *serializationBitstream, RakNet::Connection_RM3 *requestingConnection)      {
<a name="l00282"></a>00282                 serializationBitstream-&gt;Write(GetName() + RakNet::RakString(avatarjoint_id) + RakNet::RakString(<span class="stringliteral">&quot; not created on server&quot;</span>));
<a name="l00283"></a>00283         }
<a name="l00284"></a>00284         <span class="keyword">virtual</span> <span class="keywordtype">void</span> DeserializeConstructionRequestRejected(RakNet::BitStream *serializationBitstream, RakNet::Connection_RM3 *rejectingConnection) {
<a name="l00285"></a>00285                 PrintOutput(serializationBitstream);
<a name="l00286"></a>00286         }
<a name="l00287"></a>00287 
<a name="l00288"></a>00288 <span class="keyword">public</span>:
<a name="l00289"></a><a class="code" href="class_beaming_avatar_joint_replica.html#abc12718b4ca4d0ca44f965824afa2be7">00289</a>         <span class="keywordtype">char</span> avatarjoint_id[128];
<a name="l00290"></a><a class="code" href="class_beaming_avatar_joint_replica.html#a4d500806a0a547d392ceb29109d89c65">00290</a>         <a class="code" href="class_c_vec3.html">CVec3</a> <a class="code" href="class_beaming_avatar_joint_replica.html#a4d500806a0a547d392ceb29109d89c65">position</a>;
<a name="l00291"></a><a class="code" href="class_beaming_avatar_joint_replica.html#a25cb84e98ce1492f3c88dbaa364430a1">00291</a>         <a class="code" href="class_c_quat.html" title="math helper class for quaternions">CQuat</a> <a class="code" href="class_beaming_avatar_joint_replica.html#a25cb84e98ce1492f3c88dbaa364430a1">orientation</a>;
<a name="l00292"></a><a class="code" href="class_beaming_avatar_joint_replica.html#a73c9b94c7e0c5fa6962d03f8a035e1d8">00292</a>         <a class="code" href="structnode__info.html">node_info</a> *<a class="code" href="class_beaming_avatar_joint_replica.html#a73c9b94c7e0c5fa6962d03f8a035e1d8">thisnode</a>;
<a name="l00293"></a><a class="code" href="class_beaming_avatar_joint_replica.html#a373a9a957e1ca75b4c0a26438f1d57bf">00293</a>         std::string <a class="code" href="class_beaming_avatar_joint_replica.html#a373a9a957e1ca75b4c0a26438f1d57bf">parentbone</a>;
<a name="l00294"></a><a class="code" href="class_beaming_avatar_joint_replica.html#ac425a90fc443c0bd5f70dc4fcb3d1fdc">00294</a>         <span class="keywordtype">char</span> fname[128];
<a name="l00295"></a><a class="code" href="class_beaming_avatar_joint_replica.html#a2ebc6d737dd3493ac79fd70a6c9e5006">00295</a>         <span class="keywordtype">char</span> lname[128];
<a name="l00296"></a>00296 
<a name="l00297"></a><a class="code" href="class_beaming_avatar_joint_replica.html#ae4f814f07fcd08f94b889266870dc766">00297</a>         <a class="code" href="class_beaming_avatar_joint_replica.html#ae4f814f07fcd08f94b889266870dc766">BeamingAvatarJointReplica</a>() { }
<a name="l00298"></a>00298 
<a name="l00299"></a><a class="code" href="class_beaming_avatar_joint_replica.html#a35cc67aa76797f61816a05432596e2bf">00299</a>         <span class="keyword">virtual</span> <a class="code" href="class_beaming_avatar_joint_replica.html#a35cc67aa76797f61816a05432596e2bf">~BeamingAvatarJointReplica</a>() { }
<a name="l00300"></a>00300 };
<a name="l00301"></a>00301 
<a name="l00302"></a>00302 
<a name="l00304"></a><a class="code" href="class_beaming_facial_replica.html">00304</a> <span class="keyword">class </span><a class="code" href="class_beaming_facial_replica.html" title="Facial Replica.">BeamingFacialReplica</a> : <span class="keyword">public</span> <a class="code" href="class_beaming_user.html" title="User Replica.">BeamingUser</a>
<a name="l00305"></a>00305 {
<a name="l00306"></a>00306         <span class="keyword">virtual</span> RakNet::RakString GetName(<span class="keywordtype">void</span>)<span class="keyword"> const </span>{<span class="keywordflow">return</span> RakNet::RakString(<span class="stringliteral">&quot;FACIAL&quot;</span>);}
<a name="l00307"></a>00307         <span class="keyword">virtual</span> <span class="keywordtype">void</span> WriteAllocationID(RakNet::BitStream *allocationIdBitstream)<span class="keyword"> const </span>{
<a name="l00308"></a>00308                 allocationIdBitstream-&gt;Write(GetName());
<a name="l00309"></a>00309         }
<a name="l00310"></a>00310         <span class="keyword">virtual</span> <span class="keywordtype">void</span> SerializeConstruction(RakNet::BitStream *constructionBitstream, RakNet::Connection_RM3 *destinationConnection)     {
<a name="l00311"></a>00311                 <a class="code" href="class_beaming_user.html#af8ce956d94ab68f510432a82cc7b9f99">BeamingUser::SerializeConstruction</a>(constructionBitstream, destinationConnection);
<a name="l00312"></a>00312                 constructionBitstream-&gt;Write(GetName() + RakNet::RakString(facial_id) + RakNet::RakString(<span class="stringliteral">&quot; created for guid &quot;</span>) + RakNet::RakString(this-&gt;GetCreatingSystemGUID().ToString()));
<a name="l00313"></a>00313                 constructionBitstream-&gt;Write(facial_id);
<a name="l00314"></a>00314         }
<a name="l00315"></a>00315         <span class="keyword">virtual</span> <span class="keywordtype">bool</span> DeserializeConstruction(RakNet::BitStream *constructionBitstream, RakNet::Connection_RM3 *sourceConnection) {
<a name="l00316"></a>00316                 <span class="keywordflow">if</span> (!<a class="code" href="class_beaming_user.html#a39ecc4e47f7bb41c9a5fac85fe491da2">BeamingUser::DeserializeConstruction</a>(constructionBitstream, sourceConnection))
<a name="l00317"></a>00317                         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00318"></a>00318                 RakNetTimeMS time = RakNet::GetTime();
<a name="l00319"></a>00319                 PrintOutput(constructionBitstream);
<a name="l00320"></a>00320                 constructionBitstream-&gt;Read(facial_id);
<a name="l00321"></a>00321                 printf(<span class="stringliteral">&quot;Client: %s, Type: %s, Config: %s, Node: %s\n&quot;</span>,clientname,clientType,clientConfig,facial_id);
<a name="l00322"></a>00322                 <a class="code" href="_client_server_8h.html#a3ebf39ed2989b10581f8f5ef1b977b38">facial_replicas</a>[this-&gt;GetCreatingSystemGUID()].push_back(<span class="keyword">this</span>); <span class="comment">//create within map on new client connection</span>
<a name="l00323"></a>00323                 thisnode = <span class="keyword">new</span> <a class="code" href="structnode__info.html">node_info</a>;
<a name="l00324"></a>00324                 thisnode-&gt;<a class="code" href="structnode__info.html#a988e1ab3a75015487c4ec4437252a7c7">name</a>=facial_id;
<a name="l00325"></a>00325                 thisnode-&gt;type=GetName().C_String();
<a name="l00326"></a>00326                 thisnode-&gt;peername = clientname;
<a name="l00327"></a>00327                 thisnode-&gt;peertype = clientType;
<a name="l00328"></a>00328                 thisnode-&gt;peercfg = clientConfig;
<a name="l00329"></a>00329                 thisnode-&gt;ipport = ip_port;
<a name="l00330"></a>00330                 <a class="code" href="_client_server_8h.html#aee6ed86d42821e392e49ae3ecb3f04b6">nodes_map</a>[this-&gt;GetCreatingSystemGUID().ToString()].push_back(thisnode);
<a name="l00331"></a>00331                 <span class="keywordflow">if</span> ((<a class="code" href="_client_server_8h.html#ad9b4d2b6bfe35238ad017f255ce6d0a1">topology</a>==<a class="code" href="_client_server_8h.html#a06fc87d81c62e9abb8790b6e5713c55ba67c96b24b23bcb408bae7626730a04b7">SERVER</a>)&amp;&amp;(<a class="code" href="_client_server_8h.html#af7883388f6a285534cba3f39404124d4">logging</a>==<span class="keyword">true</span>))
<a name="l00332"></a>00332                 {
<a name="l00333"></a>00333                         <span class="comment">//printf(&quot;%&quot;PRINTF_64_BIT_MODIFIER&quot;u: %s client created; rem %i\n&quot;,(unsigned long long)time,sourceConnection-&gt;GetRakNetGUID().ToString(),facial_replicas.size());</span>
<a name="l00334"></a>00334                         <a class="code" href="_client_server_8h.html#a87a1f273fa8ad585520f9a5e5d071ec4">logfileHandler</a>.GetLocalTime(localtime);
<a name="l00335"></a>00335                         sprintf(logstr,<span class="stringliteral">&quot;C;%&quot;</span>PRINTF_64_BIT_MODIFIER<span class="stringliteral">&quot;u;%s;%s;0;%i&quot;</span>,(<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keywordtype">long</span>)time,localtime,sourceConnection-&gt;GetRakNetGUID().ToString(),<a class="code" href="_client_server_8h.html#a3ebf39ed2989b10581f8f5ef1b977b38">facial_replicas</a>.size());
<a name="l00336"></a>00336                         <a class="code" href="_client_server_8h.html#a87a1f273fa8ad585520f9a5e5d071ec4">logfileHandler</a>.WriteLog(logstr);
<a name="l00337"></a>00337                 }
<a name="l00338"></a>00338                 <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00339"></a>00339         }
<a name="l00340"></a>00340         <span class="keyword">virtual</span> <span class="keywordtype">void</span> SerializeDestruction(RakNet::BitStream *destructionBitstream, RakNet::Connection_RM3 *destinationConnection)       {
<a name="l00341"></a>00341                 <a class="code" href="class_beaming_user.html#af2ace89dbd788247407e6b4f454a4c2a">BeamingUser::SerializeDestruction</a>(destructionBitstream, destinationConnection);
<a name="l00342"></a>00342                 destructionBitstream-&gt;Write(GetName() + RakNet::RakString(facial_id) + RakNet::RakString(<span class="stringliteral">&quot; removed for guid &quot;</span>) + RakNet::RakString(this-&gt;GetCreatingSystemGUID().ToString()));
<a name="l00343"></a>00343         }
<a name="l00344"></a>00344         <span class="keyword">virtual</span> <span class="keywordtype">bool</span> DeserializeDestruction(RakNet::BitStream *destructionBitstream, RakNet::Connection_RM3 *sourceConnection) {
<a name="l00345"></a>00345                 <span class="keywordflow">if</span> (!<a class="code" href="class_beaming_user.html#a355093f433b903dcc86d63df13312c12">BeamingUser::DeserializeDestruction</a>(destructionBitstream, sourceConnection))
<a name="l00346"></a>00346                         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00347"></a>00347                 RakNetTimeMS time = RakNet::GetTime();
<a name="l00348"></a>00348                 PrintOutput(destructionBitstream);
<a name="l00349"></a>00349                 <a class="code" href="_client_server_8h.html#a3ebf39ed2989b10581f8f5ef1b977b38">facial_replicas</a>.erase(this-&gt;GetCreatingSystemGUID()); <span class="comment">//erase from map on client disconnection</span>
<a name="l00350"></a>00350                 <a class="code" href="_client_server_8h.html#aee6ed86d42821e392e49ae3ecb3f04b6">nodes_map</a>.erase(this-&gt;GetCreatingSystemGUID().ToString());
<a name="l00351"></a>00351                 <a class="code" href="_client_server_8h.html#a23ccb3d0e9aaae919d32876ed291503e">new_clients</a>.erase(this-&gt;GetCreatingSystemGUID()); <span class="comment">//deprecated</span>
<a name="l00352"></a>00352                 <span class="keywordflow">if</span> ((<a class="code" href="_client_server_8h.html#ad9b4d2b6bfe35238ad017f255ce6d0a1">topology</a>==<a class="code" href="_client_server_8h.html#a06fc87d81c62e9abb8790b6e5713c55ba67c96b24b23bcb408bae7626730a04b7">SERVER</a>)&amp;&amp;(<a class="code" href="_client_server_8h.html#af7883388f6a285534cba3f39404124d4">logging</a>==<span class="keyword">true</span>))
<a name="l00353"></a>00353                 {
<a name="l00354"></a>00354                         <span class="comment">//printf(&quot;%&quot;PRINTF_64_BIT_MODIFIER&quot;u: %s client deleted; rem %i\n&quot;,(unsigned long long)time,sourceConnection-&gt;GetRakNetGUID().ToString(),facial_replicas.size());</span>
<a name="l00355"></a>00355                         <a class="code" href="_client_server_8h.html#a87a1f273fa8ad585520f9a5e5d071ec4">logfileHandler</a>.GetLocalTime(localtime);
<a name="l00356"></a>00356                         sprintf(logstr,<span class="stringliteral">&quot;D;%&quot;</span>PRINTF_64_BIT_MODIFIER<span class="stringliteral">&quot;u;%s;%s;0;%i&quot;</span>,(<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keywordtype">long</span>)time,localtime,sourceConnection-&gt;GetRakNetGUID().ToString(),<a class="code" href="_client_server_8h.html#a3ebf39ed2989b10581f8f5ef1b977b38">facial_replicas</a>.size());
<a name="l00357"></a>00357                         <a class="code" href="_client_server_8h.html#a87a1f273fa8ad585520f9a5e5d071ec4">logfileHandler</a>.WriteLog(logstr);
<a name="l00358"></a>00358                 }
<a name="l00359"></a>00359                 <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00360"></a>00360         }
<a name="l00361"></a>00361         <span class="keyword">virtual</span> <span class="keywordtype">void</span> DeallocReplica(RakNet::Connection_RM3 *sourceConnection) {
<a name="l00362"></a>00362                 <span class="keyword">delete</span> <span class="keyword">this</span>;
<a name="l00363"></a>00363         }
<a name="l00364"></a>00364         <span class="keyword">virtual</span> RM3SerializationResult Serialize(SerializeParameters *serializeParameters)      {
<a name="l00365"></a>00365                 <a class="code" href="class_beaming_user.html#a5279ea44c4a41f6aa23b22a8da969168">BeamingUser::Serialize</a>(serializeParameters);
<a name="l00366"></a>00366                 RakNetTimeMS time = RakNet::GetTime();
<a name="l00367"></a>00367                 serializeParameters-&gt;outputBitstream[0].WriteAlignedBytes((<span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>*)&amp;blink,<span class="keyword">sizeof</span>(blink));
<a name="l00368"></a>00368                 serializeParameters-&gt;outputBitstream[0].WriteAlignedBytes((<span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>*)&amp;smile,<span class="keyword">sizeof</span>(smile));
<a name="l00369"></a>00369                 serializeParameters-&gt;outputBitstream[0].WriteAlignedBytes((<span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>*)&amp;frown,<span class="keyword">sizeof</span>(frown));
<a name="l00370"></a>00370                 serializeParameters-&gt;outputBitstream[0].WriteAlignedBytes((<span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>*)&amp;o,<span class="keyword">sizeof</span>(o));
<a name="l00371"></a>00371                 serializeParameters-&gt;outputBitstream[0].WriteAlignedBytes((<span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>*)&amp;e,<span class="keyword">sizeof</span>(e));
<a name="l00372"></a>00372                 serializeParameters-&gt;outputBitstream[0].WriteAlignedBytes((<span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>*)&amp;p,<span class="keyword">sizeof</span>(p));
<a name="l00373"></a>00373                 <span class="keywordflow">return</span> RM3SR_BROADCAST_IDENTICALLY;
<a name="l00374"></a>00374         }
<a name="l00375"></a>00375         <span class="keyword">virtual</span> <span class="keywordtype">void</span> Deserialize(RakNet::DeserializeParameters *deserializeParameters) {
<a name="l00376"></a>00376                 <a class="code" href="class_beaming_user.html#ac2ed95cffb4e6e9e8b0e0e4be824ca90">BeamingUser::Deserialize</a>(deserializeParameters);
<a name="l00377"></a>00377                 RakNetTimeMS time = RakNet::GetTime();
<a name="l00378"></a>00378                 deserializeParameters-&gt;serializationBitstream[0].ReadAlignedBytes((<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>*)&amp;blink,<span class="keyword">sizeof</span>(blink));
<a name="l00379"></a>00379                 deserializeParameters-&gt;serializationBitstream[0].ReadAlignedBytes((<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>*)&amp;smile,<span class="keyword">sizeof</span>(smile));
<a name="l00380"></a>00380                 deserializeParameters-&gt;serializationBitstream[0].ReadAlignedBytes((<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>*)&amp;frown,<span class="keyword">sizeof</span>(frown));
<a name="l00381"></a>00381                 deserializeParameters-&gt;serializationBitstream[0].ReadAlignedBytes((<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>*)&amp;o,<span class="keyword">sizeof</span>(o));
<a name="l00382"></a>00382                 deserializeParameters-&gt;serializationBitstream[0].ReadAlignedBytes((<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>*)&amp;e,<span class="keyword">sizeof</span>(e));
<a name="l00383"></a>00383                 deserializeParameters-&gt;serializationBitstream[0].ReadAlignedBytes((<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>*)&amp;p,<span class="keyword">sizeof</span>(p));
<a name="l00384"></a>00384                 <span class="comment">//printf(&quot;%&quot;PRINTF_64_BIT_MODIFIER&quot;u: %s %s %s %s %s - %d %.3f %.3f %.3f %.3f %.3f\n&quot;,(unsigned long long)time,clientname,this-&gt;GetCreatingSystemGUID().ToString(),clientType,clientConfig,facial_id,blink,smile,frown,o,e,p);</span>
<a name="l00385"></a>00385                 <span class="keywordflow">if</span> ((<a class="code" href="_client_server_8h.html#ad9b4d2b6bfe35238ad017f255ce6d0a1">topology</a>==<a class="code" href="_client_server_8h.html#a06fc87d81c62e9abb8790b6e5713c55ba67c96b24b23bcb408bae7626730a04b7">SERVER</a>)&amp;&amp;(<a class="code" href="_client_server_8h.html#af7883388f6a285534cba3f39404124d4">logging</a>==<span class="keyword">true</span>))<span class="comment">//logging on server</span>
<a name="l00386"></a>00386                 {
<a name="l00387"></a>00387                                 <a class="code" href="_client_server_8h.html#a87a1f273fa8ad585520f9a5e5d071ec4">logfileHandler</a>.GetLocalTime(localtime);
<a name="l00388"></a>00388                                 sprintf(logstr,<span class="stringliteral">&quot;M;%&quot;</span>PRINTF_64_BIT_MODIFIER<span class="stringliteral">&quot;u;%s;%s;%s;%s;%s;%s;%d;%.3f;%.3f;%.3f;%.3f;%.3f&quot;</span>,(<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keywordtype">long</span>)time,localtime,clientname,this-&gt;GetCreatingSystemGUID().ToString(),clientType,clientConfig,facial_id,blink,smile,frown,o,e,p);
<a name="l00389"></a>00389                                 <a class="code" href="_client_server_8h.html#a87a1f273fa8ad585520f9a5e5d071ec4">logfileHandler</a>.WriteLog(logstr); <span class="comment">//writes additional lines</span>
<a name="l00390"></a>00390                 }
<a name="l00391"></a>00391         }
<a name="l00392"></a>00392         <span class="keyword">virtual</span> <span class="keywordtype">void</span> SerializeConstructionRequestAccepted(RakNet::BitStream *serializationBitstream, RakNet::Connection_RM3 *requestingConnection)      {
<a name="l00393"></a>00393                 serializationBitstream-&gt;Write(GetName() + RakNet::RakString(facial_id) + RakNet::RakString(<span class="stringliteral">&quot; created on server&quot;</span>));
<a name="l00394"></a>00394         }
<a name="l00395"></a>00395         <span class="keyword">virtual</span> <span class="keywordtype">void</span> DeserializeConstructionRequestAccepted(RakNet::BitStream *serializationBitstream, RakNet::Connection_RM3 *acceptingConnection) {
<a name="l00396"></a>00396                 PrintOutput(serializationBitstream);
<a name="l00397"></a>00397         }
<a name="l00398"></a>00398         <span class="keyword">virtual</span> <span class="keywordtype">void</span> SerializeConstructionRequestRejected(RakNet::BitStream *serializationBitstream, RakNet::Connection_RM3 *requestingConnection)      {
<a name="l00399"></a>00399                 serializationBitstream-&gt;Write(GetName() + RakNet::RakString(facial_id) + RakNet::RakString(<span class="stringliteral">&quot; not created on server&quot;</span>));
<a name="l00400"></a>00400         }
<a name="l00401"></a>00401         <span class="keyword">virtual</span> <span class="keywordtype">void</span> DeserializeConstructionRequestRejected(RakNet::BitStream *serializationBitstream, RakNet::Connection_RM3 *rejectingConnection) {
<a name="l00402"></a>00402                 PrintOutput(serializationBitstream);
<a name="l00403"></a>00403         }
<a name="l00404"></a>00404 
<a name="l00405"></a>00405 <span class="keyword">public</span>:
<a name="l00406"></a><a class="code" href="class_beaming_facial_replica.html#a2f1158c65391390979a2d7254e8e9df0">00406</a>         <span class="keywordtype">char</span> facial_id[128];
<a name="l00407"></a><a class="code" href="class_beaming_facial_replica.html#aa9b9351b08b64201d8eb84fe74007cc1">00407</a>         <span class="keywordtype">bool</span> <a class="code" href="class_beaming_facial_replica.html#aa9b9351b08b64201d8eb84fe74007cc1">blink</a>;
<a name="l00408"></a><a class="code" href="class_beaming_facial_replica.html#a48930b7271bd40638819fdb754576ebd">00408</a>         <span class="keywordtype">float</span> <a class="code" href="class_beaming_facial_replica.html#a48930b7271bd40638819fdb754576ebd">smile</a>;
<a name="l00409"></a><a class="code" href="class_beaming_facial_replica.html#a4a286661b302e0f6747ffe71e620bb90">00409</a>         <span class="keywordtype">float</span> <a class="code" href="class_beaming_facial_replica.html#a4a286661b302e0f6747ffe71e620bb90">frown</a>;
<a name="l00410"></a><a class="code" href="class_beaming_facial_replica.html#a73b5a9bf975bc29f15541b7f9fe65479">00410</a>         <span class="keywordtype">float</span> <a class="code" href="class_beaming_facial_replica.html#a73b5a9bf975bc29f15541b7f9fe65479">o</a>;
<a name="l00411"></a><a class="code" href="class_beaming_facial_replica.html#a9d0ab8742e12f7083649d86a6185fe19">00411</a>         <span class="keywordtype">float</span> <a class="code" href="class_beaming_facial_replica.html#a9d0ab8742e12f7083649d86a6185fe19">e</a>;
<a name="l00412"></a><a class="code" href="class_beaming_facial_replica.html#a24b4df67650f0040e5e2aca995e04abe">00412</a>         <span class="keywordtype">float</span> <a class="code" href="class_beaming_facial_replica.html#a24b4df67650f0040e5e2aca995e04abe">p</a>;
<a name="l00413"></a><a class="code" href="class_beaming_facial_replica.html#aceab6be5d6f69c2453bca7db38666d00">00413</a>         <a class="code" href="structnode__info.html">node_info</a> *<a class="code" href="class_beaming_facial_replica.html#aceab6be5d6f69c2453bca7db38666d00">thisnode</a>;
<a name="l00414"></a>00414 
<a name="l00415"></a><a class="code" href="class_beaming_facial_replica.html#a50c01baaf7dd8c31797c2c41c4837c6d">00415</a>         <a class="code" href="class_beaming_facial_replica.html#a50c01baaf7dd8c31797c2c41c4837c6d">BeamingFacialReplica</a>() { }
<a name="l00416"></a>00416 
<a name="l00417"></a><a class="code" href="class_beaming_facial_replica.html#a700597016f46ca76058ab6f8209f3f03">00417</a>         <span class="keyword">virtual</span> <a class="code" href="class_beaming_facial_replica.html#a700597016f46ca76058ab6f8209f3f03">~BeamingFacialReplica</a>() { }
<a name="l00418"></a>00418 };
<a name="l00419"></a>00419 
<a name="l00420"></a>00420 
<a name="l00422"></a><a class="code" href="class_beaming_emotion_replica.html">00422</a> <span class="keyword">class </span><a class="code" href="class_beaming_emotion_replica.html" title="Emotion Replica - Affective State.">BeamingEmotionReplica</a> : <span class="keyword">public</span> <a class="code" href="class_beaming_user.html" title="User Replica.">BeamingUser</a>
<a name="l00423"></a>00423 {
<a name="l00424"></a>00424         <span class="keyword">virtual</span> RakNet::RakString GetName(<span class="keywordtype">void</span>)<span class="keyword"> const </span>{<span class="keywordflow">return</span> RakNet::RakString(<span class="stringliteral">&quot;EMOTION&quot;</span>);}
<a name="l00425"></a>00425         <span class="keyword">virtual</span> <span class="keywordtype">void</span> WriteAllocationID(RakNet::BitStream *allocationIdBitstream)<span class="keyword"> const </span>{
<a name="l00426"></a>00426                 allocationIdBitstream-&gt;Write(GetName());
<a name="l00427"></a>00427         }
<a name="l00428"></a>00428         <span class="keyword">virtual</span> <span class="keywordtype">void</span> SerializeConstruction(RakNet::BitStream *constructionBitstream, RakNet::Connection_RM3 *destinationConnection)     {
<a name="l00429"></a>00429                 <a class="code" href="class_beaming_user.html#af8ce956d94ab68f510432a82cc7b9f99">BeamingUser::SerializeConstruction</a>(constructionBitstream, destinationConnection);
<a name="l00430"></a>00430                 constructionBitstream-&gt;Write(GetName() + RakNet::RakString(emotion_id) + RakNet::RakString(<span class="stringliteral">&quot; created for guid &quot;</span>) + RakNet::RakString(this-&gt;GetCreatingSystemGUID().ToString()));
<a name="l00431"></a>00431                 constructionBitstream-&gt;Write(emotion_id);
<a name="l00432"></a>00432         }
<a name="l00433"></a>00433         <span class="keyword">virtual</span> <span class="keywordtype">bool</span> DeserializeConstruction(RakNet::BitStream *constructionBitstream, RakNet::Connection_RM3 *sourceConnection) {
<a name="l00434"></a>00434                 <span class="keywordflow">if</span> (!<a class="code" href="class_beaming_user.html#a39ecc4e47f7bb41c9a5fac85fe491da2">BeamingUser::DeserializeConstruction</a>(constructionBitstream, sourceConnection))
<a name="l00435"></a>00435                         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00436"></a>00436                 RakNetTimeMS time = RakNet::GetTime();
<a name="l00437"></a>00437                 PrintOutput(constructionBitstream);
<a name="l00438"></a>00438                 constructionBitstream-&gt;Read(emotion_id);
<a name="l00439"></a>00439                 printf(<span class="stringliteral">&quot;Client: %s, Type: %s, Config: %s, Node: %s\n&quot;</span>,clientname,clientType,clientConfig,emotion_id);
<a name="l00440"></a>00440                 <a class="code" href="_client_server_8h.html#a09e5b19ea35b0333e0b25fbe166acdfc">emotion_replicas</a>[this-&gt;GetCreatingSystemGUID()].push_back(<span class="keyword">this</span>); <span class="comment">//create within map on new client connection</span>
<a name="l00441"></a>00441                 thisnode = <span class="keyword">new</span> <a class="code" href="structnode__info.html">node_info</a>;
<a name="l00442"></a>00442                 thisnode-&gt;<a class="code" href="structnode__info.html#a988e1ab3a75015487c4ec4437252a7c7">name</a>=emotion_id;
<a name="l00443"></a>00443                 thisnode-&gt;type=GetName().C_String();
<a name="l00444"></a>00444                 thisnode-&gt;peername = clientname;
<a name="l00445"></a>00445                 thisnode-&gt;peertype = clientType;
<a name="l00446"></a>00446                 thisnode-&gt;peercfg = clientConfig;
<a name="l00447"></a>00447                 thisnode-&gt;ipport = ip_port;
<a name="l00448"></a>00448                 <a class="code" href="_client_server_8h.html#aee6ed86d42821e392e49ae3ecb3f04b6">nodes_map</a>[this-&gt;GetCreatingSystemGUID().ToString()].push_back(thisnode);
<a name="l00449"></a>00449                 <span class="keywordflow">if</span> ((<a class="code" href="_client_server_8h.html#ad9b4d2b6bfe35238ad017f255ce6d0a1">topology</a>==<a class="code" href="_client_server_8h.html#a06fc87d81c62e9abb8790b6e5713c55ba67c96b24b23bcb408bae7626730a04b7">SERVER</a>)&amp;&amp;(<a class="code" href="_client_server_8h.html#af7883388f6a285534cba3f39404124d4">logging</a>==<span class="keyword">true</span>))
<a name="l00450"></a>00450                 {
<a name="l00451"></a>00451                         <span class="comment">//printf(&quot;%&quot;PRINTF_64_BIT_MODIFIER&quot;u: %s client created; rem %i\n&quot;,(unsigned long long)time,sourceConnection-&gt;GetRakNetGUID().ToString(),emotion_replicas.size());</span>
<a name="l00452"></a>00452                         <a class="code" href="_client_server_8h.html#a87a1f273fa8ad585520f9a5e5d071ec4">logfileHandler</a>.GetLocalTime(localtime);
<a name="l00453"></a>00453                         sprintf(logstr,<span class="stringliteral">&quot;C;%&quot;</span>PRINTF_64_BIT_MODIFIER<span class="stringliteral">&quot;u;%s;%s;0;%i&quot;</span>,(<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keywordtype">long</span>)time,localtime,sourceConnection-&gt;GetRakNetGUID().ToString(),<a class="code" href="_client_server_8h.html#a09e5b19ea35b0333e0b25fbe166acdfc">emotion_replicas</a>.size());
<a name="l00454"></a>00454                         <a class="code" href="_client_server_8h.html#a87a1f273fa8ad585520f9a5e5d071ec4">logfileHandler</a>.WriteLog(logstr);
<a name="l00455"></a>00455                 }
<a name="l00456"></a>00456                 <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00457"></a>00457         }
<a name="l00458"></a>00458         <span class="keyword">virtual</span> <span class="keywordtype">void</span> SerializeDestruction(RakNet::BitStream *destructionBitstream, RakNet::Connection_RM3 *destinationConnection)       {
<a name="l00459"></a>00459                 <a class="code" href="class_beaming_user.html#af2ace89dbd788247407e6b4f454a4c2a">BeamingUser::SerializeDestruction</a>(destructionBitstream, destinationConnection);
<a name="l00460"></a>00460                 destructionBitstream-&gt;Write(GetName() + RakNet::RakString(emotion_id) + RakNet::RakString(<span class="stringliteral">&quot; removed for guid &quot;</span>) + RakNet::RakString(this-&gt;GetCreatingSystemGUID().ToString()));
<a name="l00461"></a>00461         }
<a name="l00462"></a>00462         <span class="keyword">virtual</span> <span class="keywordtype">bool</span> DeserializeDestruction(RakNet::BitStream *destructionBitstream, RakNet::Connection_RM3 *sourceConnection) {
<a name="l00463"></a>00463                 <span class="keywordflow">if</span> (!<a class="code" href="class_beaming_user.html#a355093f433b903dcc86d63df13312c12">BeamingUser::DeserializeDestruction</a>(destructionBitstream, sourceConnection))
<a name="l00464"></a>00464                         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00465"></a>00465                 RakNetTimeMS time = RakNet::GetTime();
<a name="l00466"></a>00466                 PrintOutput(destructionBitstream);
<a name="l00467"></a>00467                 <a class="code" href="_client_server_8h.html#a09e5b19ea35b0333e0b25fbe166acdfc">emotion_replicas</a>.erase(this-&gt;GetCreatingSystemGUID()); <span class="comment">//erase from map on client disconnection</span>
<a name="l00468"></a>00468                 <a class="code" href="_client_server_8h.html#aee6ed86d42821e392e49ae3ecb3f04b6">nodes_map</a>.erase(this-&gt;GetCreatingSystemGUID().ToString());
<a name="l00469"></a>00469                 <a class="code" href="_client_server_8h.html#a23ccb3d0e9aaae919d32876ed291503e">new_clients</a>.erase(this-&gt;GetCreatingSystemGUID()); <span class="comment">//deprecated</span>
<a name="l00470"></a>00470                 <span class="keywordflow">if</span> ((<a class="code" href="_client_server_8h.html#ad9b4d2b6bfe35238ad017f255ce6d0a1">topology</a>==<a class="code" href="_client_server_8h.html#a06fc87d81c62e9abb8790b6e5713c55ba67c96b24b23bcb408bae7626730a04b7">SERVER</a>)&amp;&amp;(<a class="code" href="_client_server_8h.html#af7883388f6a285534cba3f39404124d4">logging</a>==<span class="keyword">true</span>))
<a name="l00471"></a>00471                 {
<a name="l00472"></a>00472                         <span class="comment">//printf(&quot;%&quot;PRINTF_64_BIT_MODIFIER&quot;u: %s client deleted; rem %i\n&quot;,(unsigned long long)time,sourceConnection-&gt;GetRakNetGUID().ToString(),emotion_replicas.size());</span>
<a name="l00473"></a>00473                         <a class="code" href="_client_server_8h.html#a87a1f273fa8ad585520f9a5e5d071ec4">logfileHandler</a>.GetLocalTime(localtime);
<a name="l00474"></a>00474                         sprintf(logstr,<span class="stringliteral">&quot;D;%&quot;</span>PRINTF_64_BIT_MODIFIER<span class="stringliteral">&quot;u;%s;%s;0;%i&quot;</span>,(<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keywordtype">long</span>)time,localtime,sourceConnection-&gt;GetRakNetGUID().ToString(),<a class="code" href="_client_server_8h.html#a09e5b19ea35b0333e0b25fbe166acdfc">emotion_replicas</a>.size());
<a name="l00475"></a>00475                         <a class="code" href="_client_server_8h.html#a87a1f273fa8ad585520f9a5e5d071ec4">logfileHandler</a>.WriteLog(logstr);
<a name="l00476"></a>00476                 }
<a name="l00477"></a>00477                 <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00478"></a>00478         }
<a name="l00479"></a>00479         <span class="keyword">virtual</span> <span class="keywordtype">void</span> DeallocReplica(RakNet::Connection_RM3 *sourceConnection) {
<a name="l00480"></a>00480                 <span class="keyword">delete</span> <span class="keyword">this</span>;
<a name="l00481"></a>00481         }
<a name="l00482"></a>00482         <span class="keyword">virtual</span> RM3SerializationResult Serialize(SerializeParameters *serializeParameters)      {
<a name="l00483"></a>00483                 <a class="code" href="class_beaming_user.html#a5279ea44c4a41f6aa23b22a8da969168">BeamingUser::Serialize</a>(serializeParameters);
<a name="l00484"></a>00484                 RakNetTimeMS time = RakNet::GetTime();
<a name="l00485"></a>00485                 serializeParameters-&gt;outputBitstream[0].WriteAlignedBytes((<span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>*)&amp;valence,<span class="keyword">sizeof</span>(valence));
<a name="l00486"></a>00486                 serializeParameters-&gt;outputBitstream[0].WriteAlignedBytes((<span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>*)&amp;arousal,<span class="keyword">sizeof</span>(arousal));
<a name="l00487"></a>00487                 serializeParameters-&gt;outputBitstream[0].WriteAlignedBytes((<span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>*)&amp;misc,<span class="keyword">sizeof</span>(misc));
<a name="l00488"></a>00488                 <span class="keywordflow">return</span> RM3SR_BROADCAST_IDENTICALLY;
<a name="l00489"></a>00489         }
<a name="l00490"></a>00490         <span class="keyword">virtual</span> <span class="keywordtype">void</span> Deserialize(RakNet::DeserializeParameters *deserializeParameters) {
<a name="l00491"></a>00491                 <a class="code" href="class_beaming_user.html#ac2ed95cffb4e6e9e8b0e0e4be824ca90">BeamingUser::Deserialize</a>(deserializeParameters);
<a name="l00492"></a>00492                 RakNetTimeMS time = RakNet::GetTime();
<a name="l00493"></a>00493                 deserializeParameters-&gt;serializationBitstream[0].ReadAlignedBytes((<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>*)&amp;valence,<span class="keyword">sizeof</span>(valence));
<a name="l00494"></a>00494                 deserializeParameters-&gt;serializationBitstream[0].ReadAlignedBytes((<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>*)&amp;arousal,<span class="keyword">sizeof</span>(arousal));
<a name="l00495"></a>00495                 deserializeParameters-&gt;serializationBitstream[0].ReadAlignedBytes((<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>*)&amp;misc,<span class="keyword">sizeof</span>(misc));
<a name="l00496"></a>00496                 <span class="comment">//printf(&quot;%&quot;PRINTF_64_BIT_MODIFIER&quot;u: %s %s %s %s %s - %f %f %f\n&quot;,(unsigned long long)time,clientname,this-&gt;GetCreatingSystemGUID().ToString(),clientType,clientConfig,emotion_id,valence,arousal,misc);</span>
<a name="l00497"></a>00497                 <span class="keywordflow">if</span> ((<a class="code" href="_client_server_8h.html#ad9b4d2b6bfe35238ad017f255ce6d0a1">topology</a>==<a class="code" href="_client_server_8h.html#a06fc87d81c62e9abb8790b6e5713c55ba67c96b24b23bcb408bae7626730a04b7">SERVER</a>)&amp;&amp;(<a class="code" href="_client_server_8h.html#af7883388f6a285534cba3f39404124d4">logging</a>==<span class="keyword">true</span>))<span class="comment">//logging on server</span>
<a name="l00498"></a>00498                 {
<a name="l00499"></a>00499                                 <a class="code" href="_client_server_8h.html#a87a1f273fa8ad585520f9a5e5d071ec4">logfileHandler</a>.GetLocalTime(localtime);
<a name="l00500"></a>00500                                 sprintf(logstr,<span class="stringliteral">&quot;M;%&quot;</span>PRINTF_64_BIT_MODIFIER<span class="stringliteral">&quot;u;%s;%s;%s;%s;%s;%s;%f;%f;%f&quot;</span>,(<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keywordtype">long</span>)time,localtime,clientname,this-&gt;GetCreatingSystemGUID().ToString(),clientType,clientConfig,emotion_id,valence,arousal,misc);
<a name="l00501"></a>00501                                 <a class="code" href="_client_server_8h.html#a87a1f273fa8ad585520f9a5e5d071ec4">logfileHandler</a>.WriteLog(logstr); <span class="comment">//writes additional lines</span>
<a name="l00502"></a>00502                 }
<a name="l00503"></a>00503         }
<a name="l00504"></a>00504         <span class="keyword">virtual</span> <span class="keywordtype">void</span> SerializeConstructionRequestAccepted(RakNet::BitStream *serializationBitstream, RakNet::Connection_RM3 *requestingConnection)      {
<a name="l00505"></a>00505                 serializationBitstream-&gt;Write(GetName() + RakNet::RakString(emotion_id) + RakNet::RakString(<span class="stringliteral">&quot; created on server&quot;</span>));
<a name="l00506"></a>00506         }
<a name="l00507"></a>00507         <span class="keyword">virtual</span> <span class="keywordtype">void</span> DeserializeConstructionRequestAccepted(RakNet::BitStream *serializationBitstream, RakNet::Connection_RM3 *acceptingConnection) {
<a name="l00508"></a>00508                 PrintOutput(serializationBitstream);
<a name="l00509"></a>00509         }
<a name="l00510"></a>00510         <span class="keyword">virtual</span> <span class="keywordtype">void</span> SerializeConstructionRequestRejected(RakNet::BitStream *serializationBitstream, RakNet::Connection_RM3 *requestingConnection)      {
<a name="l00511"></a>00511                 serializationBitstream-&gt;Write(GetName() + RakNet::RakString(emotion_id) + RakNet::RakString(<span class="stringliteral">&quot; not created on server&quot;</span>));
<a name="l00512"></a>00512         }
<a name="l00513"></a>00513         <span class="keyword">virtual</span> <span class="keywordtype">void</span> DeserializeConstructionRequestRejected(RakNet::BitStream *serializationBitstream, RakNet::Connection_RM3 *rejectingConnection) {
<a name="l00514"></a>00514                 PrintOutput(serializationBitstream);
<a name="l00515"></a>00515         }
<a name="l00516"></a>00516 
<a name="l00517"></a>00517 <span class="keyword">public</span>:
<a name="l00518"></a><a class="code" href="class_beaming_emotion_replica.html#affabf8504dd20a90c3842f1c55f6b18a">00518</a>         <span class="keywordtype">char</span> emotion_id[128];
<a name="l00519"></a><a class="code" href="class_beaming_emotion_replica.html#a0f232665df87fe6ec21b52c846a1b193">00519</a>         <span class="keywordtype">double</span> <a class="code" href="class_beaming_emotion_replica.html#a0f232665df87fe6ec21b52c846a1b193">valence</a>;
<a name="l00520"></a><a class="code" href="class_beaming_emotion_replica.html#a7b88601e75327449aae0701b07433d9f">00520</a>         <span class="keywordtype">double</span> <a class="code" href="class_beaming_emotion_replica.html#a7b88601e75327449aae0701b07433d9f">arousal</a>;
<a name="l00521"></a><a class="code" href="class_beaming_emotion_replica.html#ae596aa505b29b8ea97647d085c6cff96">00521</a>         <span class="keywordtype">double</span> <a class="code" href="class_beaming_emotion_replica.html#ae596aa505b29b8ea97647d085c6cff96">misc</a>;
<a name="l00522"></a><a class="code" href="class_beaming_emotion_replica.html#af7576fedcf6f317fd2c22b7d771ccca9">00522</a>         <a class="code" href="structnode__info.html">node_info</a> *<a class="code" href="class_beaming_emotion_replica.html#af7576fedcf6f317fd2c22b7d771ccca9">thisnode</a>;
<a name="l00523"></a>00523 
<a name="l00524"></a><a class="code" href="class_beaming_emotion_replica.html#a6b20a4ef4b2b657c199bbb3cb46a047a">00524</a>         <a class="code" href="class_beaming_emotion_replica.html#a6b20a4ef4b2b657c199bbb3cb46a047a">BeamingEmotionReplica</a>() { }
<a name="l00525"></a>00525 
<a name="l00526"></a><a class="code" href="class_beaming_emotion_replica.html#a58ddcfe2ba8ddf6c82fbf0f1d1618987">00526</a>         <span class="keyword">virtual</span> <a class="code" href="class_beaming_emotion_replica.html#a58ddcfe2ba8ddf6c82fbf0f1d1618987">~BeamingEmotionReplica</a>() { }
<a name="l00527"></a>00527 };
<a name="l00528"></a>00528 
<a name="l00529"></a>00529 
<a name="l00531"></a><a class="code" href="class_beaming_tactile_replica.html">00531</a> <span class="keyword">class </span><a class="code" href="class_beaming_tactile_replica.html" title="Tactile Replica.">BeamingTactileReplica</a> : <span class="keyword">public</span> <a class="code" href="class_beaming_user.html" title="User Replica.">BeamingUser</a>
<a name="l00532"></a>00532 {
<a name="l00533"></a>00533         <span class="keyword">virtual</span> RakNet::RakString GetName(<span class="keywordtype">void</span>)<span class="keyword"> const </span>{<span class="keywordflow">return</span> RakNet::RakString(<span class="stringliteral">&quot;TACTILE&quot;</span>);}
<a name="l00534"></a>00534         <span class="keyword">virtual</span> <span class="keywordtype">void</span> WriteAllocationID(RakNet::BitStream *allocationIdBitstream)<span class="keyword"> const </span>{
<a name="l00535"></a>00535                 allocationIdBitstream-&gt;Write(GetName());
<a name="l00536"></a>00536         }
<a name="l00537"></a>00537         <span class="keyword">virtual</span> <span class="keywordtype">void</span> SerializeConstruction(RakNet::BitStream *constructionBitstream, RakNet::Connection_RM3 *destinationConnection)     {
<a name="l00538"></a>00538                 <a class="code" href="class_beaming_user.html#af8ce956d94ab68f510432a82cc7b9f99">BeamingUser::SerializeConstruction</a>(constructionBitstream, destinationConnection);
<a name="l00539"></a>00539                 constructionBitstream-&gt;Write(GetName() + RakNet::RakString(tactile_id) + RakNet::RakString(<span class="stringliteral">&quot; created for guid &quot;</span>) + RakNet::RakString(this-&gt;GetCreatingSystemGUID().ToString()));
<a name="l00540"></a>00540                 constructionBitstream-&gt;Write(tactile_id);
<a name="l00541"></a>00541         }
<a name="l00542"></a>00542         <span class="keyword">virtual</span> <span class="keywordtype">bool</span> DeserializeConstruction(RakNet::BitStream *constructionBitstream, RakNet::Connection_RM3 *sourceConnection) {
<a name="l00543"></a>00543                 <span class="keywordflow">if</span> (!<a class="code" href="class_beaming_user.html#a39ecc4e47f7bb41c9a5fac85fe491da2">BeamingUser::DeserializeConstruction</a>(constructionBitstream, sourceConnection))
<a name="l00544"></a>00544                         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00545"></a>00545                 RakNetTimeMS time = RakNet::GetTime();
<a name="l00546"></a>00546                 PrintOutput(constructionBitstream);
<a name="l00547"></a>00547                 constructionBitstream-&gt;Read(tactile_id);
<a name="l00548"></a>00548                 printf(<span class="stringliteral">&quot;Client: %s, Type: %s, Config: %s, Node: %s\n&quot;</span>,clientname,clientType,clientConfig,tactile_id);
<a name="l00549"></a>00549                 <a class="code" href="_client_server_8h.html#a6822ba84ee75da64dc977e6bc3646328">tactile_replicas</a>[this-&gt;GetCreatingSystemGUID()].push_back(<span class="keyword">this</span>); <span class="comment">//create within map on new client connection</span>
<a name="l00550"></a>00550                 thisnode = <span class="keyword">new</span> <a class="code" href="structnode__info.html">node_info</a>;
<a name="l00551"></a>00551                 thisnode-&gt;<a class="code" href="structnode__info.html#a988e1ab3a75015487c4ec4437252a7c7">name</a>=tactile_id;
<a name="l00552"></a>00552                 thisnode-&gt;type=GetName().C_String();
<a name="l00553"></a>00553                 thisnode-&gt;peername = clientname;
<a name="l00554"></a>00554                 thisnode-&gt;peertype = clientType;
<a name="l00555"></a>00555                 thisnode-&gt;peercfg = clientConfig;
<a name="l00556"></a>00556                 thisnode-&gt;ipport = ip_port;
<a name="l00557"></a>00557                 <a class="code" href="_client_server_8h.html#aee6ed86d42821e392e49ae3ecb3f04b6">nodes_map</a>[this-&gt;GetCreatingSystemGUID().ToString()].push_back(thisnode);
<a name="l00558"></a>00558                 <span class="keywordflow">if</span> ((<a class="code" href="_client_server_8h.html#ad9b4d2b6bfe35238ad017f255ce6d0a1">topology</a>==<a class="code" href="_client_server_8h.html#a06fc87d81c62e9abb8790b6e5713c55ba67c96b24b23bcb408bae7626730a04b7">SERVER</a>)&amp;&amp;(<a class="code" href="_client_server_8h.html#af7883388f6a285534cba3f39404124d4">logging</a>==<span class="keyword">true</span>))
<a name="l00559"></a>00559                 {
<a name="l00560"></a>00560                         <span class="comment">//printf(&quot;%&quot;PRINTF_64_BIT_MODIFIER&quot;u: %s client created; rem %i\n&quot;,(unsigned long long)time,sourceConnection-&gt;GetRakNetGUID().ToString(),tactile_replicas.size());</span>
<a name="l00561"></a>00561                         <a class="code" href="_client_server_8h.html#a87a1f273fa8ad585520f9a5e5d071ec4">logfileHandler</a>.GetLocalTime(localtime);
<a name="l00562"></a>00562                         sprintf(logstr,<span class="stringliteral">&quot;C;%&quot;</span>PRINTF_64_BIT_MODIFIER<span class="stringliteral">&quot;u;%s;%s;0;%i&quot;</span>,(<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keywordtype">long</span>)time,localtime,sourceConnection-&gt;GetRakNetGUID().ToString(),<a class="code" href="_client_server_8h.html#a6822ba84ee75da64dc977e6bc3646328">tactile_replicas</a>.size());
<a name="l00563"></a>00563                         <a class="code" href="_client_server_8h.html#a87a1f273fa8ad585520f9a5e5d071ec4">logfileHandler</a>.WriteLog(logstr);
<a name="l00564"></a>00564                 }
<a name="l00565"></a>00565                 <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00566"></a>00566         }
<a name="l00567"></a>00567         <span class="keyword">virtual</span> <span class="keywordtype">void</span> SerializeDestruction(RakNet::BitStream *destructionBitstream, RakNet::Connection_RM3 *destinationConnection)       {
<a name="l00568"></a>00568                 <a class="code" href="class_beaming_user.html#af2ace89dbd788247407e6b4f454a4c2a">BeamingUser::SerializeDestruction</a>(destructionBitstream, destinationConnection);
<a name="l00569"></a>00569                 destructionBitstream-&gt;Write(GetName() + RakNet::RakString(tactile_id) + RakNet::RakString(<span class="stringliteral">&quot; removed for guid &quot;</span>) + RakNet::RakString(this-&gt;GetCreatingSystemGUID().ToString()));
<a name="l00570"></a>00570         }
<a name="l00571"></a>00571         <span class="keyword">virtual</span> <span class="keywordtype">bool</span> DeserializeDestruction(RakNet::BitStream *destructionBitstream, RakNet::Connection_RM3 *sourceConnection) {
<a name="l00572"></a>00572                 <span class="keywordflow">if</span> (!<a class="code" href="class_beaming_user.html#a355093f433b903dcc86d63df13312c12">BeamingUser::DeserializeDestruction</a>(destructionBitstream, sourceConnection))
<a name="l00573"></a>00573                         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00574"></a>00574                 RakNetTimeMS time = RakNet::GetTime();
<a name="l00575"></a>00575                 PrintOutput(destructionBitstream);
<a name="l00576"></a>00576                 <a class="code" href="_client_server_8h.html#a6822ba84ee75da64dc977e6bc3646328">tactile_replicas</a>.erase(this-&gt;GetCreatingSystemGUID()); <span class="comment">//erase from map on client disconnection</span>
<a name="l00577"></a>00577                 <a class="code" href="_client_server_8h.html#aee6ed86d42821e392e49ae3ecb3f04b6">nodes_map</a>.erase(this-&gt;GetCreatingSystemGUID().ToString());
<a name="l00578"></a>00578                 <a class="code" href="_client_server_8h.html#a23ccb3d0e9aaae919d32876ed291503e">new_clients</a>.erase(this-&gt;GetCreatingSystemGUID()); <span class="comment">//deprecated</span>
<a name="l00579"></a>00579                 <span class="keywordflow">if</span> ((<a class="code" href="_client_server_8h.html#ad9b4d2b6bfe35238ad017f255ce6d0a1">topology</a>==<a class="code" href="_client_server_8h.html#a06fc87d81c62e9abb8790b6e5713c55ba67c96b24b23bcb408bae7626730a04b7">SERVER</a>)&amp;&amp;(<a class="code" href="_client_server_8h.html#af7883388f6a285534cba3f39404124d4">logging</a>==<span class="keyword">true</span>))
<a name="l00580"></a>00580                 {
<a name="l00581"></a>00581                         <span class="comment">//printf(&quot;%&quot;PRINTF_64_BIT_MODIFIER&quot;u: %s client deleted; rem %i\n&quot;,(unsigned long long)time,sourceConnection-&gt;GetRakNetGUID().ToString(),tactile_replicas.size());</span>
<a name="l00582"></a>00582                         <a class="code" href="_client_server_8h.html#a87a1f273fa8ad585520f9a5e5d071ec4">logfileHandler</a>.GetLocalTime(localtime);
<a name="l00583"></a>00583                         sprintf(logstr,<span class="stringliteral">&quot;D;%&quot;</span>PRINTF_64_BIT_MODIFIER<span class="stringliteral">&quot;u;%s;%s;0;%i&quot;</span>,(<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keywordtype">long</span>)time,localtime,sourceConnection-&gt;GetRakNetGUID().ToString(),<a class="code" href="_client_server_8h.html#a6822ba84ee75da64dc977e6bc3646328">tactile_replicas</a>.size());
<a name="l00584"></a>00584                         <a class="code" href="_client_server_8h.html#a87a1f273fa8ad585520f9a5e5d071ec4">logfileHandler</a>.WriteLog(logstr);
<a name="l00585"></a>00585                 }
<a name="l00586"></a>00586                 <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00587"></a>00587         }
<a name="l00588"></a>00588         <span class="keyword">virtual</span> <span class="keywordtype">void</span> DeallocReplica(RakNet::Connection_RM3 *sourceConnection) {
<a name="l00589"></a>00589                 <span class="keyword">delete</span> <span class="keyword">this</span>;
<a name="l00590"></a>00590         }
<a name="l00591"></a>00591         <span class="keyword">virtual</span> RM3SerializationResult Serialize(SerializeParameters *serializeParameters)      {
<a name="l00592"></a>00592                 <a class="code" href="class_beaming_user.html#a5279ea44c4a41f6aa23b22a8da969168">BeamingUser::Serialize</a>(serializeParameters);
<a name="l00593"></a>00593                 RakNetTimeMS time = RakNet::GetTime();
<a name="l00594"></a>00594                 serializeParameters-&gt;outputBitstream[0].WriteAlignedBytes((<span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>*)&amp;duration,<span class="keyword">sizeof</span>(duration));
<a name="l00595"></a>00595                 serializeParameters-&gt;outputBitstream[0].WriteAlignedBytes((<span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>*)&amp;intensity,<span class="keyword">sizeof</span>(intensity));
<a name="l00596"></a>00596                 serializeParameters-&gt;outputBitstream[0].WriteAlignedBytes((<span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>*)&amp;temperature,<span class="keyword">sizeof</span>(temperature));
<a name="l00597"></a>00597                 <span class="keywordflow">return</span> RM3SR_BROADCAST_IDENTICALLY;
<a name="l00598"></a>00598         }
<a name="l00599"></a>00599         <span class="keyword">virtual</span> <span class="keywordtype">void</span> Deserialize(RakNet::DeserializeParameters *deserializeParameters) {
<a name="l00600"></a>00600                 <a class="code" href="class_beaming_user.html#ac2ed95cffb4e6e9e8b0e0e4be824ca90">BeamingUser::Deserialize</a>(deserializeParameters);
<a name="l00601"></a>00601                 RakNetTimeMS time = RakNet::GetTime();
<a name="l00602"></a>00602                 deserializeParameters-&gt;serializationBitstream[0].ReadAlignedBytes((<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>*)&amp;duration,<span class="keyword">sizeof</span>(duration));
<a name="l00603"></a>00603                 deserializeParameters-&gt;serializationBitstream[0].ReadAlignedBytes((<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>*)&amp;intensity,<span class="keyword">sizeof</span>(intensity));
<a name="l00604"></a>00604                 deserializeParameters-&gt;serializationBitstream[0].ReadAlignedBytes((<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>*)&amp;temperature,<span class="keyword">sizeof</span>(temperature));
<a name="l00605"></a>00605                 <span class="comment">//printf(&quot;%&quot;PRINTF_64_BIT_MODIFIER&quot;u: %s %s %s %s %s - %f %.3f %.3f\n&quot;,(unsigned long long)time,clientname,this-&gt;GetCreatingSystemGUID().ToString(),clientType,clientConfig,tactile_id,duration,intensity,temperature);</span>
<a name="l00606"></a>00606                 <span class="keywordflow">if</span> ((<a class="code" href="_client_server_8h.html#ad9b4d2b6bfe35238ad017f255ce6d0a1">topology</a>==<a class="code" href="_client_server_8h.html#a06fc87d81c62e9abb8790b6e5713c55ba67c96b24b23bcb408bae7626730a04b7">SERVER</a>)&amp;&amp;(<a class="code" href="_client_server_8h.html#af7883388f6a285534cba3f39404124d4">logging</a>==<span class="keyword">true</span>))<span class="comment">//logging on server</span>
<a name="l00607"></a>00607                 {
<a name="l00608"></a>00608                                 <a class="code" href="_client_server_8h.html#a87a1f273fa8ad585520f9a5e5d071ec4">logfileHandler</a>.GetLocalTime(localtime);
<a name="l00609"></a>00609                                 sprintf(logstr,<span class="stringliteral">&quot;M;%&quot;</span>PRINTF_64_BIT_MODIFIER<span class="stringliteral">&quot;u;%s;%s;%s;%s;%s;%s;%f;%.3f;%.3f&quot;</span>,(<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keywordtype">long</span>)time,localtime,clientname,this-&gt;GetCreatingSystemGUID().ToString(),clientType,clientConfig,tactile_id,duration,intensity,temperature);
<a name="l00610"></a>00610                                 <a class="code" href="_client_server_8h.html#a87a1f273fa8ad585520f9a5e5d071ec4">logfileHandler</a>.WriteLog(logstr); <span class="comment">//writes additional lines</span>
<a name="l00611"></a>00611                 }
<a name="l00612"></a>00612         }
<a name="l00613"></a>00613         <span class="keyword">virtual</span> <span class="keywordtype">void</span> SerializeConstructionRequestAccepted(RakNet::BitStream *serializationBitstream, RakNet::Connection_RM3 *requestingConnection)      {
<a name="l00614"></a>00614                 serializationBitstream-&gt;Write(GetName() + RakNet::RakString(tactile_id) + RakNet::RakString(<span class="stringliteral">&quot; created on server&quot;</span>));
<a name="l00615"></a>00615         }
<a name="l00616"></a>00616         <span class="keyword">virtual</span> <span class="keywordtype">void</span> DeserializeConstructionRequestAccepted(RakNet::BitStream *serializationBitstream, RakNet::Connection_RM3 *acceptingConnection) {
<a name="l00617"></a>00617                 PrintOutput(serializationBitstream);
<a name="l00618"></a>00618         }
<a name="l00619"></a>00619         <span class="keyword">virtual</span> <span class="keywordtype">void</span> SerializeConstructionRequestRejected(RakNet::BitStream *serializationBitstream, RakNet::Connection_RM3 *requestingConnection)      {
<a name="l00620"></a>00620                 serializationBitstream-&gt;Write(GetName() + RakNet::RakString(tactile_id) + RakNet::RakString(<span class="stringliteral">&quot; not created on server&quot;</span>));
<a name="l00621"></a>00621         }
<a name="l00622"></a>00622         <span class="keyword">virtual</span> <span class="keywordtype">void</span> DeserializeConstructionRequestRejected(RakNet::BitStream *serializationBitstream, RakNet::Connection_RM3 *rejectingConnection) {
<a name="l00623"></a>00623                 PrintOutput(serializationBitstream);
<a name="l00624"></a>00624         }
<a name="l00625"></a>00625 
<a name="l00626"></a>00626 <span class="keyword">public</span>:
<a name="l00627"></a><a class="code" href="class_beaming_tactile_replica.html#a00d4ee44a1c598f0b81a475e0b97f2af">00627</a>         <span class="keywordtype">char</span> tactile_id[128];
<a name="l00628"></a><a class="code" href="class_beaming_tactile_replica.html#aba669df9ef1b14424ce197767d90d767">00628</a>         <span class="keywordtype">double</span> <a class="code" href="class_beaming_tactile_replica.html#aba669df9ef1b14424ce197767d90d767">duration</a>;
<a name="l00629"></a><a class="code" href="class_beaming_tactile_replica.html#a78982f0cf39bd4929fc7b5e2ee8584ef">00629</a>         <span class="keywordtype">float</span> <a class="code" href="class_beaming_tactile_replica.html#a78982f0cf39bd4929fc7b5e2ee8584ef">intensity</a>;
<a name="l00630"></a><a class="code" href="class_beaming_tactile_replica.html#a02f68b68effd9b75bb51e001a6167b64">00630</a>         <span class="keywordtype">float</span> <a class="code" href="class_beaming_tactile_replica.html#a02f68b68effd9b75bb51e001a6167b64">temperature</a>;
<a name="l00631"></a><a class="code" href="class_beaming_tactile_replica.html#ab6b1bd5b3db5e4541e7dcff056ab541b">00631</a>         <a class="code" href="structnode__info.html">node_info</a> *<a class="code" href="class_beaming_tactile_replica.html#ab6b1bd5b3db5e4541e7dcff056ab541b">thisnode</a>;
<a name="l00632"></a>00632 
<a name="l00633"></a><a class="code" href="class_beaming_tactile_replica.html#a272b957beb0389db701cff13096330e0">00633</a>         <a class="code" href="class_beaming_tactile_replica.html#a272b957beb0389db701cff13096330e0">BeamingTactileReplica</a>() { }
<a name="l00634"></a>00634 
<a name="l00635"></a><a class="code" href="class_beaming_tactile_replica.html#afa7f8a289aa66812bbe72ce6188b6b21">00635</a>         <span class="keyword">virtual</span> <a class="code" href="class_beaming_tactile_replica.html#afa7f8a289aa66812bbe72ce6188b6b21">~BeamingTactileReplica</a>() { }
<a name="l00636"></a>00636 };
<a name="l00637"></a>00637 
<a name="l00638"></a>00638 
<a name="l00640"></a><a class="code" href="class_beaming_robot_replica.html">00640</a> <span class="keyword">class </span><a class="code" href="class_beaming_robot_replica.html" title="Kali-Type Robot Replica.">BeamingRobotReplica</a> : <span class="keyword">public</span> <a class="code" href="class_beaming_user.html" title="User Replica.">BeamingUser</a>
<a name="l00641"></a>00641 {
<a name="l00642"></a>00642         <span class="keyword">virtual</span> RakNet::RakString GetName(<span class="keywordtype">void</span>)<span class="keyword"> const </span>{<span class="keywordflow">return</span> RakNet::RakString(<span class="stringliteral">&quot;ROBOT&quot;</span>);}
<a name="l00643"></a>00643         <span class="keyword">virtual</span> <span class="keywordtype">void</span> WriteAllocationID(RakNet::BitStream *allocationIdBitstream)<span class="keyword"> const </span>{
<a name="l00644"></a>00644                 allocationIdBitstream-&gt;Write(GetName());
<a name="l00645"></a>00645         }
<a name="l00646"></a>00646         <span class="keyword">virtual</span> <span class="keywordtype">void</span> SerializeConstruction(RakNet::BitStream *constructionBitstream, RakNet::Connection_RM3 *destinationConnection)     {
<a name="l00647"></a>00647                 <a class="code" href="class_beaming_user.html#af8ce956d94ab68f510432a82cc7b9f99">BeamingUser::SerializeConstruction</a>(constructionBitstream, destinationConnection);
<a name="l00648"></a>00648                 constructionBitstream-&gt;Write(GetName() + RakNet::RakString(robot_id) + RakNet::RakString(<span class="stringliteral">&quot; created for guid &quot;</span>) + RakNet::RakString(this-&gt;GetCreatingSystemGUID().ToString()));
<a name="l00649"></a>00649                 constructionBitstream-&gt;Write(robot_id);
<a name="l00650"></a>00650         }
<a name="l00651"></a>00651         <span class="keyword">virtual</span> <span class="keywordtype">bool</span> DeserializeConstruction(RakNet::BitStream *constructionBitstream, RakNet::Connection_RM3 *sourceConnection) {
<a name="l00652"></a>00652                 <span class="keywordflow">if</span> (!<a class="code" href="class_beaming_user.html#a39ecc4e47f7bb41c9a5fac85fe491da2">BeamingUser::DeserializeConstruction</a>(constructionBitstream, sourceConnection))
<a name="l00653"></a>00653                         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00654"></a>00654                 RakNetTimeMS time = RakNet::GetTime();
<a name="l00655"></a>00655                 PrintOutput(constructionBitstream);
<a name="l00656"></a>00656                 constructionBitstream-&gt;Read(robot_id);
<a name="l00657"></a>00657                 printf(<span class="stringliteral">&quot;Client: %s, Type: %s, Config: %s, Node: %s\n&quot;</span>,clientname,clientType,clientConfig,robot_id);
<a name="l00658"></a>00658                 <a class="code" href="_client_server_8h.html#a8f02b9433307fc8567cc587ed4be14bd">robot_replicas</a>[this-&gt;GetCreatingSystemGUID()].push_back(<span class="keyword">this</span>); <span class="comment">//create within map on new client connection</span>
<a name="l00659"></a>00659                 thisnode = <span class="keyword">new</span> <a class="code" href="structnode__info.html">node_info</a>;
<a name="l00660"></a>00660                 thisnode-&gt;<a class="code" href="structnode__info.html#a988e1ab3a75015487c4ec4437252a7c7">name</a>=robot_id;
<a name="l00661"></a>00661                 thisnode-&gt;type=GetName().C_String();
<a name="l00662"></a>00662                 thisnode-&gt;peername = clientname;
<a name="l00663"></a>00663                 thisnode-&gt;peertype = clientType;
<a name="l00664"></a>00664                 thisnode-&gt;peercfg = clientConfig;
<a name="l00665"></a>00665                 thisnode-&gt;ipport = ip_port;
<a name="l00666"></a>00666                 <a class="code" href="_client_server_8h.html#aee6ed86d42821e392e49ae3ecb3f04b6">nodes_map</a>[this-&gt;GetCreatingSystemGUID().ToString()].push_back(thisnode);
<a name="l00667"></a>00667                 <span class="keywordflow">if</span> ((<a class="code" href="_client_server_8h.html#ad9b4d2b6bfe35238ad017f255ce6d0a1">topology</a>==<a class="code" href="_client_server_8h.html#a06fc87d81c62e9abb8790b6e5713c55ba67c96b24b23bcb408bae7626730a04b7">SERVER</a>)&amp;&amp;(<a class="code" href="_client_server_8h.html#af7883388f6a285534cba3f39404124d4">logging</a>==<span class="keyword">true</span>))
<a name="l00668"></a>00668                 {
<a name="l00669"></a>00669                         <span class="comment">//printf(&quot;%&quot;PRINTF_64_BIT_MODIFIER&quot;u: %s client created; rem %i\n&quot;,(unsigned long long)time,sourceConnection-&gt;GetRakNetGUID().ToString(),robot_replicas.size());</span>
<a name="l00670"></a>00670                         <a class="code" href="_client_server_8h.html#a87a1f273fa8ad585520f9a5e5d071ec4">logfileHandler</a>.GetLocalTime(localtime);
<a name="l00671"></a>00671                         sprintf(logstr,<span class="stringliteral">&quot;C;%&quot;</span>PRINTF_64_BIT_MODIFIER<span class="stringliteral">&quot;u;%s;%s;0;%i&quot;</span>,(<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keywordtype">long</span>)time,localtime,sourceConnection-&gt;GetRakNetGUID().ToString(),<a class="code" href="_client_server_8h.html#a8f02b9433307fc8567cc587ed4be14bd">robot_replicas</a>.size());
<a name="l00672"></a>00672                         <a class="code" href="_client_server_8h.html#a87a1f273fa8ad585520f9a5e5d071ec4">logfileHandler</a>.WriteLog(logstr);
<a name="l00673"></a>00673                 }
<a name="l00674"></a>00674                 <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00675"></a>00675         }
<a name="l00676"></a>00676         <span class="keyword">virtual</span> <span class="keywordtype">void</span> SerializeDestruction(RakNet::BitStream *destructionBitstream, RakNet::Connection_RM3 *destinationConnection)       {
<a name="l00677"></a>00677                 <a class="code" href="class_beaming_user.html#af2ace89dbd788247407e6b4f454a4c2a">BeamingUser::SerializeDestruction</a>(destructionBitstream, destinationConnection);
<a name="l00678"></a>00678                 destructionBitstream-&gt;Write(GetName() + RakNet::RakString(robot_id) + RakNet::RakString(<span class="stringliteral">&quot; removed for guid &quot;</span>) + RakNet::RakString(this-&gt;GetCreatingSystemGUID().ToString()));
<a name="l00679"></a>00679         }
<a name="l00680"></a>00680         <span class="keyword">virtual</span> <span class="keywordtype">bool</span> DeserializeDestruction(RakNet::BitStream *destructionBitstream, RakNet::Connection_RM3 *sourceConnection) {
<a name="l00681"></a>00681                 <span class="keywordflow">if</span> (!<a class="code" href="class_beaming_user.html#a355093f433b903dcc86d63df13312c12">BeamingUser::DeserializeDestruction</a>(destructionBitstream, sourceConnection))
<a name="l00682"></a>00682                         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00683"></a>00683                 RakNetTimeMS time = RakNet::GetTime();
<a name="l00684"></a>00684                 PrintOutput(destructionBitstream);
<a name="l00685"></a>00685                 <a class="code" href="_client_server_8h.html#a8f02b9433307fc8567cc587ed4be14bd">robot_replicas</a>.erase(this-&gt;GetCreatingSystemGUID()); <span class="comment">//erase from map on client disconnection</span>
<a name="l00686"></a>00686                 <a class="code" href="_client_server_8h.html#aee6ed86d42821e392e49ae3ecb3f04b6">nodes_map</a>.erase(this-&gt;GetCreatingSystemGUID().ToString());
<a name="l00687"></a>00687                 <a class="code" href="_client_server_8h.html#a23ccb3d0e9aaae919d32876ed291503e">new_clients</a>.erase(this-&gt;GetCreatingSystemGUID()); <span class="comment">//deprecated</span>
<a name="l00688"></a>00688                 <span class="keywordflow">if</span> ((<a class="code" href="_client_server_8h.html#ad9b4d2b6bfe35238ad017f255ce6d0a1">topology</a>==<a class="code" href="_client_server_8h.html#a06fc87d81c62e9abb8790b6e5713c55ba67c96b24b23bcb408bae7626730a04b7">SERVER</a>)&amp;&amp;(<a class="code" href="_client_server_8h.html#af7883388f6a285534cba3f39404124d4">logging</a>==<span class="keyword">true</span>))
<a name="l00689"></a>00689                 {
<a name="l00690"></a>00690                         <span class="comment">//printf(&quot;%&quot;PRINTF_64_BIT_MODIFIER&quot;u: %s client deleted; rem %i\n&quot;,(unsigned long long)time,sourceConnection-&gt;GetRakNetGUID().ToString(),robot_replicas.size());</span>
<a name="l00691"></a>00691                         <a class="code" href="_client_server_8h.html#a87a1f273fa8ad585520f9a5e5d071ec4">logfileHandler</a>.GetLocalTime(localtime);
<a name="l00692"></a>00692                         sprintf(logstr,<span class="stringliteral">&quot;D;%&quot;</span>PRINTF_64_BIT_MODIFIER<span class="stringliteral">&quot;u;%s;%s;0;%i&quot;</span>,(<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keywordtype">long</span>)time,localtime,sourceConnection-&gt;GetRakNetGUID().ToString(),<a class="code" href="_client_server_8h.html#a8f02b9433307fc8567cc587ed4be14bd">robot_replicas</a>.size());
<a name="l00693"></a>00693                         <a class="code" href="_client_server_8h.html#a87a1f273fa8ad585520f9a5e5d071ec4">logfileHandler</a>.WriteLog(logstr);
<a name="l00694"></a>00694                 }
<a name="l00695"></a>00695                 <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00696"></a>00696         }
<a name="l00697"></a>00697         <span class="keyword">virtual</span> <span class="keywordtype">void</span> DeallocReplica(RakNet::Connection_RM3 *sourceConnection) {
<a name="l00698"></a>00698                 <span class="keyword">delete</span> <span class="keyword">this</span>;
<a name="l00699"></a>00699         }
<a name="l00700"></a>00700         <span class="keyword">virtual</span> RM3SerializationResult Serialize(SerializeParameters *serializeParameters)      {
<a name="l00701"></a>00701                 <a class="code" href="class_beaming_user.html#a5279ea44c4a41f6aa23b22a8da969168">BeamingUser::Serialize</a>(serializeParameters);
<a name="l00702"></a>00702                 RakNetTimeMS time = RakNet::GetTime();
<a name="l00703"></a>00703                 serializeParameters-&gt;outputBitstream[0].WriteAlignedBytes((<span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>*)&amp;type,<span class="keyword">sizeof</span>(type));
<a name="l00704"></a>00704                 serializeParameters-&gt;outputBitstream[0].WriteAlignedBytes((<span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>*)&amp;details,<span class="keyword">sizeof</span>(details));
<a name="l00705"></a>00705                 serializeParameters-&gt;outputBitstream[0].WriteAlignedBytes((<span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>*)&amp;freespace,<span class="keyword">sizeof</span>(freespace));
<a name="l00706"></a>00706                 serializeParameters-&gt;outputBitstream[0].WriteAlignedBytes((<span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>*)&amp;position,<span class="keyword">sizeof</span>(position));
<a name="l00707"></a>00707                 serializeParameters-&gt;outputBitstream[0].WriteAlignedBytes((<span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>*)&amp;orientation,<span class="keyword">sizeof</span>(orientation));
<a name="l00708"></a>00708                 serializeParameters-&gt;outputBitstream[0].WriteAlignedBytes((<span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>*)&amp;time_remain,<span class="keyword">sizeof</span>(time_remain));
<a name="l00709"></a>00709                 serializeParameters-&gt;outputBitstream[0].WriteAlignedBytes((<span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>*)&amp;contact_type,<span class="keyword">sizeof</span>(contact_type));
<a name="l00710"></a>00710                 <span class="keywordflow">return</span> RM3SR_BROADCAST_IDENTICALLY;
<a name="l00711"></a>00711         }
<a name="l00712"></a>00712         <span class="keyword">virtual</span> <span class="keywordtype">void</span> Deserialize(RakNet::DeserializeParameters *deserializeParameters) {
<a name="l00713"></a>00713                 <a class="code" href="class_beaming_user.html#ac2ed95cffb4e6e9e8b0e0e4be824ca90">BeamingUser::Deserialize</a>(deserializeParameters);
<a name="l00714"></a>00714                 RakNetTimeMS time = RakNet::GetTime();
<a name="l00715"></a>00715                 deserializeParameters-&gt;serializationBitstream[0].ReadAlignedBytes((<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>*)&amp;type,<span class="keyword">sizeof</span>(type));
<a name="l00716"></a>00716                 deserializeParameters-&gt;serializationBitstream[0].ReadAlignedBytes((<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>*)&amp;details,<span class="keyword">sizeof</span>(details));
<a name="l00717"></a>00717                 deserializeParameters-&gt;serializationBitstream[0].ReadAlignedBytes((<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>*)&amp;freespace,<span class="keyword">sizeof</span>(freespace));
<a name="l00718"></a>00718                 deserializeParameters-&gt;serializationBitstream[0].ReadAlignedBytes((<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>*)&amp;position,<span class="keyword">sizeof</span>(position));
<a name="l00719"></a>00719                 deserializeParameters-&gt;serializationBitstream[0].ReadAlignedBytes((<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>*)&amp;orientation,<span class="keyword">sizeof</span>(orientation));
<a name="l00720"></a>00720                 deserializeParameters-&gt;serializationBitstream[0].ReadAlignedBytes((<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>*)&amp;time_remain,<span class="keyword">sizeof</span>(time_remain));
<a name="l00721"></a>00721                 deserializeParameters-&gt;serializationBitstream[0].ReadAlignedBytes((<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>*)&amp;contact_type,<span class="keyword">sizeof</span>(contact_type));
<a name="l00722"></a>00722                 <span class="comment">//printf(&quot;%&quot;PRINTF_64_BIT_MODIFIER&quot;u: %s %s %s %s %s - %i %i %.3f %.3f %.3f %.3f %.3f %.3f %.3f %.3f %.3f %i\n&quot;,(unsigned long long)time,clientname,this-&gt;GetCreatingSystemGUID().ToString(),clientType,clientConfig,robot_id,type,details,freespace,position.x,position.y,position.z,orientation.x,orientation.y,orientation.z,orientation.w,time_remain,contact_type);</span>
<a name="l00723"></a>00723                 <span class="keywordflow">if</span> ((<a class="code" href="_client_server_8h.html#ad9b4d2b6bfe35238ad017f255ce6d0a1">topology</a>==<a class="code" href="_client_server_8h.html#a06fc87d81c62e9abb8790b6e5713c55ba67c96b24b23bcb408bae7626730a04b7">SERVER</a>)&amp;&amp;(<a class="code" href="_client_server_8h.html#af7883388f6a285534cba3f39404124d4">logging</a>==<span class="keyword">true</span>))<span class="comment">//logging on server</span>
<a name="l00724"></a>00724                 {
<a name="l00725"></a>00725                                 <a class="code" href="_client_server_8h.html#a87a1f273fa8ad585520f9a5e5d071ec4">logfileHandler</a>.GetLocalTime(localtime);
<a name="l00726"></a>00726                                 sprintf(logstr,<span class="stringliteral">&quot;M;%&quot;</span>PRINTF_64_BIT_MODIFIER<span class="stringliteral">&quot;u;%s;%s;%s;%s;%s;%s;%i;%i;%.3f;%.3f;%.3f;%.3f;%.3f;%.3f;%.3f;%.3f;%.3f;%i&quot;</span>,(<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keywordtype">long</span>)time,localtime,clientname,this-&gt;GetCreatingSystemGUID().ToString(),clientType,clientConfig,robot_id,type,details,freespace,position.x,position.y,position.z,orientation.x,orientation.y,orientation.z,orientation.w,time_remain,contact_type);
<a name="l00727"></a>00727                                 <a class="code" href="_client_server_8h.html#a87a1f273fa8ad585520f9a5e5d071ec4">logfileHandler</a>.WriteLog(logstr); <span class="comment">//writes additional lines</span>
<a name="l00728"></a>00728                 }
<a name="l00729"></a>00729         }
<a name="l00730"></a>00730         <span class="keyword">virtual</span> <span class="keywordtype">void</span> SerializeConstructionRequestAccepted(RakNet::BitStream *serializationBitstream, RakNet::Connection_RM3 *requestingConnection)      {
<a name="l00731"></a>00731                 serializationBitstream-&gt;Write(GetName() + RakNet::RakString(robot_id) + RakNet::RakString(<span class="stringliteral">&quot; created on server&quot;</span>));
<a name="l00732"></a>00732         }
<a name="l00733"></a>00733         <span class="keyword">virtual</span> <span class="keywordtype">void</span> DeserializeConstructionRequestAccepted(RakNet::BitStream *serializationBitstream, RakNet::Connection_RM3 *acceptingConnection) {
<a name="l00734"></a>00734                 PrintOutput(serializationBitstream);
<a name="l00735"></a>00735         }
<a name="l00736"></a>00736         <span class="keyword">virtual</span> <span class="keywordtype">void</span> SerializeConstructionRequestRejected(RakNet::BitStream *serializationBitstream, RakNet::Connection_RM3 *requestingConnection)      {
<a name="l00737"></a>00737                 serializationBitstream-&gt;Write(GetName() + RakNet::RakString(robot_id) + RakNet::RakString(<span class="stringliteral">&quot; not created on server&quot;</span>));
<a name="l00738"></a>00738         }
<a name="l00739"></a>00739         <span class="keyword">virtual</span> <span class="keywordtype">void</span> DeserializeConstructionRequestRejected(RakNet::BitStream *serializationBitstream, RakNet::Connection_RM3 *rejectingConnection) {
<a name="l00740"></a>00740                 PrintOutput(serializationBitstream);
<a name="l00741"></a>00741         }
<a name="l00742"></a>00742 
<a name="l00743"></a>00743 <span class="keyword">public</span>:
<a name="l00744"></a><a class="code" href="class_beaming_robot_replica.html#a1d6f2bed4abee139f4e18fdba89a9503">00744</a>         <span class="keywordtype">char</span> robot_id[128];
<a name="l00745"></a><a class="code" href="class_beaming_robot_replica.html#a134a613f6f950648b9e7fef6f5732ff7">00745</a>         <span class="keywordtype">int</span> <a class="code" href="class_beaming_robot_replica.html#a134a613f6f950648b9e7fef6f5732ff7">type</a>;
<a name="l00746"></a><a class="code" href="class_beaming_robot_replica.html#ad19393f5f8361b7862438343f3c0d780">00746</a>         <span class="keywordtype">int</span> <a class="code" href="class_beaming_robot_replica.html#ad19393f5f8361b7862438343f3c0d780">details</a>;
<a name="l00747"></a><a class="code" href="class_beaming_robot_replica.html#af10f28e224b3511b2e666e1df71be828">00747</a>         <span class="keywordtype">float</span> <a class="code" href="class_beaming_robot_replica.html#af10f28e224b3511b2e666e1df71be828">freespace</a>;
<a name="l00748"></a><a class="code" href="class_beaming_robot_replica.html#a5ef9ebb68f95b81dcaaf7ba767a1e091">00748</a>         <a class="code" href="class_c_vec3.html">CVec3</a> <a class="code" href="class_beaming_robot_replica.html#a5ef9ebb68f95b81dcaaf7ba767a1e091">position</a>;
<a name="l00749"></a><a class="code" href="class_beaming_robot_replica.html#a3fbd6d5ac22d1ef1d6368ff44c8e1873">00749</a>         <a class="code" href="class_c_quat.html" title="math helper class for quaternions">CQuat</a> <a class="code" href="class_beaming_robot_replica.html#a3fbd6d5ac22d1ef1d6368ff44c8e1873">orientation</a>;
<a name="l00750"></a><a class="code" href="class_beaming_robot_replica.html#ab628f380d2dc98820b7065a59d1fdcfe">00750</a>         <span class="keywordtype">float</span> <a class="code" href="class_beaming_robot_replica.html#ab628f380d2dc98820b7065a59d1fdcfe">time_remain</a>;
<a name="l00751"></a><a class="code" href="class_beaming_robot_replica.html#a09b2f64115fa45fbc12ebb88b3072c4a">00751</a>         <span class="keywordtype">int</span> <a class="code" href="class_beaming_robot_replica.html#a09b2f64115fa45fbc12ebb88b3072c4a">contact_type</a>;
<a name="l00752"></a><a class="code" href="class_beaming_robot_replica.html#a33e7393583f29b19cdd1b4dcbb5ce078">00752</a>         <a class="code" href="structnode__info.html">node_info</a> *<a class="code" href="class_beaming_robot_replica.html#a33e7393583f29b19cdd1b4dcbb5ce078">thisnode</a>;
<a name="l00753"></a>00753 
<a name="l00754"></a><a class="code" href="class_beaming_robot_replica.html#a3885a9f6f02989ed636a3ad3c3110779">00754</a>         <a class="code" href="class_beaming_robot_replica.html#a3885a9f6f02989ed636a3ad3c3110779">BeamingRobotReplica</a>() { }
<a name="l00755"></a>00755 
<a name="l00756"></a><a class="code" href="class_beaming_robot_replica.html#a86a284873f02c15bbfe879ac212607e8">00756</a>         <span class="keyword">virtual</span> <a class="code" href="class_beaming_robot_replica.html#a86a284873f02c15bbfe879ac212607e8">~BeamingRobotReplica</a>() { }
<a name="l00757"></a>00757 };
<a name="l00758"></a>00758 
<a name="l00760"></a><a class="code" href="class_beaming_generic_replica.html">00760</a> <span class="keyword">class </span><a class="code" href="class_beaming_generic_replica.html" title="Generic Replica (to enable writing of generic replica up to 1024 bytes)">BeamingGenericReplica</a> : <span class="keyword">public</span> <a class="code" href="class_beaming_user.html" title="User Replica.">BeamingUser</a>
<a name="l00761"></a>00761 {
<a name="l00762"></a>00762         <span class="keyword">virtual</span> RakNet::RakString GetName(<span class="keywordtype">void</span>)<span class="keyword"> const </span>{<span class="keywordflow">return</span> RakNet::RakString(<span class="stringliteral">&quot;GENERIC&quot;</span>);}
<a name="l00763"></a>00763         <span class="keyword">virtual</span> <span class="keywordtype">void</span> WriteAllocationID(RakNet::BitStream *allocationIdBitstream)<span class="keyword"> const </span>{
<a name="l00764"></a>00764                 allocationIdBitstream-&gt;Write(GetName());
<a name="l00765"></a>00765         }
<a name="l00766"></a>00766         <span class="keyword">virtual</span> <span class="keywordtype">void</span> SerializeConstruction(RakNet::BitStream *constructionBitstream, RakNet::Connection_RM3 *destinationConnection)     {
<a name="l00767"></a>00767                 <a class="code" href="class_beaming_user.html#af8ce956d94ab68f510432a82cc7b9f99">BeamingUser::SerializeConstruction</a>(constructionBitstream, destinationConnection);
<a name="l00768"></a>00768                 constructionBitstream-&gt;Write(GetName() + RakNet::RakString(generic_id) + RakNet::RakString(<span class="stringliteral">&quot; created for guid &quot;</span>) + RakNet::RakString(this-&gt;GetCreatingSystemGUID().ToString()));
<a name="l00769"></a>00769                 constructionBitstream-&gt;Write(generic_id);
<a name="l00770"></a>00770         }
<a name="l00771"></a>00771         <span class="keyword">virtual</span> <span class="keywordtype">bool</span> DeserializeConstruction(RakNet::BitStream *constructionBitstream, RakNet::Connection_RM3 *sourceConnection) {
<a name="l00772"></a>00772                 <span class="keywordflow">if</span> (!<a class="code" href="class_beaming_user.html#a39ecc4e47f7bb41c9a5fac85fe491da2">BeamingUser::DeserializeConstruction</a>(constructionBitstream, sourceConnection))
<a name="l00773"></a>00773                         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00774"></a>00774                 RakNetTimeMS time = RakNet::GetTime();
<a name="l00775"></a>00775                 PrintOutput(constructionBitstream);
<a name="l00776"></a>00776                 constructionBitstream-&gt;Read(generic_id);
<a name="l00777"></a>00777                 printf(<span class="stringliteral">&quot;Client: %s, Type: %s, Config: %s, Node: %s\n&quot;</span>,clientname,clientType,clientConfig,generic_id);
<a name="l00778"></a>00778                 <a class="code" href="_client_server_8h.html#a61cf6a51b1d3eed6ab9903aa09162bbc">generic_replicas</a>[this-&gt;GetCreatingSystemGUID()].push_back(<span class="keyword">this</span>); <span class="comment">//create within map on new client connection</span>
<a name="l00779"></a>00779                 thisnode = <span class="keyword">new</span> <a class="code" href="structnode__info.html">node_info</a>;
<a name="l00780"></a>00780                 thisnode-&gt;<a class="code" href="structnode__info.html#a988e1ab3a75015487c4ec4437252a7c7">name</a>=generic_id;
<a name="l00781"></a>00781                 thisnode-&gt;type=GetName().C_String();
<a name="l00782"></a>00782                 thisnode-&gt;peername = clientname;
<a name="l00783"></a>00783                 thisnode-&gt;peertype = clientType;
<a name="l00784"></a>00784                 thisnode-&gt;peercfg = clientConfig;
<a name="l00785"></a>00785                 thisnode-&gt;ipport = ip_port;
<a name="l00786"></a>00786                 <a class="code" href="_client_server_8h.html#aee6ed86d42821e392e49ae3ecb3f04b6">nodes_map</a>[this-&gt;GetCreatingSystemGUID().ToString()].push_back(thisnode);
<a name="l00787"></a>00787                 <span class="keywordflow">if</span> ((<a class="code" href="_client_server_8h.html#ad9b4d2b6bfe35238ad017f255ce6d0a1">topology</a>==<a class="code" href="_client_server_8h.html#a06fc87d81c62e9abb8790b6e5713c55ba67c96b24b23bcb408bae7626730a04b7">SERVER</a>)&amp;&amp;(<a class="code" href="_client_server_8h.html#af7883388f6a285534cba3f39404124d4">logging</a>==<span class="keyword">true</span>))
<a name="l00788"></a>00788                 {
<a name="l00789"></a>00789                         <span class="comment">//printf(&quot;%&quot;PRINTF_64_BIT_MODIFIER&quot;u: %s client created; rem %i\n&quot;,(unsigned long long)time,sourceConnection-&gt;GetRakNetGUID().ToString(),generic_replicas.size());</span>
<a name="l00790"></a>00790                         <a class="code" href="_client_server_8h.html#a87a1f273fa8ad585520f9a5e5d071ec4">logfileHandler</a>.GetLocalTime(localtime);
<a name="l00791"></a>00791                         sprintf(logstr,<span class="stringliteral">&quot;C;%&quot;</span>PRINTF_64_BIT_MODIFIER<span class="stringliteral">&quot;u;%s;%s;0;%i&quot;</span>,(<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keywordtype">long</span>)time,localtime,sourceConnection-&gt;GetRakNetGUID().ToString(),<a class="code" href="_client_server_8h.html#a61cf6a51b1d3eed6ab9903aa09162bbc">generic_replicas</a>.size());
<a name="l00792"></a>00792                         <a class="code" href="_client_server_8h.html#a87a1f273fa8ad585520f9a5e5d071ec4">logfileHandler</a>.WriteLog(logstr);
<a name="l00793"></a>00793                 }
<a name="l00794"></a>00794                 <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00795"></a>00795         }
<a name="l00796"></a>00796         <span class="keyword">virtual</span> <span class="keywordtype">void</span> SerializeDestruction(RakNet::BitStream *destructionBitstream, RakNet::Connection_RM3 *destinationConnection)       {
<a name="l00797"></a>00797                 <a class="code" href="class_beaming_user.html#af2ace89dbd788247407e6b4f454a4c2a">BeamingUser::SerializeDestruction</a>(destructionBitstream, destinationConnection);
<a name="l00798"></a>00798                 destructionBitstream-&gt;Write(GetName() + RakNet::RakString(generic_id) + RakNet::RakString(<span class="stringliteral">&quot; removed for guid &quot;</span>) + RakNet::RakString(this-&gt;GetCreatingSystemGUID().ToString()));
<a name="l00799"></a>00799         }
<a name="l00800"></a>00800         <span class="keyword">virtual</span> <span class="keywordtype">bool</span> DeserializeDestruction(RakNet::BitStream *destructionBitstream, RakNet::Connection_RM3 *sourceConnection) {
<a name="l00801"></a>00801                 <span class="keywordflow">if</span> (!<a class="code" href="class_beaming_user.html#a355093f433b903dcc86d63df13312c12">BeamingUser::DeserializeDestruction</a>(destructionBitstream, sourceConnection))
<a name="l00802"></a>00802                         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00803"></a>00803                 RakNetTimeMS time = RakNet::GetTime();
<a name="l00804"></a>00804                 PrintOutput(destructionBitstream);
<a name="l00805"></a>00805                 <span class="comment">//remove generic from generic_replicas</span>
<a name="l00806"></a>00806                 <span class="keywordflow">for</span> ( std::vector&lt;BeamingGenericReplica*&gt;::iterator cIter = <a class="code" href="_client_server_8h.html#a61cf6a51b1d3eed6ab9903aa09162bbc">generic_replicas</a>[this-&gt;GetCreatingSystemGUID()].begin(); cIter!=<a class="code" href="_client_server_8h.html#a61cf6a51b1d3eed6ab9903aa09162bbc">generic_replicas</a>[this-&gt;GetCreatingSystemGUID()].end(); cIter++ ) {
<a name="l00807"></a>00807                         <span class="keywordflow">if</span> (( strcmp((*cIter)-&gt;generic_id,generic_id) == 0 ) &amp;&amp;  ( strcmp((*cIter)-&gt;clientname,clientname) == 0 )) {
<a name="l00808"></a>00808                                 <a class="code" href="_client_server_8h.html#a61cf6a51b1d3eed6ab9903aa09162bbc">generic_replicas</a>[this-&gt;GetCreatingSystemGUID()].erase(cIter);
<a name="l00809"></a>00809                                 <span class="keywordflow">break</span>;
<a name="l00810"></a>00810                         }
<a name="l00811"></a>00811                 }
<a name="l00812"></a>00812                 <span class="comment">//remove generic data from nodes_map</span>
<a name="l00813"></a>00813                 <span class="keywordflow">for</span> ( std::vector&lt;node_info*&gt;::iterator cIter = <a class="code" href="_client_server_8h.html#aee6ed86d42821e392e49ae3ecb3f04b6">nodes_map</a>[this-&gt;GetCreatingSystemGUID().ToString()].begin(); cIter!=<a class="code" href="_client_server_8h.html#aee6ed86d42821e392e49ae3ecb3f04b6">nodes_map</a>[this-&gt;GetCreatingSystemGUID().ToString()].end(); cIter++ ) {
<a name="l00814"></a>00814                         <span class="keywordflow">if</span> (( strcmp((*cIter)-&gt;name.c_str(),generic_id) == 0 ) &amp;&amp;  ( strcmp((*cIter)-&gt;peername,clientname) == 0 )) {
<a name="l00815"></a>00815                                 <a class="code" href="_client_server_8h.html#aee6ed86d42821e392e49ae3ecb3f04b6">nodes_map</a>[this-&gt;GetCreatingSystemGUID().ToString()].erase(cIter);
<a name="l00816"></a>00816                                 <span class="keywordflow">break</span>;
<a name="l00817"></a>00817                         }
<a name="l00818"></a>00818                 }
<a name="l00819"></a>00819                 <span class="keywordflow">if</span> (<a class="code" href="_client_server_8h.html#aee6ed86d42821e392e49ae3ecb3f04b6">nodes_map</a>[this-&gt;GetCreatingSystemGUID().ToString()].empty())
<a name="l00820"></a>00820                 {       <a class="code" href="_client_server_8h.html#aee6ed86d42821e392e49ae3ecb3f04b6">nodes_map</a>.erase(this-&gt;GetCreatingSystemGUID().ToString());      }
<a name="l00821"></a>00821                 <a class="code" href="_client_server_8h.html#a23ccb3d0e9aaae919d32876ed291503e">new_clients</a>.erase(this-&gt;GetCreatingSystemGUID()); <span class="comment">//deprecated</span>
<a name="l00822"></a>00822                 <span class="keywordflow">if</span> ((<a class="code" href="_client_server_8h.html#ad9b4d2b6bfe35238ad017f255ce6d0a1">topology</a>==<a class="code" href="_client_server_8h.html#a06fc87d81c62e9abb8790b6e5713c55ba67c96b24b23bcb408bae7626730a04b7">SERVER</a>)&amp;&amp;(<a class="code" href="_client_server_8h.html#af7883388f6a285534cba3f39404124d4">logging</a>==<span class="keyword">true</span>))
<a name="l00823"></a>00823                 {
<a name="l00824"></a>00824                         <span class="comment">//printf(&quot;%&quot;PRINTF_64_BIT_MODIFIER&quot;u: %s client deleted; rem %i\n&quot;,(unsigned long long)time,sourceConnection-&gt;GetRakNetGUID().ToString(),generic_replicas.size());</span>
<a name="l00825"></a>00825                         <a class="code" href="_client_server_8h.html#a87a1f273fa8ad585520f9a5e5d071ec4">logfileHandler</a>.GetLocalTime(localtime);
<a name="l00826"></a>00826                         sprintf(logstr,<span class="stringliteral">&quot;D;%&quot;</span>PRINTF_64_BIT_MODIFIER<span class="stringliteral">&quot;u;%s;%s;0;%i&quot;</span>,(<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keywordtype">long</span>)time,localtime,sourceConnection-&gt;GetRakNetGUID().ToString(),<a class="code" href="_client_server_8h.html#a61cf6a51b1d3eed6ab9903aa09162bbc">generic_replicas</a>.size());
<a name="l00827"></a>00827                         <a class="code" href="_client_server_8h.html#a87a1f273fa8ad585520f9a5e5d071ec4">logfileHandler</a>.WriteLog(logstr);
<a name="l00828"></a>00828                 }
<a name="l00829"></a>00829                 <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00830"></a>00830         }
<a name="l00831"></a>00831         <span class="keyword">virtual</span> <span class="keywordtype">void</span> DeallocReplica(RakNet::Connection_RM3 *sourceConnection) {
<a name="l00832"></a>00832                 <span class="keyword">delete</span> <span class="keyword">this</span>;
<a name="l00833"></a>00833         }
<a name="l00834"></a>00834         <span class="keyword">virtual</span> RM3SerializationResult Serialize(SerializeParameters *serializeParameters)      {
<a name="l00835"></a>00835                 <a class="code" href="class_beaming_user.html#a5279ea44c4a41f6aa23b22a8da969168">BeamingUser::Serialize</a>(serializeParameters);
<a name="l00836"></a>00836                 RakNetTimeMS time = RakNet::GetTime();
<a name="l00837"></a>00837                 serializeParameters-&gt;outputBitstream[0].WriteBits((<span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>*)anydata,1024*8);
<a name="l00838"></a>00838                 serializeParameters-&gt;outputBitstream[0].WriteAlignedBytes((<span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>*)&amp;datasize,<span class="keyword">sizeof</span>(datasize));
<a name="l00839"></a>00839                 <span class="comment">/*//begin printf</span>
<a name="l00840"></a>00840 <span class="comment">                static int y = 0;</span>
<a name="l00841"></a>00841 <span class="comment">                struct mystruct{</span>
<a name="l00842"></a>00842 <span class="comment">                        int x;</span>
<a name="l00843"></a>00843 <span class="comment">                        char name[28];</span>
<a name="l00844"></a>00844 <span class="comment">                        float myfloat;</span>
<a name="l00845"></a>00845 <span class="comment">                } st;   </span>
<a name="l00846"></a>00846 <span class="comment">                if (y == 100) {</span>
<a name="l00847"></a>00847 <span class="comment">                        printf(&quot;sending %s, %d, %.3f ...\n&quot;,((mystruct *)anydata)-&gt;name,((mystruct *)anydata)-&gt;x,((mystruct *)anydata)-&gt;myfloat);</span>
<a name="l00848"></a>00848 <span class="comment">                        y = 0;</span>
<a name="l00849"></a>00849 <span class="comment">                }</span>
<a name="l00850"></a>00850 <span class="comment">                y++;</span>
<a name="l00851"></a>00851 <span class="comment">                //end printf*/</span>
<a name="l00852"></a>00852                 <span class="keywordflow">return</span> RM3SR_BROADCAST_IDENTICALLY;
<a name="l00853"></a>00853         }
<a name="l00854"></a>00854         <span class="keyword">virtual</span> <span class="keywordtype">void</span> Deserialize(RakNet::DeserializeParameters *deserializeParameters) {
<a name="l00855"></a>00855                 <a class="code" href="class_beaming_user.html#ac2ed95cffb4e6e9e8b0e0e4be824ca90">BeamingUser::Deserialize</a>(deserializeParameters);
<a name="l00856"></a>00856                 RakNetTimeMS time = RakNet::GetTime();
<a name="l00857"></a>00857                 deserializeParameters-&gt;serializationBitstream[0].ReadBits((<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>*)anydata,1024*8);
<a name="l00858"></a>00858                 deserializeParameters-&gt;serializationBitstream[0].ReadAlignedBytes((<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>*)&amp;datasize,<span class="keyword">sizeof</span>(datasize));
<a name="l00859"></a>00859                 <span class="comment">//printf(&quot;%&quot;PRINTF_64_BIT_MODIFIER&quot;u: %s %s %s %s %s\n&quot;,(unsigned long long)time,clientname,this-&gt;GetCreatingSystemGUID().ToString(),clientType,clientConfig,generic_id/*,anydata*/);</span>
<a name="l00860"></a>00860                 <span class="keywordflow">if</span> ((<a class="code" href="_client_server_8h.html#ad9b4d2b6bfe35238ad017f255ce6d0a1">topology</a>==<a class="code" href="_client_server_8h.html#a06fc87d81c62e9abb8790b6e5713c55ba67c96b24b23bcb408bae7626730a04b7">SERVER</a>)&amp;&amp;(<a class="code" href="_client_server_8h.html#af7883388f6a285534cba3f39404124d4">logging</a>==<span class="keyword">true</span>))<span class="comment">//logging on server</span>
<a name="l00861"></a>00861                 {
<a name="l00862"></a>00862                                 <a class="code" href="_client_server_8h.html#a87a1f273fa8ad585520f9a5e5d071ec4">logfileHandler</a>.GetLocalTime(localtime);
<a name="l00863"></a>00863                                 sprintf(logstr,<span class="stringliteral">&quot;M;%&quot;</span>PRINTF_64_BIT_MODIFIER<span class="stringliteral">&quot;u;%s;%s;%s;%s;%s;%s&quot;</span>,(<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keywordtype">long</span>)time,localtime,clientname,this-&gt;GetCreatingSystemGUID().ToString(),clientType,clientConfig,generic_id<span class="comment">/*,anydata*/</span>);
<a name="l00864"></a>00864                                 <a class="code" href="_client_server_8h.html#a87a1f273fa8ad585520f9a5e5d071ec4">logfileHandler</a>.WriteLog(logstr); <span class="comment">//writes additional lines</span>
<a name="l00865"></a>00865                 }
<a name="l00866"></a>00866                 <span class="comment">/*//begin printf</span>
<a name="l00867"></a>00867 <span class="comment">                struct mystruct{</span>
<a name="l00868"></a>00868 <span class="comment">                        int x;</span>
<a name="l00869"></a>00869 <span class="comment">                        char name[28];</span>
<a name="l00870"></a>00870 <span class="comment">                        float myfloat;</span>
<a name="l00871"></a>00871 <span class="comment">                } st;   </span>
<a name="l00872"></a>00872 <span class="comment">                printf(&quot;receiving %s, %d, %.3f ...\n&quot;,((mystruct *)anydata)-&gt;name,((mystruct *)anydata)-&gt;x,((mystruct *)anydata)-&gt;myfloat);</span>
<a name="l00873"></a>00873 <span class="comment">                //end printf*/</span>
<a name="l00874"></a>00874         }
<a name="l00875"></a>00875         <span class="keyword">virtual</span> <span class="keywordtype">void</span> SerializeConstructionRequestAccepted(RakNet::BitStream *serializationBitstream, RakNet::Connection_RM3 *requestingConnection)      {
<a name="l00876"></a>00876                 serializationBitstream-&gt;Write(GetName() + RakNet::RakString(generic_id) + RakNet::RakString(<span class="stringliteral">&quot; created on server&quot;</span>));
<a name="l00877"></a>00877         }
<a name="l00878"></a>00878         <span class="keyword">virtual</span> <span class="keywordtype">void</span> DeserializeConstructionRequestAccepted(RakNet::BitStream *serializationBitstream, RakNet::Connection_RM3 *acceptingConnection) {
<a name="l00879"></a>00879                 PrintOutput(serializationBitstream);
<a name="l00880"></a>00880         }
<a name="l00881"></a>00881         <span class="keyword">virtual</span> <span class="keywordtype">void</span> SerializeConstructionRequestRejected(RakNet::BitStream *serializationBitstream, RakNet::Connection_RM3 *requestingConnection)      {
<a name="l00882"></a>00882                 serializationBitstream-&gt;Write(GetName() + RakNet::RakString(generic_id) + RakNet::RakString(<span class="stringliteral">&quot; not created on server&quot;</span>));
<a name="l00883"></a>00883         }
<a name="l00884"></a>00884         <span class="keyword">virtual</span> <span class="keywordtype">void</span> DeserializeConstructionRequestRejected(RakNet::BitStream *serializationBitstream, RakNet::Connection_RM3 *rejectingConnection) {
<a name="l00885"></a>00885                 PrintOutput(serializationBitstream);
<a name="l00886"></a>00886         }
<a name="l00887"></a>00887 
<a name="l00888"></a>00888 <span class="keyword">public</span>:
<a name="l00889"></a><a class="code" href="class_beaming_generic_replica.html#aab7698b91a748eac72075bdf10ebdd9a">00889</a>         <span class="keywordtype">char</span> generic_id[128];
<a name="l00890"></a><a class="code" href="class_beaming_generic_replica.html#ab8a50e1a5d360062a3171eda630c9a38">00890</a>         <a class="code" href="structnode__info.html">node_info</a> *<a class="code" href="class_beaming_generic_replica.html#ab8a50e1a5d360062a3171eda630c9a38">thisnode</a>;
<a name="l00891"></a><a class="code" href="class_beaming_generic_replica.html#a71c15c6f92201dc65dba166b06ad9ade">00891</a>         std::string <a class="code" href="class_beaming_generic_replica.html#a71c15c6f92201dc65dba166b06ad9ade">parentbone</a>;
<a name="l00892"></a><a class="code" href="class_beaming_generic_replica.html#a103697cd2484397dc0fd2541d3d45895">00892</a>         <span class="keywordtype">void</span> *<a class="code" href="class_beaming_generic_replica.html#a103697cd2484397dc0fd2541d3d45895">anydata</a>;
<a name="l00893"></a><a class="code" href="class_beaming_generic_replica.html#a4ab7b3f0db21d94f9d598421a02911be">00893</a>         <span class="keywordtype">int</span> <a class="code" href="class_beaming_generic_replica.html#a4ab7b3f0db21d94f9d598421a02911be">datasize</a>;
<a name="l00894"></a>00894 
<a name="l00895"></a><a class="code" href="class_beaming_generic_replica.html#affc6938cbbf8370af3b2d8e85d589e15">00895</a>         <a class="code" href="class_beaming_generic_replica.html#affc6938cbbf8370af3b2d8e85d589e15">BeamingGenericReplica</a>() : anydata(malloc(1024)) { }
<a name="l00896"></a>00896 
<a name="l00897"></a><a class="code" href="class_beaming_generic_replica.html#a003a6075f8ef9292ec3f6c9d62ff4645">00897</a>         <span class="keyword">virtual</span> <a class="code" href="class_beaming_generic_replica.html#a003a6075f8ef9292ec3f6c9d62ff4645">~BeamingGenericReplica</a>() { }
<a name="l00898"></a>00898 };
<a name="l00899"></a>00899 
<a name="l00900"></a>00900 
<a name="l00901"></a>00901 
<a name="l00903"></a><a class="code" href="class_beaming_room.html">00903</a> <span class="keyword">class </span><a class="code" href="class_beaming_room.html" title="Room Replica (destination)">BeamingRoom</a> : <span class="keyword">public</span> Replica3
<a name="l00904"></a>00904 {
<a name="l00905"></a>00905 <span class="keyword">public</span>:
<a name="l00906"></a><a class="code" href="class_beaming_room.html#aa8709e846ddb8857e6c78986a3029edd">00906</a>         <span class="keywordtype">void</span> PrintOutput(RakNet::BitStream *bs)
<a name="l00907"></a>00907         {
<a name="l00908"></a>00908                 <span class="keywordflow">if</span> (bs-&gt;GetNumberOfBitsUsed()==0)
<a name="l00909"></a>00909                         <span class="keywordflow">return</span>;
<a name="l00910"></a>00910                 RakNet::RakString rakString;
<a name="l00911"></a>00911                 bs-&gt;Read(rakString);
<a name="l00912"></a>00912                 printf(<span class="stringliteral">&quot;Receive: %s\n&quot;</span>, rakString.C_String());
<a name="l00913"></a>00913         }
<a name="l00914"></a><a class="code" href="class_beaming_room.html#af1ac8f8543885b3b3dabfe08e160e860">00914</a>         <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="class_beaming_room.html#af1ac8f8543885b3b3dabfe08e160e860">SerializeConstruction</a>(RakNet::BitStream *constructionBitstream, RakNet::Connection_RM3 *destinationConnection)     { 
<a name="l00915"></a>00915                 constructionBitstream-&gt;Write(clientname);
<a name="l00916"></a>00916                 constructionBitstream-&gt;Write(clientType);
<a name="l00917"></a>00917                 constructionBitstream-&gt;Write(clientConfig);
<a name="l00918"></a>00918                 constructionBitstream-&gt;Write(ip_port);
<a name="l00919"></a>00919                 gethostname(hostname,128);
<a name="l00920"></a>00920                 constructionBitstream-&gt;Write(hostname);
<a name="l00921"></a>00921                 constructionBitstream-&gt;Write(file_url);
<a name="l00922"></a>00922         }
<a name="l00923"></a><a class="code" href="class_beaming_room.html#a52901008f4341d3b6343eabc88943f54">00923</a>         <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="class_beaming_room.html#a52901008f4341d3b6343eabc88943f54">DeserializeConstruction</a>(RakNet::BitStream *constructionBitstream, RakNet::Connection_RM3 *sourceConnection) { 
<a name="l00924"></a>00924                 constructionBitstream-&gt;Read(clientname);
<a name="l00925"></a>00925                 constructionBitstream-&gt;Read(clientType);
<a name="l00926"></a>00926                 constructionBitstream-&gt;Read(clientConfig);
<a name="l00927"></a>00927                 constructionBitstream-&gt;Read(ip_port);
<a name="l00928"></a>00928                 constructionBitstream-&gt;Read(hostname);
<a name="l00929"></a>00929                 <span class="keywordflow">if</span> (<a class="code" href="_client_server_8h.html#ad9b4d2b6bfe35238ad017f255ce6d0a1">topology</a> == <a class="code" href="_client_server_8h.html#a06fc87d81c62e9abb8790b6e5713c55ba67c96b24b23bcb408bae7626730a04b7">SERVER</a>)
<a name="l00930"></a>00930                 {
<a name="l00931"></a>00931                         printf(<span class="stringliteral">&quot;Connection from host: %s, ip: %s\n&quot;</span>,hostname,sourceConnection-&gt;GetSystemAddress().ToString());
<a name="l00932"></a>00932                         sprintf(ip_port,<span class="stringliteral">&quot;%s&quot;</span>,sourceConnection-&gt;GetSystemAddress().ToString());
<a name="l00933"></a>00933 
<a name="l00934"></a>00934                 } <span class="keywordflow">else</span> {
<a name="l00935"></a>00935                         printf(<span class="stringliteral">&quot;Connection from host: %s\n&quot;</span>,hostname); }
<a name="l00936"></a>00936                 constructionBitstream-&gt;Read(file_url);
<a name="l00937"></a>00937                 <a class="code" href="_client_server_8h.html#a23ccb3d0e9aaae919d32876ed291503e">new_clients</a>[this-&gt;GetCreatingSystemGUID()].push_back(clientname);
<a name="l00938"></a>00938                 <a class="code" href="_client_server_8h.html#a23ccb3d0e9aaae919d32876ed291503e">new_clients</a>[this-&gt;GetCreatingSystemGUID()].push_back(clientType);
<a name="l00939"></a>00939                 <a class="code" href="_client_server_8h.html#a23ccb3d0e9aaae919d32876ed291503e">new_clients</a>[this-&gt;GetCreatingSystemGUID()].push_back(clientConfig);
<a name="l00940"></a>00940                 <span class="keywordflow">return</span> <span class="keyword">true</span>; 
<a name="l00941"></a>00941         }
<a name="l00942"></a><a class="code" href="class_beaming_room.html#a051e82d4430fa78d95a6330eb7e886da">00942</a>         <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="class_beaming_room.html#a051e82d4430fa78d95a6330eb7e886da">SerializeDestruction</a>(RakNet::BitStream *destructionBitstream, RakNet::Connection_RM3 *destinationConnection) { }
<a name="l00943"></a><a class="code" href="class_beaming_room.html#aed9807b83c06f5dc8b70c117ef18d90d">00943</a>         <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="class_beaming_room.html#aed9807b83c06f5dc8b70c117ef18d90d">DeserializeDestruction</a>(RakNet::BitStream *destructionBitstream, RakNet::Connection_RM3 *sourceConnection) { <span class="keywordflow">return</span> <span class="keyword">true</span>; }
<a name="l00944"></a><a class="code" href="class_beaming_room.html#a8fe78068fd34dcbf4b5760df3270cd16">00944</a>         <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="class_beaming_room.html#a8fe78068fd34dcbf4b5760df3270cd16">DeallocReplica</a>(RakNet::Connection_RM3 *sourceConnection) { <span class="keyword">delete</span> <span class="keyword">this</span>; }
<a name="l00945"></a><a class="code" href="class_beaming_room.html#a80bb63abb132e065278b7a580bbd25e9">00945</a>         <span class="keyword">virtual</span> RM3SerializationResult <a class="code" href="class_beaming_room.html#a80bb63abb132e065278b7a580bbd25e9">Serialize</a>(SerializeParameters *serializeParameters)      {
<a name="l00946"></a>00946                 <span class="keywordflow">return</span> RM3SR_BROADCAST_IDENTICALLY;
<a name="l00947"></a>00947         }
<a name="l00948"></a><a class="code" href="class_beaming_room.html#af23542f8315fcfff160368016432a04d">00948</a>         <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="class_beaming_room.html#af23542f8315fcfff160368016432a04d">Deserialize</a>(RakNet::DeserializeParameters *deserializeParameters) { }
<a name="l00949"></a><a class="code" href="class_beaming_room.html#ad50b5e12778ef0920857ded7a8ae86de">00949</a>         <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="class_beaming_room.html#ad50b5e12778ef0920857ded7a8ae86de">SerializeConstructionRequestAccepted</a>(RakNet::BitStream *serializationBitstream, RakNet::Connection_RM3 *requestingConnection)      { }
<a name="l00950"></a><a class="code" href="class_beaming_room.html#aa99783e0c8e17d333ab97f8e8b146c3d">00950</a>         <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="class_beaming_room.html#aa99783e0c8e17d333ab97f8e8b146c3d">DeserializeConstructionRequestAccepted</a>(RakNet::BitStream *serializationBitstream, RakNet::Connection_RM3 *acceptingConnection) { }
<a name="l00951"></a><a class="code" href="class_beaming_room.html#a9db3d19cc500671744173928a1827b5d">00951</a>         <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="class_beaming_room.html#a9db3d19cc500671744173928a1827b5d">SerializeConstructionRequestRejected</a>(RakNet::BitStream *serializationBitstream, RakNet::Connection_RM3 *requestingConnection)      { }
<a name="l00952"></a><a class="code" href="class_beaming_room.html#a2ae1a0ca42d071cbe2f45916cbd1aa4b">00952</a>         <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="class_beaming_room.html#a2ae1a0ca42d071cbe2f45916cbd1aa4b">DeserializeConstructionRequestRejected</a>(RakNet::BitStream *serializationBitstream, RakNet::Connection_RM3 *rejectingConnection) { }
<a name="l00953"></a><a class="code" href="class_beaming_room.html#a8f5c2da3a8e838e97fae720a48b21b2d">00953</a>         <span class="keyword">virtual</span> RM3ConstructionState <a class="code" href="class_beaming_room.html#a8f5c2da3a8e838e97fae720a48b21b2d">QueryConstruction</a>(RakNet::Connection_RM3 *destinationConnection, ReplicaManager3 *replicaManager3) {
<a name="l00954"></a>00954                         <span class="keywordflow">return</span> QueryConstruction_ClientConstruction(destinationConnection);
<a name="l00955"></a>00955         }
<a name="l00956"></a><a class="code" href="class_beaming_room.html#a08d3a7511209f8be9c31f461dbd3c5b8">00956</a>         <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="class_beaming_room.html#a08d3a7511209f8be9c31f461dbd3c5b8">QueryRemoteConstruction</a>(RakNet::Connection_RM3 *sourceConnection) {
<a name="l00957"></a>00957                         <span class="keywordflow">return</span> QueryRemoteConstruction_ClientConstruction(sourceConnection);
<a name="l00958"></a>00958         }
<a name="l00959"></a>00959 
<a name="l00960"></a><a class="code" href="class_beaming_room.html#ae44506c88e36bfcb245cd862a09e2415">00960</a>         <span class="keyword">virtual</span> RM3QuerySerializationResult <a class="code" href="class_beaming_room.html#ae44506c88e36bfcb245cd862a09e2415">QuerySerialization</a>(RakNet::Connection_RM3 *destinationConnection) {
<a name="l00961"></a>00961                         <span class="keywordflow">return</span> QuerySerialization_ClientSerializable(destinationConnection);
<a name="l00962"></a>00962         }
<a name="l00963"></a><a class="code" href="class_beaming_room.html#a5bf5700b12fb5ce1b91a787983ec92cf">00963</a>         <span class="keyword">virtual</span> RM3ActionOnPopConnection <a class="code" href="class_beaming_room.html#a5bf5700b12fb5ce1b91a787983ec92cf">QueryActionOnPopConnection</a>(RakNet::Connection_RM3 *droppedConnection)<span class="keyword"> const </span>{
<a name="l00964"></a>00964                 <span class="keywordflow">if</span> (<a class="code" href="_client_server_8h.html#ad9b4d2b6bfe35238ad017f255ce6d0a1">topology</a>==<a class="code" href="_client_server_8h.html#a06fc87d81c62e9abb8790b6e5713c55ba67c96b24b23bcb408bae7626730a04b7">SERVER</a>)
<a name="l00965"></a>00965                         <span class="keywordflow">return</span> QueryActionOnPopConnection_Server(droppedConnection);
<a name="l00966"></a>00966                 <span class="keywordflow">else</span>
<a name="l00967"></a>00967                         <span class="keywordflow">return</span> QueryActionOnPopConnection_Client(droppedConnection);
<a name="l00968"></a>00968         }
<a name="l00969"></a>00969 
<a name="l00970"></a><a class="code" href="class_beaming_room.html#ad70622a475a88e7a9197d381c83d0c4d">00970</a>         <span class="keywordtype">char</span> clientname[128];
<a name="l00971"></a><a class="code" href="class_beaming_room.html#a7fdd491265053b6744ce2d0771018a5c">00971</a>         <span class="keywordtype">char</span> clientConfig[128];
<a name="l00972"></a><a class="code" href="class_beaming_room.html#ad5c5870606bd59c0a233b687af73ec8a">00972</a>         <span class="keywordtype">char</span> clientType[128];
<a name="l00973"></a><a class="code" href="class_beaming_room.html#a78ae034233bcb28152ea70896edb9d46">00973</a>         <span class="keywordtype">char</span> hostname[128];
<a name="l00974"></a><a class="code" href="class_beaming_room.html#aa9ab8fdaf95f74be1f74b6e97efc5bc5">00974</a>         <span class="keywordtype">char</span> host[128];
<a name="l00975"></a><a class="code" href="class_beaming_room.html#aa08457cfc3deb174954e0fb7f03918a6">00975</a>         <span class="keywordtype">int</span> <a class="code" href="class_beaming_room.html#aa08457cfc3deb174954e0fb7f03918a6">port</a>;
<a name="l00976"></a><a class="code" href="class_beaming_room.html#acfd20fa26696359edf0e8f7fd1901540">00976</a>         <span class="keywordtype">char</span> file_url[128];
<a name="l00977"></a><a class="code" href="class_beaming_room.html#ac5f62c4a64ba64ae4d7cb8223e4df6ea">00977</a>         <span class="keywordtype">char</span> logstr[1024];
<a name="l00978"></a><a class="code" href="class_beaming_room.html#a546dc3dd5e3624da05ca4b3b3eb88748">00978</a>         <span class="keywordtype">char</span> localtime[128];
<a name="l00979"></a><a class="code" href="class_beaming_room.html#aa3a2f63a3019ecf7ca85116e1f8e15b7">00979</a>         <span class="keywordtype">char</span> ip_port[128];
<a name="l00980"></a>00980 
<a name="l00981"></a><a class="code" href="class_beaming_room.html#a1be24f4b0126b0aa24cb134a0d0df9d4">00981</a>         <a class="code" href="class_beaming_room.html#a1be24f4b0126b0aa24cb134a0d0df9d4">BeamingRoom</a>() { }
<a name="l00982"></a>00982 
<a name="l00983"></a><a class="code" href="class_beaming_room.html#ade35e3304cdd67ac0ef87dd759b7bce5">00983</a>         <span class="keyword">virtual</span> <a class="code" href="class_beaming_room.html#ade35e3304cdd67ac0ef87dd759b7bce5">~BeamingRoom</a>() { 
<a name="l00984"></a>00984                 <span class="keywordflow">if</span> (<a class="code" href="_client_server_8h.html#ad9b4d2b6bfe35238ad017f255ce6d0a1">topology</a>==<a class="code" href="_client_server_8h.html#a06fc87d81c62e9abb8790b6e5713c55ba67c96b24b23bcb408bae7626730a04b7">SERVER</a>)
<a name="l00985"></a>00985                         BroadcastDestruction();
<a name="l00986"></a>00986         }
<a name="l00987"></a>00987 };
<a name="l00988"></a>00988 
<a name="l00989"></a>00989 
<a name="l00990"></a>00990 
<a name="l00992"></a><a class="code" href="class_beaming_object_replica.html">00992</a> <span class="keyword">class </span><a class="code" href="class_beaming_object_replica.html" title="Object Replica - 3D Models.">BeamingObjectReplica</a> : <span class="keyword">public</span> <a class="code" href="class_beaming_room.html" title="Room Replica (destination)">BeamingRoom</a>
<a name="l00993"></a>00993 {
<a name="l00994"></a>00994         <span class="keyword">virtual</span> RakNet::RakString GetName(<span class="keywordtype">void</span>)<span class="keyword"> const </span>{<span class="keywordflow">return</span> RakNet::RakString(<span class="stringliteral">&quot;OBJECT&quot;</span>);}
<a name="l00995"></a>00995         <span class="keyword">virtual</span> <span class="keywordtype">void</span> WriteAllocationID(RakNet::BitStream *allocationIdBitstream)<span class="keyword"> const </span>{
<a name="l00996"></a>00996                 allocationIdBitstream-&gt;Write(GetName());
<a name="l00997"></a>00997         }
<a name="l00998"></a>00998         <span class="keyword">virtual</span> <span class="keywordtype">void</span> SerializeConstruction(RakNet::BitStream *constructionBitstream, RakNet::Connection_RM3 *destinationConnection)     {
<a name="l00999"></a>00999                 <a class="code" href="class_beaming_room.html#af1ac8f8543885b3b3dabfe08e160e860">BeamingRoom::SerializeConstruction</a>(constructionBitstream, destinationConnection);
<a name="l01000"></a>01000                 constructionBitstream-&gt;Write(GetName() + RakNet::RakString(object_id) + RakNet::RakString(<span class="stringliteral">&quot; created for guid &quot;</span>) + RakNet::RakString(this-&gt;GetCreatingSystemGUID().ToString()));
<a name="l01001"></a>01001                 constructionBitstream-&gt;Write(object_id);
<a name="l01002"></a>01002         }
<a name="l01003"></a>01003         <span class="keyword">virtual</span> <span class="keywordtype">bool</span> DeserializeConstruction(RakNet::BitStream *constructionBitstream, RakNet::Connection_RM3 *sourceConnection) {
<a name="l01004"></a>01004                 <span class="keywordflow">if</span> (!<a class="code" href="class_beaming_room.html#a52901008f4341d3b6343eabc88943f54">BeamingRoom::DeserializeConstruction</a>(constructionBitstream, sourceConnection))
<a name="l01005"></a>01005                         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l01006"></a>01006                 RakNetTimeMS time = RakNet::GetTime();
<a name="l01007"></a>01007                 PrintOutput(constructionBitstream);
<a name="l01008"></a>01008                 constructionBitstream-&gt;Read(object_id);
<a name="l01009"></a>01009                 printf(<span class="stringliteral">&quot;Client: %s, Type: %s, Config: %s, Node: %s\n&quot;</span>,clientname,clientType,clientConfig,object_id);
<a name="l01010"></a>01010                 <a class="code" href="_client_server_8h.html#aaac52d5fa5b61e29925ed124fe03d35d">object_replicas</a>[this-&gt;GetCreatingSystemGUID()].push_back(<span class="keyword">this</span>); <span class="comment">//create within map on new client connection</span>
<a name="l01011"></a>01011                 thisnode = <span class="keyword">new</span> <a class="code" href="structnode__info.html">node_info</a>;
<a name="l01012"></a>01012                 thisnode-&gt;<a class="code" href="structnode__info.html#a988e1ab3a75015487c4ec4437252a7c7">name</a>=object_id;
<a name="l01013"></a>01013                 thisnode-&gt;type=GetName().C_String();
<a name="l01014"></a>01014                 thisnode-&gt;peername = clientname;
<a name="l01015"></a>01015                 thisnode-&gt;peertype = clientType;
<a name="l01016"></a>01016                 thisnode-&gt;peercfg = clientConfig;
<a name="l01017"></a>01017                 thisnode-&gt;ipport = ip_port;
<a name="l01018"></a>01018                 <a class="code" href="_client_server_8h.html#aee6ed86d42821e392e49ae3ecb3f04b6">nodes_map</a>[this-&gt;GetCreatingSystemGUID().ToString()].push_back(thisnode);
<a name="l01019"></a>01019                 <span class="keywordflow">if</span> ((<a class="code" href="_client_server_8h.html#ad9b4d2b6bfe35238ad017f255ce6d0a1">topology</a>==<a class="code" href="_client_server_8h.html#a06fc87d81c62e9abb8790b6e5713c55ba67c96b24b23bcb408bae7626730a04b7">SERVER</a>)&amp;&amp;(<a class="code" href="_client_server_8h.html#af7883388f6a285534cba3f39404124d4">logging</a>==<span class="keyword">true</span>))
<a name="l01020"></a>01020                 {
<a name="l01021"></a>01021                         <span class="comment">//printf(&quot;%&quot;PRINTF_64_BIT_MODIFIER&quot;u: %s client created; rem %i\n&quot;,(unsigned long long)time,sourceConnection-&gt;GetRakNetGUID().ToString(),object_replicas.size());</span>
<a name="l01022"></a>01022                         <a class="code" href="_client_server_8h.html#a87a1f273fa8ad585520f9a5e5d071ec4">logfileHandler</a>.GetLocalTime(localtime);
<a name="l01023"></a>01023                         sprintf(logstr,<span class="stringliteral">&quot;C;%&quot;</span>PRINTF_64_BIT_MODIFIER<span class="stringliteral">&quot;u;%s;%s;0;%i&quot;</span>,(<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keywordtype">long</span>)time,localtime,sourceConnection-&gt;GetRakNetGUID().ToString(),<a class="code" href="_client_server_8h.html#aaac52d5fa5b61e29925ed124fe03d35d">object_replicas</a>.size());
<a name="l01024"></a>01024                         <a class="code" href="_client_server_8h.html#a87a1f273fa8ad585520f9a5e5d071ec4">logfileHandler</a>.WriteLog(logstr);
<a name="l01025"></a>01025                 }
<a name="l01026"></a>01026                 <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l01027"></a>01027         }
<a name="l01028"></a>01028         <span class="keyword">virtual</span> <span class="keywordtype">void</span> SerializeDestruction(RakNet::BitStream *destructionBitstream, RakNet::Connection_RM3 *destinationConnection)       {
<a name="l01029"></a>01029                 <a class="code" href="class_beaming_room.html#a051e82d4430fa78d95a6330eb7e886da">BeamingRoom::SerializeDestruction</a>(destructionBitstream, destinationConnection);
<a name="l01030"></a>01030                 destructionBitstream-&gt;Write(GetName() + RakNet::RakString(object_id) + RakNet::RakString(<span class="stringliteral">&quot; removed for guid &quot;</span>) + RakNet::RakString(this-&gt;GetCreatingSystemGUID().ToString()));
<a name="l01031"></a>01031         }
<a name="l01032"></a>01032         <span class="keyword">virtual</span> <span class="keywordtype">bool</span> DeserializeDestruction(RakNet::BitStream *destructionBitstream, RakNet::Connection_RM3 *sourceConnection) {
<a name="l01033"></a>01033                 <span class="keywordflow">if</span> (!<a class="code" href="class_beaming_room.html#aed9807b83c06f5dc8b70c117ef18d90d">BeamingRoom::DeserializeDestruction</a>(destructionBitstream, sourceConnection))
<a name="l01034"></a>01034                         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l01035"></a>01035                 RakNetTimeMS time = RakNet::GetTime();
<a name="l01036"></a>01036                 PrintOutput(destructionBitstream);
<a name="l01037"></a>01037                 <a class="code" href="_client_server_8h.html#aaac52d5fa5b61e29925ed124fe03d35d">object_replicas</a>.erase(this-&gt;GetCreatingSystemGUID()); <span class="comment">//erase from map on client disconnection</span>
<a name="l01038"></a>01038                 <a class="code" href="_client_server_8h.html#aee6ed86d42821e392e49ae3ecb3f04b6">nodes_map</a>.erase(this-&gt;GetCreatingSystemGUID().ToString());
<a name="l01039"></a>01039                 <a class="code" href="_client_server_8h.html#a23ccb3d0e9aaae919d32876ed291503e">new_clients</a>.erase(this-&gt;GetCreatingSystemGUID()); <span class="comment">//deprecated</span>
<a name="l01040"></a>01040                 <span class="keywordflow">if</span> ((<a class="code" href="_client_server_8h.html#ad9b4d2b6bfe35238ad017f255ce6d0a1">topology</a>==<a class="code" href="_client_server_8h.html#a06fc87d81c62e9abb8790b6e5713c55ba67c96b24b23bcb408bae7626730a04b7">SERVER</a>)&amp;&amp;(<a class="code" href="_client_server_8h.html#af7883388f6a285534cba3f39404124d4">logging</a>==<span class="keyword">true</span>))
<a name="l01041"></a>01041                 {
<a name="l01042"></a>01042                         <span class="comment">//printf(&quot;%&quot;PRINTF_64_BIT_MODIFIER&quot;u: %s client deleted; rem %i\n&quot;,(unsigned long long)time,sourceConnection-&gt;GetRakNetGUID().ToString(),object_replicas.size());</span>
<a name="l01043"></a>01043                         <a class="code" href="_client_server_8h.html#a87a1f273fa8ad585520f9a5e5d071ec4">logfileHandler</a>.GetLocalTime(localtime);
<a name="l01044"></a>01044                         sprintf(logstr,<span class="stringliteral">&quot;D;%&quot;</span>PRINTF_64_BIT_MODIFIER<span class="stringliteral">&quot;u;%s;%s;0;%i&quot;</span>,(<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keywordtype">long</span>)time,localtime,sourceConnection-&gt;GetRakNetGUID().ToString(),<a class="code" href="_client_server_8h.html#aaac52d5fa5b61e29925ed124fe03d35d">object_replicas</a>.size());
<a name="l01045"></a>01045                         <a class="code" href="_client_server_8h.html#a87a1f273fa8ad585520f9a5e5d071ec4">logfileHandler</a>.WriteLog(logstr);
<a name="l01046"></a>01046                 }
<a name="l01047"></a>01047                 <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l01048"></a>01048         }
<a name="l01049"></a>01049         <span class="keyword">virtual</span> <span class="keywordtype">void</span> DeallocReplica(RakNet::Connection_RM3 *sourceConnection) {
<a name="l01050"></a>01050                 <span class="keyword">delete</span> <span class="keyword">this</span>;
<a name="l01051"></a>01051         }
<a name="l01052"></a>01052         <span class="keyword">virtual</span> RM3SerializationResult Serialize(SerializeParameters *serializeParameters)      {
<a name="l01053"></a>01053                 <a class="code" href="class_beaming_room.html#a80bb63abb132e065278b7a580bbd25e9">BeamingRoom::Serialize</a>(serializeParameters);
<a name="l01054"></a>01054                 RakNetTimeMS time = RakNet::GetTime();
<a name="l01055"></a>01055                 serializeParameters-&gt;outputBitstream[0].WriteAlignedBytes((<span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>*)&amp;position,<span class="keyword">sizeof</span>(position));
<a name="l01056"></a>01056                 serializeParameters-&gt;outputBitstream[0].WriteAlignedBytes((<span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>*)&amp;orientation,<span class="keyword">sizeof</span>(orientation));
<a name="l01057"></a>01057                 <span class="keywordflow">return</span> RM3SR_BROADCAST_IDENTICALLY;
<a name="l01058"></a>01058         }
<a name="l01059"></a>01059         <span class="keyword">virtual</span> <span class="keywordtype">void</span> Deserialize(RakNet::DeserializeParameters *deserializeParameters) {
<a name="l01060"></a>01060                 <a class="code" href="class_beaming_room.html#af23542f8315fcfff160368016432a04d">BeamingRoom::Deserialize</a>(deserializeParameters);
<a name="l01061"></a>01061                 RakNetTimeMS time = RakNet::GetTime();
<a name="l01062"></a>01062                 deserializeParameters-&gt;serializationBitstream[0].ReadAlignedBytes((<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>*)&amp;position,<span class="keyword">sizeof</span>(position));
<a name="l01063"></a>01063                 deserializeParameters-&gt;serializationBitstream[0].ReadAlignedBytes((<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>*)&amp;orientation,<span class="keyword">sizeof</span>(orientation));
<a name="l01064"></a>01064                 <span class="comment">//printf(&quot;%&quot;PRINTF_64_BIT_MODIFIER&quot;u: %s %s %s %s %s - %.3f %.3f %.3f %.3f %.3f %.3f %.3f\n&quot;,(unsigned long long)time,clientname,this-&gt;GetCreatingSystemGUID().ToString(),clientType,clientConfig,object_id,position.x,position.y,position.z,orientation.x,orientation.y,orientation.z,orientation.w);</span>
<a name="l01065"></a>01065                 <span class="keywordflow">if</span> ((<a class="code" href="_client_server_8h.html#ad9b4d2b6bfe35238ad017f255ce6d0a1">topology</a>==<a class="code" href="_client_server_8h.html#a06fc87d81c62e9abb8790b6e5713c55ba67c96b24b23bcb408bae7626730a04b7">SERVER</a>)&amp;&amp;(<a class="code" href="_client_server_8h.html#af7883388f6a285534cba3f39404124d4">logging</a>==<span class="keyword">true</span>))<span class="comment">//logging on server</span>
<a name="l01066"></a>01066                 {
<a name="l01067"></a>01067                                 <a class="code" href="_client_server_8h.html#a87a1f273fa8ad585520f9a5e5d071ec4">logfileHandler</a>.GetLocalTime(localtime);
<a name="l01068"></a>01068                                 sprintf(logstr,<span class="stringliteral">&quot;M;%&quot;</span>PRINTF_64_BIT_MODIFIER<span class="stringliteral">&quot;u;%s;%s;%s;%s;%s;%s;%.3f;%.3f;%.3f;%.3f;%.3f;%.3f;%.3f&quot;</span>,(<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keywordtype">long</span>)time,localtime,clientname,this-&gt;GetCreatingSystemGUID().ToString(),clientType,clientConfig,object_id,position.x,position.y,position.z,orientation.x,orientation.y,orientation.z,orientation.w);
<a name="l01069"></a>01069                                 <a class="code" href="_client_server_8h.html#a87a1f273fa8ad585520f9a5e5d071ec4">logfileHandler</a>.WriteLog(logstr); <span class="comment">//writes additional lines</span>
<a name="l01070"></a>01070                 }
<a name="l01071"></a>01071         }
<a name="l01072"></a>01072         <span class="keyword">virtual</span> <span class="keywordtype">void</span> SerializeConstructionRequestAccepted(RakNet::BitStream *serializationBitstream, RakNet::Connection_RM3 *requestingConnection)      {
<a name="l01073"></a>01073                 serializationBitstream-&gt;Write(GetName() + RakNet::RakString(object_id) + RakNet::RakString(<span class="stringliteral">&quot; created on server&quot;</span>));
<a name="l01074"></a>01074         }
<a name="l01075"></a>01075         <span class="keyword">virtual</span> <span class="keywordtype">void</span> DeserializeConstructionRequestAccepted(RakNet::BitStream *serializationBitstream, RakNet::Connection_RM3 *acceptingConnection) {
<a name="l01076"></a>01076                 PrintOutput(serializationBitstream);
<a name="l01077"></a>01077         }
<a name="l01078"></a>01078         <span class="keyword">virtual</span> <span class="keywordtype">void</span> SerializeConstructionRequestRejected(RakNet::BitStream *serializationBitstream, RakNet::Connection_RM3 *requestingConnection)      {
<a name="l01079"></a>01079                 serializationBitstream-&gt;Write(GetName() + RakNet::RakString(object_id) + RakNet::RakString(<span class="stringliteral">&quot; not created on server&quot;</span>));
<a name="l01080"></a>01080         }
<a name="l01081"></a>01081         <span class="keyword">virtual</span> <span class="keywordtype">void</span> DeserializeConstructionRequestRejected(RakNet::BitStream *serializationBitstream, RakNet::Connection_RM3 *rejectingConnection) {
<a name="l01082"></a>01082                 PrintOutput(serializationBitstream);
<a name="l01083"></a>01083         }
<a name="l01084"></a>01084 
<a name="l01085"></a>01085 <span class="keyword">public</span>:
<a name="l01086"></a><a class="code" href="class_beaming_object_replica.html#ac826773858b0997c1fad5206240e4153">01086</a>         <span class="keywordtype">char</span> object_id[128];
<a name="l01087"></a><a class="code" href="class_beaming_object_replica.html#a6efc93c16991d852be7fffe0aaad76c2">01087</a>         <a class="code" href="class_c_vec3.html">CVec3</a> <a class="code" href="class_beaming_object_replica.html#a6efc93c16991d852be7fffe0aaad76c2">position</a>;
<a name="l01088"></a><a class="code" href="class_beaming_object_replica.html#a6adbcaf116a2e8b75a99bdfa4967754a">01088</a>         <a class="code" href="class_c_quat.html" title="math helper class for quaternions">CQuat</a> <a class="code" href="class_beaming_object_replica.html#a6adbcaf116a2e8b75a99bdfa4967754a">orientation</a>;
<a name="l01089"></a><a class="code" href="class_beaming_object_replica.html#a3a776e528cb39b4358709068b0c81112">01089</a>         <a class="code" href="structnode__info.html">node_info</a> *<a class="code" href="class_beaming_object_replica.html#a3a776e528cb39b4358709068b0c81112">thisnode</a>;
<a name="l01090"></a>01090 
<a name="l01091"></a><a class="code" href="class_beaming_object_replica.html#aefbd2d07fed6ef43c4e9f3d4eb651b26">01091</a>         <a class="code" href="class_beaming_object_replica.html#aefbd2d07fed6ef43c4e9f3d4eb651b26">BeamingObjectReplica</a>() { }
<a name="l01092"></a>01092 
<a name="l01093"></a><a class="code" href="class_beaming_object_replica.html#af94616df18f9d03eb396cbede34c6c0f">01093</a>         <span class="keyword">virtual</span> <a class="code" href="class_beaming_object_replica.html#af94616df18f9d03eb396cbede34c6c0f">~BeamingObjectReplica</a>() { }
<a name="l01094"></a>01094 };
<a name="l01095"></a>01095 
<a name="l01096"></a>01096 
<a name="l01098"></a><a class="code" href="class_beaming_video_replica.html">01098</a> <span class="keyword">class </span><a class="code" href="class_beaming_video_replica.html" title="Video Replica.">BeamingVideoReplica</a> : <span class="keyword">public</span> <a class="code" href="class_beaming_room.html" title="Room Replica (destination)">BeamingRoom</a>
<a name="l01099"></a>01099 {
<a name="l01100"></a>01100         <span class="keyword">virtual</span> RakNet::RakString GetName(<span class="keywordtype">void</span>)<span class="keyword"> const </span>{<span class="keywordflow">return</span> RakNet::RakString(<span class="stringliteral">&quot;VIDEO&quot;</span>);}
<a name="l01101"></a>01101         <span class="keyword">virtual</span> <span class="keywordtype">void</span> WriteAllocationID(RakNet::BitStream *allocationIdBitstream)<span class="keyword"> const </span>{
<a name="l01102"></a>01102                 allocationIdBitstream-&gt;Write(GetName());
<a name="l01103"></a>01103         }
<a name="l01104"></a>01104         <span class="keyword">virtual</span> <span class="keywordtype">void</span> SerializeConstruction(RakNet::BitStream *constructionBitstream, RakNet::Connection_RM3 *destinationConnection)     {
<a name="l01105"></a>01105                 <a class="code" href="class_beaming_room.html#af1ac8f8543885b3b3dabfe08e160e860">BeamingRoom::SerializeConstruction</a>(constructionBitstream, destinationConnection);
<a name="l01106"></a>01106                 constructionBitstream-&gt;Write(GetName() + RakNet::RakString(video_id) + RakNet::RakString(<span class="stringliteral">&quot; created for guid &quot;</span>) + RakNet::RakString(this-&gt;GetCreatingSystemGUID().ToString()));
<a name="l01107"></a>01107                 constructionBitstream-&gt;Write(video_id);
<a name="l01108"></a>01108         }
<a name="l01109"></a>01109         <span class="keyword">virtual</span> <span class="keywordtype">bool</span> DeserializeConstruction(RakNet::BitStream *constructionBitstream, RakNet::Connection_RM3 *sourceConnection) {
<a name="l01110"></a>01110                 <span class="keywordflow">if</span> (!<a class="code" href="class_beaming_room.html#a52901008f4341d3b6343eabc88943f54">BeamingRoom::DeserializeConstruction</a>(constructionBitstream, sourceConnection))
<a name="l01111"></a>01111                         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l01112"></a>01112                 RakNetTimeMS time = RakNet::GetTime();
<a name="l01113"></a>01113                 PrintOutput(constructionBitstream);
<a name="l01114"></a>01114                 constructionBitstream-&gt;Read(video_id);
<a name="l01115"></a>01115                 printf(<span class="stringliteral">&quot;Client: %s, Type: %s, Config: %s, Node: %s\n&quot;</span>,clientname,clientType,clientConfig,video_id);
<a name="l01116"></a>01116                 <a class="code" href="_client_server_8h.html#a0b1a936c33cf846d256dd0a4f8cab0de">video_replicas</a>[this-&gt;GetCreatingSystemGUID()].push_back(<span class="keyword">this</span>); <span class="comment">//create within map on new client connection</span>
<a name="l01117"></a>01117                 thisnode = <span class="keyword">new</span> <a class="code" href="structnode__info.html">node_info</a>;
<a name="l01118"></a>01118                 thisnode-&gt;<a class="code" href="structnode__info.html#a988e1ab3a75015487c4ec4437252a7c7">name</a>=video_id;
<a name="l01119"></a>01119                 thisnode-&gt;type=GetName().C_String();
<a name="l01120"></a>01120                 thisnode-&gt;peername = clientname;
<a name="l01121"></a>01121                 thisnode-&gt;peertype = clientType;
<a name="l01122"></a>01122                 thisnode-&gt;peercfg = clientConfig;
<a name="l01123"></a>01123                 thisnode-&gt;ipport = ip_port;
<a name="l01124"></a>01124                 <a class="code" href="_client_server_8h.html#aee6ed86d42821e392e49ae3ecb3f04b6">nodes_map</a>[this-&gt;GetCreatingSystemGUID().ToString()].push_back(thisnode);
<a name="l01125"></a>01125                 <span class="keywordflow">if</span> ((<a class="code" href="_client_server_8h.html#ad9b4d2b6bfe35238ad017f255ce6d0a1">topology</a>==<a class="code" href="_client_server_8h.html#a06fc87d81c62e9abb8790b6e5713c55ba67c96b24b23bcb408bae7626730a04b7">SERVER</a>)&amp;&amp;(<a class="code" href="_client_server_8h.html#af7883388f6a285534cba3f39404124d4">logging</a>==<span class="keyword">true</span>))
<a name="l01126"></a>01126                 {
<a name="l01127"></a>01127                         <span class="comment">//printf(&quot;%&quot;PRINTF_64_BIT_MODIFIER&quot;u: %s client created; rem %i\n&quot;,(unsigned long long)time,sourceConnection-&gt;GetRakNetGUID().ToString(),video_replicas.size());</span>
<a name="l01128"></a>01128                         <a class="code" href="_client_server_8h.html#a87a1f273fa8ad585520f9a5e5d071ec4">logfileHandler</a>.GetLocalTime(localtime);
<a name="l01129"></a>01129                         sprintf(logstr,<span class="stringliteral">&quot;C;%&quot;</span>PRINTF_64_BIT_MODIFIER<span class="stringliteral">&quot;u;%s;%s;0;%i&quot;</span>,(<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keywordtype">long</span>)time,localtime,sourceConnection-&gt;GetRakNetGUID().ToString(),<a class="code" href="_client_server_8h.html#a0b1a936c33cf846d256dd0a4f8cab0de">video_replicas</a>.size());
<a name="l01130"></a>01130                         <a class="code" href="_client_server_8h.html#a87a1f273fa8ad585520f9a5e5d071ec4">logfileHandler</a>.WriteLog(logstr);
<a name="l01131"></a>01131                 }
<a name="l01132"></a>01132                 <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l01133"></a>01133         }
<a name="l01134"></a>01134         <span class="keyword">virtual</span> <span class="keywordtype">void</span> SerializeDestruction(RakNet::BitStream *destructionBitstream, RakNet::Connection_RM3 *destinationConnection)       {
<a name="l01135"></a>01135                 <a class="code" href="class_beaming_room.html#a051e82d4430fa78d95a6330eb7e886da">BeamingRoom::SerializeDestruction</a>(destructionBitstream, destinationConnection);
<a name="l01136"></a>01136                 destructionBitstream-&gt;Write(GetName() + RakNet::RakString(video_id) + RakNet::RakString(<span class="stringliteral">&quot; removed for guid &quot;</span>) + RakNet::RakString(this-&gt;GetCreatingSystemGUID().ToString()));
<a name="l01137"></a>01137         }
<a name="l01138"></a>01138         <span class="keyword">virtual</span> <span class="keywordtype">bool</span> DeserializeDestruction(RakNet::BitStream *destructionBitstream, RakNet::Connection_RM3 *sourceConnection) {
<a name="l01139"></a>01139                 <span class="keywordflow">if</span> (!<a class="code" href="class_beaming_room.html#aed9807b83c06f5dc8b70c117ef18d90d">BeamingRoom::DeserializeDestruction</a>(destructionBitstream, sourceConnection))
<a name="l01140"></a>01140                         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l01141"></a>01141                 RakNetTimeMS time = RakNet::GetTime();
<a name="l01142"></a>01142                 PrintOutput(destructionBitstream);
<a name="l01143"></a>01143                 <a class="code" href="_client_server_8h.html#a0b1a936c33cf846d256dd0a4f8cab0de">video_replicas</a>.erase(this-&gt;GetCreatingSystemGUID()); <span class="comment">//erase from map on client disconnection</span>
<a name="l01144"></a>01144                 <a class="code" href="_client_server_8h.html#aee6ed86d42821e392e49ae3ecb3f04b6">nodes_map</a>.erase(this-&gt;GetCreatingSystemGUID().ToString());
<a name="l01145"></a>01145                 <a class="code" href="_client_server_8h.html#a23ccb3d0e9aaae919d32876ed291503e">new_clients</a>.erase(this-&gt;GetCreatingSystemGUID()); <span class="comment">//deprecated</span>
<a name="l01146"></a>01146                 <span class="keywordflow">if</span> ((<a class="code" href="_client_server_8h.html#ad9b4d2b6bfe35238ad017f255ce6d0a1">topology</a>==<a class="code" href="_client_server_8h.html#a06fc87d81c62e9abb8790b6e5713c55ba67c96b24b23bcb408bae7626730a04b7">SERVER</a>)&amp;&amp;(<a class="code" href="_client_server_8h.html#af7883388f6a285534cba3f39404124d4">logging</a>==<span class="keyword">true</span>))
<a name="l01147"></a>01147                 {
<a name="l01148"></a>01148                         <span class="comment">//printf(&quot;%&quot;PRINTF_64_BIT_MODIFIER&quot;u: %s client deleted; rem %i\n&quot;,(unsigned long long)time,sourceConnection-&gt;GetRakNetGUID().ToString(),video_replicas.size());</span>
<a name="l01149"></a>01149                         <a class="code" href="_client_server_8h.html#a87a1f273fa8ad585520f9a5e5d071ec4">logfileHandler</a>.GetLocalTime(localtime);
<a name="l01150"></a>01150                         sprintf(logstr,<span class="stringliteral">&quot;D;%&quot;</span>PRINTF_64_BIT_MODIFIER<span class="stringliteral">&quot;u;%s;%s;0;%i&quot;</span>,(<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keywordtype">long</span>)time,localtime,sourceConnection-&gt;GetRakNetGUID().ToString(),<a class="code" href="_client_server_8h.html#a0b1a936c33cf846d256dd0a4f8cab0de">video_replicas</a>.size());
<a name="l01151"></a>01151                         <a class="code" href="_client_server_8h.html#a87a1f273fa8ad585520f9a5e5d071ec4">logfileHandler</a>.WriteLog(logstr);
<a name="l01152"></a>01152                 }
<a name="l01153"></a>01153                 <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l01154"></a>01154         }
<a name="l01155"></a>01155         <span class="keyword">virtual</span> <span class="keywordtype">void</span> DeallocReplica(RakNet::Connection_RM3 *sourceConnection) {
<a name="l01156"></a>01156                 <span class="keyword">delete</span> <span class="keyword">this</span>;
<a name="l01157"></a>01157         }
<a name="l01158"></a>01158         <span class="keyword">virtual</span> RM3SerializationResult Serialize(SerializeParameters *serializeParameters)      {
<a name="l01159"></a>01159                 <a class="code" href="class_beaming_room.html#a80bb63abb132e065278b7a580bbd25e9">BeamingRoom::Serialize</a>(serializeParameters);
<a name="l01160"></a>01160                 RakNetTimeMS time = RakNet::GetTime();
<a name="l01161"></a>01161                 serializeParameters-&gt;outputBitstream[0].WriteAlignedBytes((<span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>*)&amp;frame_width,<span class="keyword">sizeof</span>(frame_width));
<a name="l01162"></a>01162                 serializeParameters-&gt;outputBitstream[0].WriteAlignedBytes((<span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>*)&amp;frame_height,<span class="keyword">sizeof</span>(frame_height));
<a name="l01163"></a>01163                 serializeParameters-&gt;outputBitstream[0].WriteAlignedBytes((<span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>*)&amp;bandwidth,<span class="keyword">sizeof</span>(bandwidth));
<a name="l01164"></a>01164                 <span class="keywordflow">return</span> RM3SR_BROADCAST_IDENTICALLY;
<a name="l01165"></a>01165         }
<a name="l01166"></a>01166         <span class="keyword">virtual</span> <span class="keywordtype">void</span> Deserialize(RakNet::DeserializeParameters *deserializeParameters) {
<a name="l01167"></a>01167                 <a class="code" href="class_beaming_room.html#af23542f8315fcfff160368016432a04d">BeamingRoom::Deserialize</a>(deserializeParameters);
<a name="l01168"></a>01168                 RakNetTimeMS time = RakNet::GetTime();
<a name="l01169"></a>01169                 deserializeParameters-&gt;serializationBitstream[0].ReadAlignedBytes((<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>*)&amp;frame_width,<span class="keyword">sizeof</span>(frame_width));
<a name="l01170"></a>01170                 deserializeParameters-&gt;serializationBitstream[0].ReadAlignedBytes((<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>*)&amp;frame_height,<span class="keyword">sizeof</span>(frame_height));
<a name="l01171"></a>01171                 deserializeParameters-&gt;serializationBitstream[0].ReadAlignedBytes((<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>*)&amp;bandwidth,<span class="keyword">sizeof</span>(bandwidth));
<a name="l01172"></a>01172                 <span class="comment">//printf(&quot;%&quot;PRINTF_64_BIT_MODIFIER&quot;u: %s %s %s %s %s - %i %i %f\n&quot;,(unsigned long long)time,clientname,this-&gt;GetCreatingSystemGUID().ToString(),clientType,clientConfig,video_id,frame_width,frame_height,bandwidth);</span>
<a name="l01173"></a>01173                 <span class="keywordflow">if</span> ((<a class="code" href="_client_server_8h.html#ad9b4d2b6bfe35238ad017f255ce6d0a1">topology</a>==<a class="code" href="_client_server_8h.html#a06fc87d81c62e9abb8790b6e5713c55ba67c96b24b23bcb408bae7626730a04b7">SERVER</a>)&amp;&amp;(<a class="code" href="_client_server_8h.html#af7883388f6a285534cba3f39404124d4">logging</a>==<span class="keyword">true</span>))<span class="comment">//logging on server</span>
<a name="l01174"></a>01174                 {
<a name="l01175"></a>01175                                 <a class="code" href="_client_server_8h.html#a87a1f273fa8ad585520f9a5e5d071ec4">logfileHandler</a>.GetLocalTime(localtime);
<a name="l01176"></a>01176                                 sprintf(logstr,<span class="stringliteral">&quot;M;%&quot;</span>PRINTF_64_BIT_MODIFIER<span class="stringliteral">&quot;u;%s;%s;%s;%s;%s;%s;%i;%i;%f&quot;</span>,(<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keywordtype">long</span>)time,localtime,clientname,this-&gt;GetCreatingSystemGUID().ToString(),clientType,clientConfig,video_id,frame_width,frame_height,bandwidth);
<a name="l01177"></a>01177                                 <a class="code" href="_client_server_8h.html#a87a1f273fa8ad585520f9a5e5d071ec4">logfileHandler</a>.WriteLog(logstr); <span class="comment">//writes additional lines</span>
<a name="l01178"></a>01178                 }
<a name="l01179"></a>01179         }
<a name="l01180"></a>01180         <span class="keyword">virtual</span> <span class="keywordtype">void</span> SerializeConstructionRequestAccepted(RakNet::BitStream *serializationBitstream, RakNet::Connection_RM3 *requestingConnection)      {
<a name="l01181"></a>01181                 serializationBitstream-&gt;Write(GetName() + RakNet::RakString(video_id) + RakNet::RakString(<span class="stringliteral">&quot; created on server&quot;</span>));
<a name="l01182"></a>01182         }
<a name="l01183"></a>01183         <span class="keyword">virtual</span> <span class="keywordtype">void</span> DeserializeConstructionRequestAccepted(RakNet::BitStream *serializationBitstream, RakNet::Connection_RM3 *acceptingConnection) {
<a name="l01184"></a>01184                 PrintOutput(serializationBitstream);
<a name="l01185"></a>01185         }
<a name="l01186"></a>01186         <span class="keyword">virtual</span> <span class="keywordtype">void</span> SerializeConstructionRequestRejected(RakNet::BitStream *serializationBitstream, RakNet::Connection_RM3 *requestingConnection)      {
<a name="l01187"></a>01187                 serializationBitstream-&gt;Write(GetName() + RakNet::RakString(video_id) + RakNet::RakString(<span class="stringliteral">&quot; not created on server&quot;</span>));
<a name="l01188"></a>01188         }
<a name="l01189"></a>01189         <span class="keyword">virtual</span> <span class="keywordtype">void</span> DeserializeConstructionRequestRejected(RakNet::BitStream *serializationBitstream, RakNet::Connection_RM3 *rejectingConnection) {
<a name="l01190"></a>01190                 PrintOutput(serializationBitstream);
<a name="l01191"></a>01191         }
<a name="l01192"></a>01192 
<a name="l01193"></a>01193 <span class="keyword">public</span>:
<a name="l01194"></a><a class="code" href="class_beaming_video_replica.html#a622e05ef8f00ebed66e7ca5ef742e859">01194</a>         <span class="keywordtype">char</span> video_id[128];
<a name="l01195"></a><a class="code" href="class_beaming_video_replica.html#a582815b2400bea4b42dbf36618bee0d3">01195</a>         <span class="keywordtype">int</span> <a class="code" href="class_beaming_video_replica.html#a582815b2400bea4b42dbf36618bee0d3">frame_width</a>;
<a name="l01196"></a><a class="code" href="class_beaming_video_replica.html#a7b750b16fe46e1b29570f23bdf8a91a1">01196</a>         <span class="keywordtype">int</span> <a class="code" href="class_beaming_video_replica.html#a7b750b16fe46e1b29570f23bdf8a91a1">frame_height</a>;
<a name="l01197"></a><a class="code" href="class_beaming_video_replica.html#a4bcd0c1e427ecf9de3619d5baf589b96">01197</a>         <span class="keywordtype">double</span> <a class="code" href="class_beaming_video_replica.html#a4bcd0c1e427ecf9de3619d5baf589b96">bandwidth</a>;
<a name="l01198"></a><a class="code" href="class_beaming_video_replica.html#ab277d6e38994687a30f0e0762b311e27">01198</a>         <a class="code" href="structnode__info.html">node_info</a> *<a class="code" href="class_beaming_video_replica.html#ab277d6e38994687a30f0e0762b311e27">thisnode</a>;
<a name="l01199"></a>01199 
<a name="l01200"></a><a class="code" href="class_beaming_video_replica.html#af7d8bd9fbf1477f03dc0046eab061ebf">01200</a>         <a class="code" href="class_beaming_video_replica.html#af7d8bd9fbf1477f03dc0046eab061ebf">BeamingVideoReplica</a>() { }
<a name="l01201"></a>01201 
<a name="l01202"></a><a class="code" href="class_beaming_video_replica.html#a40d680570145142a3f3bd5e418fd5f16">01202</a>         <span class="keyword">virtual</span> <a class="code" href="class_beaming_video_replica.html#a40d680570145142a3f3bd5e418fd5f16">~BeamingVideoReplica</a>() { }
<a name="l01203"></a>01203 };
<a name="l01204"></a>01204 
<a name="l01205"></a>01205 
<a name="l01207"></a><a class="code" href="class_beaming_audio_replica.html">01207</a> <span class="keyword">class </span><a class="code" href="class_beaming_audio_replica.html" title="Audio Replica.">BeamingAudioReplica</a> : <span class="keyword">public</span> <a class="code" href="class_beaming_room.html" title="Room Replica (destination)">BeamingRoom</a>
<a name="l01208"></a>01208 {
<a name="l01209"></a>01209         <span class="keyword">virtual</span> RakNet::RakString GetName(<span class="keywordtype">void</span>)<span class="keyword"> const </span>{<span class="keywordflow">return</span> RakNet::RakString(<span class="stringliteral">&quot;AUDIO&quot;</span>);}
<a name="l01210"></a>01210         <span class="keyword">virtual</span> <span class="keywordtype">void</span> WriteAllocationID(RakNet::BitStream *allocationIdBitstream)<span class="keyword"> const </span>{
<a name="l01211"></a>01211                 allocationIdBitstream-&gt;Write(GetName());
<a name="l01212"></a>01212         }
<a name="l01213"></a>01213         <span class="keyword">virtual</span> <span class="keywordtype">void</span> SerializeConstruction(RakNet::BitStream *constructionBitstream, RakNet::Connection_RM3 *destinationConnection)     {
<a name="l01214"></a>01214                 <a class="code" href="class_beaming_room.html#af1ac8f8543885b3b3dabfe08e160e860">BeamingRoom::SerializeConstruction</a>(constructionBitstream, destinationConnection);
<a name="l01215"></a>01215                 constructionBitstream-&gt;Write(GetName() + RakNet::RakString(audio_id) + RakNet::RakString(<span class="stringliteral">&quot; created for guid &quot;</span>) + RakNet::RakString(this-&gt;GetCreatingSystemGUID().ToString()));
<a name="l01216"></a>01216                 constructionBitstream-&gt;Write(audio_id);
<a name="l01217"></a>01217         }
<a name="l01218"></a>01218         <span class="keyword">virtual</span> <span class="keywordtype">bool</span> DeserializeConstruction(RakNet::BitStream *constructionBitstream, RakNet::Connection_RM3 *sourceConnection) {
<a name="l01219"></a>01219                 <span class="keywordflow">if</span> (!<a class="code" href="class_beaming_room.html#a52901008f4341d3b6343eabc88943f54">BeamingRoom::DeserializeConstruction</a>(constructionBitstream, sourceConnection))
<a name="l01220"></a>01220                         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l01221"></a>01221                 RakNetTimeMS time = RakNet::GetTime();
<a name="l01222"></a>01222                 PrintOutput(constructionBitstream);
<a name="l01223"></a>01223                 constructionBitstream-&gt;Read(audio_id);
<a name="l01224"></a>01224                 printf(<span class="stringliteral">&quot;Client: %s, Type: %s, Config: %s, Node: %s\n&quot;</span>,clientname,clientType,clientConfig,audio_id);
<a name="l01225"></a>01225                 <a class="code" href="_client_server_8h.html#a40bd55104716ac13ddbfe90bf63f60da">audio_replicas</a>[this-&gt;GetCreatingSystemGUID()].push_back(<span class="keyword">this</span>); <span class="comment">//create within map on new client connection</span>
<a name="l01226"></a>01226                 thisnode = <span class="keyword">new</span> <a class="code" href="structnode__info.html">node_info</a>;
<a name="l01227"></a>01227                 thisnode-&gt;<a class="code" href="structnode__info.html#a988e1ab3a75015487c4ec4437252a7c7">name</a>=audio_id;
<a name="l01228"></a>01228                 thisnode-&gt;type=GetName().C_String();
<a name="l01229"></a>01229                 thisnode-&gt;peername = clientname;
<a name="l01230"></a>01230                 thisnode-&gt;peertype = clientType;
<a name="l01231"></a>01231                 thisnode-&gt;peercfg = clientConfig;
<a name="l01232"></a>01232                 thisnode-&gt;ipport = ip_port;
<a name="l01233"></a>01233                 <a class="code" href="_client_server_8h.html#aee6ed86d42821e392e49ae3ecb3f04b6">nodes_map</a>[this-&gt;GetCreatingSystemGUID().ToString()].push_back(thisnode);
<a name="l01234"></a>01234                 <span class="keywordflow">if</span> ((<a class="code" href="_client_server_8h.html#ad9b4d2b6bfe35238ad017f255ce6d0a1">topology</a>==<a class="code" href="_client_server_8h.html#a06fc87d81c62e9abb8790b6e5713c55ba67c96b24b23bcb408bae7626730a04b7">SERVER</a>)&amp;&amp;(<a class="code" href="_client_server_8h.html#af7883388f6a285534cba3f39404124d4">logging</a>==<span class="keyword">true</span>))
<a name="l01235"></a>01235                 {
<a name="l01236"></a>01236                         <span class="comment">//printf(&quot;%&quot;PRINTF_64_BIT_MODIFIER&quot;u: %s client created; rem %i\n&quot;,(unsigned long long)time,sourceConnection-&gt;GetRakNetGUID().ToString(),audio_replicas.size());</span>
<a name="l01237"></a>01237                         <a class="code" href="_client_server_8h.html#a87a1f273fa8ad585520f9a5e5d071ec4">logfileHandler</a>.GetLocalTime(localtime);
<a name="l01238"></a>01238                         sprintf(logstr,<span class="stringliteral">&quot;C;%&quot;</span>PRINTF_64_BIT_MODIFIER<span class="stringliteral">&quot;u;%s;%s;0;%i&quot;</span>,(<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keywordtype">long</span>)time,localtime,sourceConnection-&gt;GetRakNetGUID().ToString(),<a class="code" href="_client_server_8h.html#a40bd55104716ac13ddbfe90bf63f60da">audio_replicas</a>.size());
<a name="l01239"></a>01239                         <a class="code" href="_client_server_8h.html#a87a1f273fa8ad585520f9a5e5d071ec4">logfileHandler</a>.WriteLog(logstr);
<a name="l01240"></a>01240                 }
<a name="l01241"></a>01241                 <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l01242"></a>01242         }
<a name="l01243"></a>01243         <span class="keyword">virtual</span> <span class="keywordtype">void</span> SerializeDestruction(RakNet::BitStream *destructionBitstream, RakNet::Connection_RM3 *destinationConnection)       {
<a name="l01244"></a>01244                 <a class="code" href="class_beaming_room.html#a051e82d4430fa78d95a6330eb7e886da">BeamingRoom::SerializeDestruction</a>(destructionBitstream, destinationConnection);
<a name="l01245"></a>01245                 destructionBitstream-&gt;Write(GetName() + RakNet::RakString(audio_id) + RakNet::RakString(<span class="stringliteral">&quot; removed for guid &quot;</span>) + RakNet::RakString(this-&gt;GetCreatingSystemGUID().ToString()));
<a name="l01246"></a>01246         }
<a name="l01247"></a>01247         <span class="keyword">virtual</span> <span class="keywordtype">bool</span> DeserializeDestruction(RakNet::BitStream *destructionBitstream, RakNet::Connection_RM3 *sourceConnection) {
<a name="l01248"></a>01248                 <span class="keywordflow">if</span> (!<a class="code" href="class_beaming_room.html#aed9807b83c06f5dc8b70c117ef18d90d">BeamingRoom::DeserializeDestruction</a>(destructionBitstream, sourceConnection))
<a name="l01249"></a>01249                         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l01250"></a>01250                 RakNetTimeMS time = RakNet::GetTime();
<a name="l01251"></a>01251                 PrintOutput(destructionBitstream);
<a name="l01252"></a>01252                 <a class="code" href="_client_server_8h.html#a40bd55104716ac13ddbfe90bf63f60da">audio_replicas</a>.erase(this-&gt;GetCreatingSystemGUID()); <span class="comment">//erase from map on client disconnection</span>
<a name="l01253"></a>01253                 <a class="code" href="_client_server_8h.html#aee6ed86d42821e392e49ae3ecb3f04b6">nodes_map</a>.erase(this-&gt;GetCreatingSystemGUID().ToString());
<a name="l01254"></a>01254                 <a class="code" href="_client_server_8h.html#a23ccb3d0e9aaae919d32876ed291503e">new_clients</a>.erase(this-&gt;GetCreatingSystemGUID()); <span class="comment">//deprecated</span>
<a name="l01255"></a>01255                 <span class="keywordflow">if</span> ((<a class="code" href="_client_server_8h.html#ad9b4d2b6bfe35238ad017f255ce6d0a1">topology</a>==<a class="code" href="_client_server_8h.html#a06fc87d81c62e9abb8790b6e5713c55ba67c96b24b23bcb408bae7626730a04b7">SERVER</a>)&amp;&amp;(<a class="code" href="_client_server_8h.html#af7883388f6a285534cba3f39404124d4">logging</a>==<span class="keyword">true</span>))
<a name="l01256"></a>01256                 {
<a name="l01257"></a>01257                         <span class="comment">//printf(&quot;%&quot;PRINTF_64_BIT_MODIFIER&quot;u: %s client deleted; rem %i\n&quot;,(unsigned long long)time,sourceConnection-&gt;GetRakNetGUID().ToString(),audio_replicas.size());</span>
<a name="l01258"></a>01258                         <a class="code" href="_client_server_8h.html#a87a1f273fa8ad585520f9a5e5d071ec4">logfileHandler</a>.GetLocalTime(localtime);
<a name="l01259"></a>01259                         sprintf(logstr,<span class="stringliteral">&quot;D;%&quot;</span>PRINTF_64_BIT_MODIFIER<span class="stringliteral">&quot;u;%s;%s;0;%i&quot;</span>,(<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keywordtype">long</span>)time,localtime,sourceConnection-&gt;GetRakNetGUID().ToString(),<a class="code" href="_client_server_8h.html#a40bd55104716ac13ddbfe90bf63f60da">audio_replicas</a>.size());
<a name="l01260"></a>01260                         <a class="code" href="_client_server_8h.html#a87a1f273fa8ad585520f9a5e5d071ec4">logfileHandler</a>.WriteLog(logstr);
<a name="l01261"></a>01261                 }
<a name="l01262"></a>01262                 <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l01263"></a>01263         }
<a name="l01264"></a>01264         <span class="keyword">virtual</span> <span class="keywordtype">void</span> DeallocReplica(RakNet::Connection_RM3 *sourceConnection) {
<a name="l01265"></a>01265                 <span class="keyword">delete</span> <span class="keyword">this</span>;
<a name="l01266"></a>01266         }
<a name="l01267"></a>01267         <span class="keyword">virtual</span> RM3SerializationResult Serialize(SerializeParameters *serializeParameters)      {
<a name="l01268"></a>01268                 <a class="code" href="class_beaming_room.html#a80bb63abb132e065278b7a580bbd25e9">BeamingRoom::Serialize</a>(serializeParameters);
<a name="l01269"></a>01269                 RakNetTimeMS time = RakNet::GetTime();
<a name="l01270"></a>01270                 serializeParameters-&gt;outputBitstream[0].WriteAlignedBytes((<span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>*)&amp;config,<span class="keyword">sizeof</span>(config));
<a name="l01271"></a>01271                 <span class="keywordflow">return</span> RM3SR_BROADCAST_IDENTICALLY;
<a name="l01272"></a>01272         }
<a name="l01273"></a>01273         <span class="keyword">virtual</span> <span class="keywordtype">void</span> Deserialize(RakNet::DeserializeParameters *deserializeParameters) {
<a name="l01274"></a>01274                 <a class="code" href="class_beaming_room.html#af23542f8315fcfff160368016432a04d">BeamingRoom::Deserialize</a>(deserializeParameters);
<a name="l01275"></a>01275                 RakNetTimeMS time = RakNet::GetTime();
<a name="l01276"></a>01276                 deserializeParameters-&gt;serializationBitstream[0].ReadAlignedBytes((<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>*)&amp;config,<span class="keyword">sizeof</span>(config));
<a name="l01277"></a>01277                 <span class="comment">//printf(&quot;%&quot;PRINTF_64_BIT_MODIFIER&quot;u: %s %s %s %s %s - %s\n&quot;,(unsigned long long)time,clientname,this-&gt;GetCreatingSystemGUID().ToString(),clientType,clientConfig,audio_id,config);</span>
<a name="l01278"></a>01278                 <span class="keywordflow">if</span> ((<a class="code" href="_client_server_8h.html#ad9b4d2b6bfe35238ad017f255ce6d0a1">topology</a>==<a class="code" href="_client_server_8h.html#a06fc87d81c62e9abb8790b6e5713c55ba67c96b24b23bcb408bae7626730a04b7">SERVER</a>)&amp;&amp;(<a class="code" href="_client_server_8h.html#af7883388f6a285534cba3f39404124d4">logging</a>==<span class="keyword">true</span>))<span class="comment">//logging on server</span>
<a name="l01279"></a>01279                 {
<a name="l01280"></a>01280                                 <a class="code" href="_client_server_8h.html#a87a1f273fa8ad585520f9a5e5d071ec4">logfileHandler</a>.GetLocalTime(localtime);
<a name="l01281"></a>01281                                 sprintf(logstr,<span class="stringliteral">&quot;M;%&quot;</span>PRINTF_64_BIT_MODIFIER<span class="stringliteral">&quot;u;%s;%s;%s;%s;%s;%s;%s&quot;</span>,(<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keywordtype">long</span>)time,localtime,clientname,this-&gt;GetCreatingSystemGUID().ToString(),clientType,clientConfig,audio_id,config);
<a name="l01282"></a>01282                                 <a class="code" href="_client_server_8h.html#a87a1f273fa8ad585520f9a5e5d071ec4">logfileHandler</a>.WriteLog(logstr); <span class="comment">//writes additional lines</span>
<a name="l01283"></a>01283                 }
<a name="l01284"></a>01284         }
<a name="l01285"></a>01285         <span class="keyword">virtual</span> <span class="keywordtype">void</span> SerializeConstructionRequestAccepted(RakNet::BitStream *serializationBitstream, RakNet::Connection_RM3 *requestingConnection)      {
<a name="l01286"></a>01286                 serializationBitstream-&gt;Write(GetName() + RakNet::RakString(audio_id) + RakNet::RakString(<span class="stringliteral">&quot; created on server&quot;</span>));
<a name="l01287"></a>01287         }
<a name="l01288"></a>01288         <span class="keyword">virtual</span> <span class="keywordtype">void</span> DeserializeConstructionRequestAccepted(RakNet::BitStream *serializationBitstream, RakNet::Connection_RM3 *acceptingConnection) {
<a name="l01289"></a>01289                 PrintOutput(serializationBitstream);
<a name="l01290"></a>01290         }
<a name="l01291"></a>01291         <span class="keyword">virtual</span> <span class="keywordtype">void</span> SerializeConstructionRequestRejected(RakNet::BitStream *serializationBitstream, RakNet::Connection_RM3 *requestingConnection)      {
<a name="l01292"></a>01292                 serializationBitstream-&gt;Write(GetName() + RakNet::RakString(audio_id) + RakNet::RakString(<span class="stringliteral">&quot; not created on server&quot;</span>));
<a name="l01293"></a>01293         }
<a name="l01294"></a>01294         <span class="keyword">virtual</span> <span class="keywordtype">void</span> DeserializeConstructionRequestRejected(RakNet::BitStream *serializationBitstream, RakNet::Connection_RM3 *rejectingConnection) {
<a name="l01295"></a>01295                 PrintOutput(serializationBitstream);
<a name="l01296"></a>01296         }
<a name="l01297"></a>01297 
<a name="l01298"></a>01298 <span class="keyword">public</span>:
<a name="l01299"></a><a class="code" href="class_beaming_audio_replica.html#af4a44c1307f2c77235ed3e985d3eea54">01299</a>         <span class="keywordtype">char</span> audio_id[128];
<a name="l01300"></a><a class="code" href="class_beaming_audio_replica.html#aeb1effd3c508353185eb257f6b32dafb">01300</a>         <span class="keywordtype">char</span> config[128];
<a name="l01301"></a><a class="code" href="class_beaming_audio_replica.html#a0a16212dc07bf939a70690f8fadb2edf">01301</a>         <a class="code" href="structnode__info.html">node_info</a> *<a class="code" href="class_beaming_audio_replica.html#a0a16212dc07bf939a70690f8fadb2edf">thisnode</a>;
<a name="l01302"></a>01302 
<a name="l01303"></a><a class="code" href="class_beaming_audio_replica.html#a72c56668724b72e9447265c93969df0f">01303</a>         <a class="code" href="class_beaming_audio_replica.html#a72c56668724b72e9447265c93969df0f">BeamingAudioReplica</a>() { }
<a name="l01304"></a>01304 
<a name="l01305"></a><a class="code" href="class_beaming_audio_replica.html#a6e002966a6efab8fc1a74a437f85c7cf">01305</a>         <span class="keyword">virtual</span> <a class="code" href="class_beaming_audio_replica.html#a6e002966a6efab8fc1a74a437f85c7cf">~BeamingAudioReplica</a>() { }
<a name="l01306"></a>01306 };
<a name="l01307"></a>01307 
<a name="l01308"></a>01308 
<a name="l01310"></a><a class="code" href="class_beaming_point_cloud_replica.html">01310</a> <span class="keyword">class </span><a class="code" href="class_beaming_point_cloud_replica.html" title="Point Cloud Replica.">BeamingPointCloudReplica</a> : <span class="keyword">public</span> <a class="code" href="class_beaming_room.html" title="Room Replica (destination)">BeamingRoom</a>
<a name="l01311"></a>01311 {
<a name="l01312"></a>01312         <span class="keyword">virtual</span> RakNet::RakString GetName(<span class="keywordtype">void</span>)<span class="keyword"> const </span>{<span class="keywordflow">return</span> RakNet::RakString(<span class="stringliteral">&quot;POINTCLOUD&quot;</span>);}
<a name="l01313"></a>01313         <span class="keyword">virtual</span> <span class="keywordtype">void</span> WriteAllocationID(RakNet::BitStream *allocationIdBitstream)<span class="keyword"> const </span>{
<a name="l01314"></a>01314                 allocationIdBitstream-&gt;Write(GetName());
<a name="l01315"></a>01315         }
<a name="l01316"></a>01316         <span class="keyword">virtual</span> <span class="keywordtype">void</span> SerializeConstruction(RakNet::BitStream *constructionBitstream, RakNet::Connection_RM3 *destinationConnection)     {
<a name="l01317"></a>01317                 <a class="code" href="class_beaming_room.html#af1ac8f8543885b3b3dabfe08e160e860">BeamingRoom::SerializeConstruction</a>(constructionBitstream, destinationConnection);
<a name="l01318"></a>01318                 constructionBitstream-&gt;Write(GetName() + RakNet::RakString(pointcloud_id) + RakNet::RakString(<span class="stringliteral">&quot; created for guid &quot;</span>) + RakNet::RakString(this-&gt;GetCreatingSystemGUID().ToString()));
<a name="l01319"></a>01319                 constructionBitstream-&gt;Write(pointcloud_id);
<a name="l01320"></a>01320         }
<a name="l01321"></a>01321         <span class="keyword">virtual</span> <span class="keywordtype">bool</span> DeserializeConstruction(RakNet::BitStream *constructionBitstream, RakNet::Connection_RM3 *sourceConnection) {
<a name="l01322"></a>01322                 <span class="keywordflow">if</span> (!<a class="code" href="class_beaming_room.html#a52901008f4341d3b6343eabc88943f54">BeamingRoom::DeserializeConstruction</a>(constructionBitstream, sourceConnection))
<a name="l01323"></a>01323                         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l01324"></a>01324                 RakNetTimeMS time = RakNet::GetTime();
<a name="l01325"></a>01325                 PrintOutput(constructionBitstream);
<a name="l01326"></a>01326                 constructionBitstream-&gt;Read(pointcloud_id);
<a name="l01327"></a>01327                 printf(<span class="stringliteral">&quot;Client: %s, Type: %s, Config: %s, Node: %s\n&quot;</span>,clientname,clientType,clientConfig,pointcloud_id);
<a name="l01328"></a>01328                 <a class="code" href="_client_server_8h.html#a7c73662d8d9072e714396d76b8b98a1f">point_cloud_replicas</a>[this-&gt;GetCreatingSystemGUID()].push_back(<span class="keyword">this</span>); <span class="comment">//create within map on new client connection</span>
<a name="l01329"></a>01329                 thisnode = <span class="keyword">new</span> <a class="code" href="structnode__info.html">node_info</a>;
<a name="l01330"></a>01330                 thisnode-&gt;<a class="code" href="structnode__info.html#a988e1ab3a75015487c4ec4437252a7c7">name</a>=pointcloud_id;
<a name="l01331"></a>01331                 thisnode-&gt;type=GetName().C_String();
<a name="l01332"></a>01332                 thisnode-&gt;peername = clientname;
<a name="l01333"></a>01333                 thisnode-&gt;peertype = clientType;
<a name="l01334"></a>01334                 thisnode-&gt;peercfg = clientConfig;
<a name="l01335"></a>01335                 thisnode-&gt;ipport = ip_port;
<a name="l01336"></a>01336                 <a class="code" href="_client_server_8h.html#aee6ed86d42821e392e49ae3ecb3f04b6">nodes_map</a>[this-&gt;GetCreatingSystemGUID().ToString()].push_back(thisnode);
<a name="l01337"></a>01337                 <span class="keywordflow">if</span> ((<a class="code" href="_client_server_8h.html#ad9b4d2b6bfe35238ad017f255ce6d0a1">topology</a>==<a class="code" href="_client_server_8h.html#a06fc87d81c62e9abb8790b6e5713c55ba67c96b24b23bcb408bae7626730a04b7">SERVER</a>)&amp;&amp;(<a class="code" href="_client_server_8h.html#af7883388f6a285534cba3f39404124d4">logging</a>==<span class="keyword">true</span>))
<a name="l01338"></a>01338                 {
<a name="l01339"></a>01339                         <span class="comment">//printf(&quot;%&quot;PRINTF_64_BIT_MODIFIER&quot;u: %s client created; rem %i\n&quot;,(unsigned long long)time,sourceConnection-&gt;GetRakNetGUID().ToString(),point_cloud_replicas.size());</span>
<a name="l01340"></a>01340                         <a class="code" href="_client_server_8h.html#a87a1f273fa8ad585520f9a5e5d071ec4">logfileHandler</a>.GetLocalTime(localtime);
<a name="l01341"></a>01341                         sprintf(logstr,<span class="stringliteral">&quot;C;%&quot;</span>PRINTF_64_BIT_MODIFIER<span class="stringliteral">&quot;u;%s;%s;0;%i&quot;</span>,(<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keywordtype">long</span>)time,localtime,sourceConnection-&gt;GetRakNetGUID().ToString(),<a class="code" href="_client_server_8h.html#a7c73662d8d9072e714396d76b8b98a1f">point_cloud_replicas</a>.size());
<a name="l01342"></a>01342                         <a class="code" href="_client_server_8h.html#a87a1f273fa8ad585520f9a5e5d071ec4">logfileHandler</a>.WriteLog(logstr);
<a name="l01343"></a>01343                 }
<a name="l01344"></a>01344                 <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l01345"></a>01345         }
<a name="l01346"></a>01346         <span class="keyword">virtual</span> <span class="keywordtype">void</span> SerializeDestruction(RakNet::BitStream *destructionBitstream, RakNet::Connection_RM3 *destinationConnection)       {
<a name="l01347"></a>01347                 <a class="code" href="class_beaming_room.html#a051e82d4430fa78d95a6330eb7e886da">BeamingRoom::SerializeDestruction</a>(destructionBitstream, destinationConnection);
<a name="l01348"></a>01348                 destructionBitstream-&gt;Write(GetName() + RakNet::RakString(pointcloud_id) + RakNet::RakString(<span class="stringliteral">&quot; removed for guid &quot;</span>) + RakNet::RakString(this-&gt;GetCreatingSystemGUID().ToString()));
<a name="l01349"></a>01349         }
<a name="l01350"></a>01350         <span class="keyword">virtual</span> <span class="keywordtype">bool</span> DeserializeDestruction(RakNet::BitStream *destructionBitstream, RakNet::Connection_RM3 *sourceConnection) {
<a name="l01351"></a>01351                 <span class="keywordflow">if</span> (!<a class="code" href="class_beaming_room.html#aed9807b83c06f5dc8b70c117ef18d90d">BeamingRoom::DeserializeDestruction</a>(destructionBitstream, sourceConnection))
<a name="l01352"></a>01352                         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l01353"></a>01353                 RakNetTimeMS time = RakNet::GetTime();
<a name="l01354"></a>01354                 PrintOutput(destructionBitstream);
<a name="l01355"></a>01355                 <a class="code" href="_client_server_8h.html#a7c73662d8d9072e714396d76b8b98a1f">point_cloud_replicas</a>.erase(this-&gt;GetCreatingSystemGUID()); <span class="comment">//erase from map on client disconnection</span>
<a name="l01356"></a>01356                 <a class="code" href="_client_server_8h.html#aee6ed86d42821e392e49ae3ecb3f04b6">nodes_map</a>.erase(this-&gt;GetCreatingSystemGUID().ToString());
<a name="l01357"></a>01357                 <a class="code" href="_client_server_8h.html#a23ccb3d0e9aaae919d32876ed291503e">new_clients</a>.erase(this-&gt;GetCreatingSystemGUID()); <span class="comment">//deprecated</span>
<a name="l01358"></a>01358                 <span class="keywordflow">if</span> ((<a class="code" href="_client_server_8h.html#ad9b4d2b6bfe35238ad017f255ce6d0a1">topology</a>==<a class="code" href="_client_server_8h.html#a06fc87d81c62e9abb8790b6e5713c55ba67c96b24b23bcb408bae7626730a04b7">SERVER</a>)&amp;&amp;(<a class="code" href="_client_server_8h.html#af7883388f6a285534cba3f39404124d4">logging</a>==<span class="keyword">true</span>))
<a name="l01359"></a>01359                 {
<a name="l01360"></a>01360                         <span class="comment">//printf(&quot;%&quot;PRINTF_64_BIT_MODIFIER&quot;u: %s client deleted; rem %i\n&quot;,(unsigned long long)time,sourceConnection-&gt;GetRakNetGUID().ToString(),point_cloud_replicas.size());</span>
<a name="l01361"></a>01361                         <a class="code" href="_client_server_8h.html#a87a1f273fa8ad585520f9a5e5d071ec4">logfileHandler</a>.GetLocalTime(localtime);
<a name="l01362"></a>01362                         sprintf(logstr,<span class="stringliteral">&quot;D;%&quot;</span>PRINTF_64_BIT_MODIFIER<span class="stringliteral">&quot;u;%s;%s;0;%i&quot;</span>,(<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keywordtype">long</span>)time,localtime,sourceConnection-&gt;GetRakNetGUID().ToString(),<a class="code" href="_client_server_8h.html#a7c73662d8d9072e714396d76b8b98a1f">point_cloud_replicas</a>.size());
<a name="l01363"></a>01363                         <a class="code" href="_client_server_8h.html#a87a1f273fa8ad585520f9a5e5d071ec4">logfileHandler</a>.WriteLog(logstr);
<a name="l01364"></a>01364                 }
<a name="l01365"></a>01365                 <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l01366"></a>01366         }
<a name="l01367"></a>01367         <span class="keyword">virtual</span> <span class="keywordtype">void</span> DeallocReplica(RakNet::Connection_RM3 *sourceConnection) {
<a name="l01368"></a>01368                 <span class="keyword">delete</span> <span class="keyword">this</span>;
<a name="l01369"></a>01369         }
<a name="l01370"></a>01370         <span class="keyword">virtual</span> RM3SerializationResult Serialize(SerializeParameters *serializeParameters)      {
<a name="l01371"></a>01371                 <a class="code" href="class_beaming_room.html#a80bb63abb132e065278b7a580bbd25e9">BeamingRoom::Serialize</a>(serializeParameters);
<a name="l01372"></a>01372                 RakNetTimeMS time = RakNet::GetTime();
<a name="l01373"></a>01373                 serializeParameters-&gt;outputBitstream[0].WriteAlignedBytes((<span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>*)&amp;size,<span class="keyword">sizeof</span>(size));
<a name="l01374"></a>01374                 serializeParameters-&gt;outputBitstream[0].WriteAlignedBytes((<span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>*)&amp;bandwidth,<span class="keyword">sizeof</span>(bandwidth));
<a name="l01375"></a>01375                 serializeParameters-&gt;outputBitstream[0].WriteAlignedBytes((<span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>*)&amp;RGB_flag,<span class="keyword">sizeof</span>(RGB_flag));
<a name="l01376"></a>01376                 <span class="keywordflow">return</span> RM3SR_BROADCAST_IDENTICALLY;
<a name="l01377"></a>01377         }
<a name="l01378"></a>01378         <span class="keyword">virtual</span> <span class="keywordtype">void</span> Deserialize(RakNet::DeserializeParameters *deserializeParameters) {
<a name="l01379"></a>01379                 <a class="code" href="class_beaming_room.html#af23542f8315fcfff160368016432a04d">BeamingRoom::Deserialize</a>(deserializeParameters);
<a name="l01380"></a>01380                 RakNetTimeMS time = RakNet::GetTime();
<a name="l01381"></a>01381                 deserializeParameters-&gt;serializationBitstream[0].ReadAlignedBytes((<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>*)&amp;size,<span class="keyword">sizeof</span>(size));
<a name="l01382"></a>01382                 deserializeParameters-&gt;serializationBitstream[0].ReadAlignedBytes((<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>*)&amp;bandwidth,<span class="keyword">sizeof</span>(bandwidth));
<a name="l01383"></a>01383                 deserializeParameters-&gt;serializationBitstream[0].ReadAlignedBytes((<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>*)&amp;RGB_flag,<span class="keyword">sizeof</span>(RGB_flag));
<a name="l01384"></a>01384                 <span class="comment">//printf(&quot;%&quot;PRINTF_64_BIT_MODIFIER&quot;u: %s %s %s %s %s - %i %f %i\n&quot;,(unsigned long long)time,clientname,this-&gt;GetCreatingSystemGUID().ToString(),clientType,clientConfig,pointcloud_id,size,bandwidth,RGB_flag);</span>
<a name="l01385"></a>01385                 <span class="keywordflow">if</span> ((<a class="code" href="_client_server_8h.html#ad9b4d2b6bfe35238ad017f255ce6d0a1">topology</a>==<a class="code" href="_client_server_8h.html#a06fc87d81c62e9abb8790b6e5713c55ba67c96b24b23bcb408bae7626730a04b7">SERVER</a>)&amp;&amp;(<a class="code" href="_client_server_8h.html#af7883388f6a285534cba3f39404124d4">logging</a>==<span class="keyword">true</span>))<span class="comment">//logging on server</span>
<a name="l01386"></a>01386                 {
<a name="l01387"></a>01387                                 <a class="code" href="_client_server_8h.html#a87a1f273fa8ad585520f9a5e5d071ec4">logfileHandler</a>.GetLocalTime(localtime);
<a name="l01388"></a>01388                                 sprintf(logstr,<span class="stringliteral">&quot;M;%&quot;</span>PRINTF_64_BIT_MODIFIER<span class="stringliteral">&quot;u;%s;%s;%s;%s;%s;%s;%i;%f;%i&quot;</span>,(<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keywordtype">long</span>)time,localtime,clientname,this-&gt;GetCreatingSystemGUID().ToString(),clientType,clientConfig,pointcloud_id,size,bandwidth,RGB_flag);
<a name="l01389"></a>01389                                 <a class="code" href="_client_server_8h.html#a87a1f273fa8ad585520f9a5e5d071ec4">logfileHandler</a>.WriteLog(logstr); <span class="comment">//writes additional lines</span>
<a name="l01390"></a>01390                 }
<a name="l01391"></a>01391         }
<a name="l01392"></a>01392         <span class="keyword">virtual</span> <span class="keywordtype">void</span> SerializeConstructionRequestAccepted(RakNet::BitStream *serializationBitstream, RakNet::Connection_RM3 *requestingConnection)      {
<a name="l01393"></a>01393                 serializationBitstream-&gt;Write(GetName() + RakNet::RakString(pointcloud_id) + RakNet::RakString(<span class="stringliteral">&quot; created on server&quot;</span>));
<a name="l01394"></a>01394         }
<a name="l01395"></a>01395         <span class="keyword">virtual</span> <span class="keywordtype">void</span> DeserializeConstructionRequestAccepted(RakNet::BitStream *serializationBitstream, RakNet::Connection_RM3 *acceptingConnection) {
<a name="l01396"></a>01396                 PrintOutput(serializationBitstream);
<a name="l01397"></a>01397         }
<a name="l01398"></a>01398         <span class="keyword">virtual</span> <span class="keywordtype">void</span> SerializeConstructionRequestRejected(RakNet::BitStream *serializationBitstream, RakNet::Connection_RM3 *requestingConnection)      {
<a name="l01399"></a>01399                 serializationBitstream-&gt;Write(GetName() + RakNet::RakString(pointcloud_id) + RakNet::RakString(<span class="stringliteral">&quot; not created on server&quot;</span>));
<a name="l01400"></a>01400         }
<a name="l01401"></a>01401         <span class="keyword">virtual</span> <span class="keywordtype">void</span> DeserializeConstructionRequestRejected(RakNet::BitStream *serializationBitstream, RakNet::Connection_RM3 *rejectingConnection) {
<a name="l01402"></a>01402                 PrintOutput(serializationBitstream);
<a name="l01403"></a>01403         }
<a name="l01404"></a>01404 
<a name="l01405"></a>01405 <span class="keyword">public</span>:
<a name="l01406"></a><a class="code" href="class_beaming_point_cloud_replica.html#a60a3b16bfb14ba4cbdbb6d8d69adc9cf">01406</a>         <span class="keywordtype">char</span> pointcloud_id[128];
<a name="l01407"></a><a class="code" href="class_beaming_point_cloud_replica.html#ab0262a672044d98b3ddf5a97d7dc51c4">01407</a>         <span class="keywordtype">int</span> <a class="code" href="class_beaming_point_cloud_replica.html#ab0262a672044d98b3ddf5a97d7dc51c4">size</a>;
<a name="l01408"></a><a class="code" href="class_beaming_point_cloud_replica.html#a16ab311b09d4430dcecf09f9d10bf978">01408</a>         <span class="keywordtype">double</span> <a class="code" href="class_beaming_point_cloud_replica.html#a16ab311b09d4430dcecf09f9d10bf978">bandwidth</a>;
<a name="l01409"></a><a class="code" href="class_beaming_point_cloud_replica.html#aa06c0d239b711a17412a27c1f988448b">01409</a>         <span class="keywordtype">bool</span> <a class="code" href="class_beaming_point_cloud_replica.html#aa06c0d239b711a17412a27c1f988448b">RGB_flag</a>;
<a name="l01410"></a><a class="code" href="class_beaming_point_cloud_replica.html#a27ff3ec1a7afd6864d500b7ad3c8206b">01410</a>         <a class="code" href="structnode__info.html">node_info</a> *<a class="code" href="class_beaming_point_cloud_replica.html#a27ff3ec1a7afd6864d500b7ad3c8206b">thisnode</a>;
<a name="l01411"></a>01411 
<a name="l01412"></a><a class="code" href="class_beaming_point_cloud_replica.html#a25a6f442990e8d485dd2a4b97f3ee016">01412</a>         <a class="code" href="class_beaming_point_cloud_replica.html#a25a6f442990e8d485dd2a4b97f3ee016">BeamingPointCloudReplica</a>() { }
<a name="l01413"></a>01413 
<a name="l01414"></a><a class="code" href="class_beaming_point_cloud_replica.html#a7ca46aa9896ef561def02d5663f590d5">01414</a>         <span class="keyword">virtual</span> <a class="code" href="class_beaming_point_cloud_replica.html#a7ca46aa9896ef561def02d5663f590d5">~BeamingPointCloudReplica</a>() { }
<a name="l01415"></a>01415 };
<a name="l01416"></a>01416 
<a name="l01417"></a>01417 
<a name="l01419"></a><a class="code" href="class_beaming_connection.html">01419</a> <span class="keyword">class </span><a class="code" href="class_beaming_connection.html" title="One instance of Connection_RM3 is implicitly created per connection that uses ReplicaManager3.">BeamingConnection</a> : <span class="keyword">public</span> Connection_RM3 {
<a name="l01420"></a>01420 <span class="keyword">public</span>:
<a name="l01421"></a><a class="code" href="class_beaming_connection.html#acc2b52080a381fc8615ea3ffbfcecb74">01421</a>         <a class="code" href="class_beaming_connection.html#acc2b52080a381fc8615ea3ffbfcecb74">BeamingConnection</a>(SystemAddress _systemAddress, RakNetGUID _guid) : Connection_RM3(_systemAddress, _guid) {}
<a name="l01422"></a><a class="code" href="class_beaming_connection.html#a8b94b306e482a1dfa57100aa9ddeaf13">01422</a>         <span class="keyword">virtual</span> <a class="code" href="class_beaming_connection.html#a8b94b306e482a1dfa57100aa9ddeaf13">~BeamingConnection</a>() {}
<a name="l01423"></a>01423 
<a name="l01425"></a><a class="code" href="class_beaming_connection.html#ac84bdf40b13fad1c2e1ad366985a4457">01425</a>         <span class="keyword">virtual</span> Replica3 *AllocReplica(RakNet::BitStream *allocationId, ReplicaManager3 *replicaManager3)
<a name="l01426"></a>01426         {
<a name="l01427"></a>01427                 RakNet::RakString typeName;
<a name="l01428"></a>01428                 allocationId-&gt;Read(typeName);
<a name="l01429"></a>01429                 <span class="keywordflow">if</span> (typeName==<span class="stringliteral">&quot;AVATAR&quot;</span>) <span class="keywordflow">return</span> <span class="keyword">new</span> <a class="code" href="class_beaming_avatar_joint_replica.html" title="Avatar Joint Replica.">BeamingAvatarJointReplica</a>;
<a name="l01430"></a>01430                 <span class="keywordflow">if</span> (typeName==<span class="stringliteral">&quot;FACIAL&quot;</span>) <span class="keywordflow">return</span> <span class="keyword">new</span> <a class="code" href="class_beaming_facial_replica.html" title="Facial Replica.">BeamingFacialReplica</a>;
<a name="l01431"></a>01431                 <span class="keywordflow">if</span> (typeName==<span class="stringliteral">&quot;EMOTION&quot;</span>) <span class="keywordflow">return</span> <span class="keyword">new</span> <a class="code" href="class_beaming_emotion_replica.html" title="Emotion Replica - Affective State.">BeamingEmotionReplica</a>;
<a name="l01432"></a>01432                 <span class="keywordflow">if</span> (typeName==<span class="stringliteral">&quot;TACTILE&quot;</span>) <span class="keywordflow">return</span> <span class="keyword">new</span> <a class="code" href="class_beaming_tactile_replica.html" title="Tactile Replica.">BeamingTactileReplica</a>;
<a name="l01433"></a>01433                 <span class="keywordflow">if</span> (typeName==<span class="stringliteral">&quot;ROBOT&quot;</span>) <span class="keywordflow">return</span> <span class="keyword">new</span> <a class="code" href="class_beaming_robot_replica.html" title="Kali-Type Robot Replica.">BeamingRobotReplica</a>;
<a name="l01434"></a>01434                 <span class="keywordflow">if</span> (typeName==<span class="stringliteral">&quot;OBJECT&quot;</span>) <span class="keywordflow">return</span> <span class="keyword">new</span> <a class="code" href="class_beaming_object_replica.html" title="Object Replica - 3D Models.">BeamingObjectReplica</a>;
<a name="l01435"></a>01435                 <span class="keywordflow">if</span> (typeName==<span class="stringliteral">&quot;VIDEO&quot;</span>) <span class="keywordflow">return</span> <span class="keyword">new</span> <a class="code" href="class_beaming_video_replica.html" title="Video Replica.">BeamingVideoReplica</a>;
<a name="l01436"></a>01436                 <span class="keywordflow">if</span> (typeName==<span class="stringliteral">&quot;AUDIO&quot;</span>) <span class="keywordflow">return</span> <span class="keyword">new</span> <a class="code" href="class_beaming_audio_replica.html" title="Audio Replica.">BeamingAudioReplica</a>;
<a name="l01437"></a>01437                 <span class="keywordflow">if</span> (typeName==<span class="stringliteral">&quot;POINTCLOUD&quot;</span>) <span class="keywordflow">return</span> <span class="keyword">new</span> <a class="code" href="class_beaming_point_cloud_replica.html" title="Point Cloud Replica.">BeamingPointCloudReplica</a>;
<a name="l01438"></a>01438                 <span class="keywordflow">if</span> (typeName==<span class="stringliteral">&quot;GENERIC&quot;</span>) <span class="keywordflow">return</span> <span class="keyword">new</span> <a class="code" href="class_beaming_generic_replica.html" title="Generic Replica (to enable writing of generic replica up to 1024 bytes)">BeamingGenericReplica</a>;
<a name="l01439"></a>01439                 <span class="keywordflow">return</span> 0;
<a name="l01440"></a>01440         }
<a name="l01441"></a>01441 <span class="keyword">protected</span>:
<a name="l01442"></a>01442 };
<a name="l01443"></a>01443 
<a name="l01444"></a>01444 
<a name="l01446"></a><a class="code" href="class_replica_manager3_beaming.html">01446</a> <span class="keyword">class </span><a class="code" href="class_replica_manager3_beaming.html" title="Created on intialisation and attached as a plugin.">ReplicaManager3Beaming</a> : <span class="keyword">public</span> ReplicaManager3
<a name="l01447"></a>01447 {
<a name="l01448"></a>01448         <span class="keyword">virtual</span> Connection_RM3* AllocConnection(SystemAddress systemAddress, RakNetGUID rakNetGUID)<span class="keyword"> const </span>{
<a name="l01449"></a>01449                 <span class="keywordflow">return</span> <span class="keyword">new</span> <a class="code" href="class_beaming_connection.html" title="One instance of Connection_RM3 is implicitly created per connection that uses ReplicaManager3.">BeamingConnection</a>(systemAddress,rakNetGUID);
<a name="l01450"></a>01450         }
<a name="l01451"></a>01451         <span class="keyword">virtual</span> <span class="keywordtype">void</span> DeallocConnection(Connection_RM3 *connection)<span class="keyword"> const </span>{
<a name="l01452"></a>01452                 <span class="keyword">delete</span> connection;
<a name="l01453"></a>01453         }
<a name="l01454"></a>01454 };
<a name="l01455"></a>01455 
<a name="l01456"></a>01456 
<a name="l01457"></a>01457 
</pre></div></div><!-- contents -->
</div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Defines</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="_client_server_8h.html">ClientServer.h</a>      </li>

    <li class="footer">Generated on Wed Oct 17 2012 13:07:11 for Beaming Scene Service by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
