<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>Beaming Scene Service: xmppClient/echoClient.cpp Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>

</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  <td id="projectlogo"><img alt="Logo" src="BEAMING_LOGO2.jpg"/></td>
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">Beaming Scene Service
   &#160;<span id="projectnumber">2.0</span>
   </div>
   <div id="projectbrief">RakNet wrapper for managing data communications between multiple Beaming clients</div>
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.html"><span>Related&#160;Pages</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
      <li><a href="globals.html"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('echo_client_8cpp.html','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">xmppClient/echoClient.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="echo_client_8cpp.html">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/*</span>
<a name="l00002"></a>00002 <span class="comment"> * Copyright (C) 2008-2011 The QXmpp developers</span>
<a name="l00003"></a>00003 <span class="comment"> *</span>
<a name="l00004"></a>00004 <span class="comment"> * Author:</span>
<a name="l00005"></a>00005 <span class="comment"> *      Manjeet Dahiya</span>
<a name="l00006"></a>00006 <span class="comment"> *</span>
<a name="l00007"></a>00007 <span class="comment"> * Source:</span>
<a name="l00008"></a>00008 <span class="comment"> *      http://code.google.com/p/qxmpp</span>
<a name="l00009"></a>00009 <span class="comment"> *</span>
<a name="l00010"></a>00010 <span class="comment"> * This file is a part of QXmpp library.</span>
<a name="l00011"></a>00011 <span class="comment"> *</span>
<a name="l00012"></a>00012 <span class="comment"> * This library is free software; you can redistribute it and/or</span>
<a name="l00013"></a>00013 <span class="comment"> * modify it under the terms of the GNU Lesser General Public</span>
<a name="l00014"></a>00014 <span class="comment"> * License as published by the Free Software Foundation; either</span>
<a name="l00015"></a>00015 <span class="comment"> * version 2.1 of the License, or (at your option) any later version.</span>
<a name="l00016"></a>00016 <span class="comment"> *</span>
<a name="l00017"></a>00017 <span class="comment"> * This library is distributed in the hope that it will be useful,</span>
<a name="l00018"></a>00018 <span class="comment"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00019"></a>00019 <span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>
<a name="l00020"></a>00020 <span class="comment"> * Lesser General Public License for more details.</span>
<a name="l00021"></a>00021 <span class="comment"> *</span>
<a name="l00022"></a>00022 <span class="comment"> */</span>
<a name="l00023"></a>00023 
<a name="l00024"></a>00024 
<a name="l00025"></a>00025 <span class="preprocessor">#include &quot;<a class="code" href="echo_client_8h.html">echoClient.h</a>&quot;</span>
<a name="l00026"></a>00026 <span class="preprocessor">#include &quot;QXmppMessage.h&quot;</span>
<a name="l00027"></a>00027 <span class="preprocessor">#include &quot;QXmppPresence.h&quot;</span>
<a name="l00028"></a>00028 <span class="preprocessor">#include &lt;iostream&gt;</span>
<a name="l00029"></a>00029 <span class="preprocessor">#include &quot;<a class="code" href="client_8h.html">client.h</a>&quot;</span>
<a name="l00030"></a>00030 <span class="preprocessor">#include &quot;Kbhit.h&quot;</span>
<a name="l00031"></a>00031 <span class="preprocessor">#include &quot;Getche.h&quot;</span>
<a name="l00032"></a>00032 
<a name="l00033"></a><a class="code" href="classecho_client.html#ae7610416ebeac92f591bb1c81d4e20b9">00033</a> <a class="code" href="classecho_client.html#ae7610416ebeac92f591bb1c81d4e20b9">echoClient::echoClient</a>(QObject *parent)
<a name="l00034"></a>00034     : QXmppClient(parent)
<a name="l00035"></a>00035 {
<a name="l00036"></a>00036     <span class="keywordtype">bool</span> <a class="code" href="client_8cpp.html#a83f8adca24e250bfb5c9a90a35503ae9">check</a> = connect(<span class="keyword">this</span>, SIGNAL(<a class="code" href="classecho_client.html#a15b2d915975b0575c36b60aa88648834">messageReceived</a>(<span class="keyword">const</span> QXmppMessage&amp;)),
<a name="l00037"></a>00037         SLOT(<a class="code" href="classecho_client.html#a15b2d915975b0575c36b60aa88648834">messageReceived</a>(<span class="keyword">const</span> QXmppMessage&amp;)));
<a name="l00038"></a>00038     Q_ASSERT(check);
<a name="l00039"></a>00039     Q_UNUSED(check);
<a name="l00040"></a>00040         check = connect(<span class="keyword">this</span>, SIGNAL(<a class="code" href="classecho_client.html#aee0ed5f8a2df63b039ac8d6812e1a6e7">presenceReceived</a>(<span class="keyword">const</span> QXmppPresence&amp;)),
<a name="l00041"></a>00041         SLOT(<a class="code" href="classecho_client.html#aee0ed5f8a2df63b039ac8d6812e1a6e7">presenceReceived</a>(<span class="keyword">const</span> QXmppPresence&amp;)));
<a name="l00042"></a>00042     Q_ASSERT(check);
<a name="l00043"></a>00043     Q_UNUSED(check);
<a name="l00044"></a>00044     check = connect(<span class="keyword">this</span>, SIGNAL(<a class="code" href="classecho_client.html#ae5def70c477fd140d393e928d49b3fad">connected</a>()),
<a name="l00045"></a>00045         SLOT(<a class="code" href="classecho_client.html#ae5def70c477fd140d393e928d49b3fad">connected</a>()));
<a name="l00046"></a>00046     Q_ASSERT(check);
<a name="l00047"></a>00047     Q_UNUSED(check);
<a name="l00048"></a>00048     check = connect(<span class="keyword">this</span>, SIGNAL(<a class="code" href="classecho_client.html#a663f6630b217330dc1af5b91e60e12c7">disconnected</a>()),
<a name="l00049"></a>00049         SLOT(<a class="code" href="classecho_client.html#a663f6630b217330dc1af5b91e60e12c7">disconnected</a>()));
<a name="l00050"></a>00050     Q_ASSERT(check);
<a name="l00051"></a>00051     Q_UNUSED(check);
<a name="l00052"></a>00052 }
<a name="l00053"></a>00053 
<a name="l00054"></a><a class="code" href="classecho_client.html#af2314c88886d2efbf4ec4311229876e5">00054</a> <a class="code" href="classecho_client.html#af2314c88886d2efbf4ec4311229876e5">echoClient::~echoClient</a>()
<a name="l00055"></a>00055 {
<a name="l00056"></a>00056 
<a name="l00057"></a>00057 }
<a name="l00058"></a>00058 
<a name="l00059"></a><a class="code" href="classecho_client.html#a15b2d915975b0575c36b60aa88648834">00059</a> <span class="keywordtype">void</span> <a class="code" href="classecho_client.html#a15b2d915975b0575c36b60aa88648834">echoClient::messageReceived</a>(<span class="keyword">const</span> QXmppMessage&amp; message)
<a name="l00060"></a>00060 {
<a name="l00061"></a>00061     QString from = message.from();
<a name="l00062"></a>00062     QString msg = message.body();
<a name="l00063"></a>00063         QString reply;
<a name="l00064"></a>00064 
<a name="l00065"></a>00065         <span class="comment">//std::cout &lt;&lt; &quot;from &quot; &lt;&lt; from.toStdString() &lt;&lt; &quot;; msg &quot; &lt;&lt; msg.toStdString() &lt;&lt; std::endl;</span>
<a name="l00066"></a>00066         <a class="code" href="classecho_client.html#afad1d550dcbd59454dd5689cb81e8587">ReadText</a>(msg,reply);
<a name="l00067"></a>00067         <span class="keywordflow">if</span> (!reply.isEmpty())
<a name="l00068"></a>00068                 sendPacket(QXmppMessage(<span class="stringliteral">&quot;&quot;</span>, from, reply)); <span class="comment">//from may need to be hard-coded as &quot;bpserver@srv-beaming&quot;</span>
<a name="l00069"></a>00069 }
<a name="l00070"></a>00070 
<a name="l00071"></a><a class="code" href="classecho_client.html#aee0ed5f8a2df63b039ac8d6812e1a6e7">00071</a> <span class="keywordtype">void</span> <a class="code" href="classecho_client.html#aee0ed5f8a2df63b039ac8d6812e1a6e7">echoClient::presenceReceived</a>(<span class="keyword">const</span> QXmppPresence&amp; presence)
<a name="l00072"></a>00072 {
<a name="l00073"></a>00073     QString from = presence.from();
<a name="l00074"></a>00074     <a class="code" href="classecho_client.html#ad0e9ae7d9b4803dda1f0d5b0c32cb642">sendPresence</a>(from);
<a name="l00075"></a>00075         <span class="keywordflow">if</span> (presence.type() == QXmppPresence::Available)
<a name="l00076"></a>00076         {
<a name="l00077"></a>00077                 sendPacket(QXmppMessage(<span class="stringliteral">&quot;cmmanager&quot;</span>, from, <span class="stringliteral">&quot;CM_CLIENT_CONNECTED&quot;</span>)); 
<a name="l00078"></a>00078         }
<a name="l00079"></a>00079 }
<a name="l00080"></a>00080 
<a name="l00081"></a><a class="code" href="classecho_client.html#ad0e9ae7d9b4803dda1f0d5b0c32cb642">00081</a> <span class="keywordtype">void</span> <a class="code" href="classecho_client.html#ad0e9ae7d9b4803dda1f0d5b0c32cb642">echoClient::sendPresence</a>(QString msg_from)
<a name="l00082"></a>00082 {
<a name="l00083"></a>00083     QString from = msg_from;
<a name="l00084"></a>00084     QXmppPresence available;
<a name="l00085"></a>00085     available.setTo(from);
<a name="l00086"></a>00086         available.setType(QXmppPresence::Available);
<a name="l00087"></a>00087     sendPacket(available);
<a name="l00088"></a>00088 }
<a name="l00089"></a>00089 
<a name="l00090"></a><a class="code" href="classecho_client.html#ae5def70c477fd140d393e928d49b3fad">00090</a> <span class="keywordtype">void</span> <a class="code" href="classecho_client.html#ae5def70c477fd140d393e928d49b3fad">echoClient::connected</a>()
<a name="l00091"></a>00091 {
<a name="l00092"></a>00092         <a class="code" href="classecho_client.html#ad93c4fa294b214bd51bf379a101fc4c8">connected_to_bss</a> = <a class="code" href="client_8cpp.html#a5d8297157b67b5fffaae66ec8f7c90ff">startclient</a>(<span class="stringliteral">&quot;128.16.7.66&quot;</span>, 12050, <span class="stringliteral">&quot;IBM CLIENT&quot;</span>, <span class="stringliteral">&quot;AVATAR&quot;</span>, <span class="stringliteral">&quot;m016.cfg&quot;</span>, <span class="keyword">false</span>);
<a name="l00093"></a>00093     <span class="keywordflow">if</span> (<a class="code" href="classecho_client.html#ad93c4fa294b214bd51bf379a101fc4c8">connected_to_bss</a>)       {
<a name="l00094"></a>00094                 sendPacket(QXmppMessage(<span class="stringliteral">&quot;cmmanager&quot;</span>, <span class="stringliteral">&quot;bpserver@srv-beaming&quot;</span>, <span class="stringliteral">&quot;CM_CLIENT_CONNECTED&quot;</span>));
<a name="l00095"></a>00095                 <a class="code" href="classecho_client.html#ad0e9ae7d9b4803dda1f0d5b0c32cb642">sendPresence</a>(<span class="stringliteral">&quot;bpserver@srv-beaming&quot;</span>);
<a name="l00096"></a>00096         } <span class="keywordflow">else</span> {
<a name="l00097"></a>00097                 sendPacket(QXmppMessage(<span class="stringliteral">&quot;cmmanager&quot;</span>, <span class="stringliteral">&quot;bpserver@srv-beaming&quot;</span>, <span class="stringliteral">&quot;CM_CLIENT_NOT_CONNECTED&quot;</span>));
<a name="l00098"></a>00098         }
<a name="l00099"></a>00099         <a class="code" href="classecho_client.html#ab65834f5ac6133c0319d6a67b7561184">timer</a> = <span class="keyword">new</span> QTimer(<span class="keyword">this</span>);
<a name="l00100"></a>00100         <span class="keywordtype">bool</span> <a class="code" href="client_8cpp.html#a83f8adca24e250bfb5c9a90a35503ae9">check</a> = connect(<a class="code" href="classecho_client.html#ab65834f5ac6133c0319d6a67b7561184">timer</a>, SIGNAL(timeout()), <span class="keyword">this</span>, SLOT(<a class="code" href="classecho_client.html#a33fe7ecc07975d1136c6edf01ba14f7e">PositionUpdateTimer</a>()));
<a name="l00101"></a>00101         Q_ASSERT(check);
<a name="l00102"></a>00102         Q_UNUSED(check);
<a name="l00103"></a>00103         <a class="code" href="classecho_client.html#ab65834f5ac6133c0319d6a67b7561184">timer</a>-&gt;start(1000); <span class="comment">//one second (1000 millisecond) timer</span>
<a name="l00104"></a>00104 }
<a name="l00105"></a>00105 
<a name="l00106"></a><a class="code" href="classecho_client.html#a663f6630b217330dc1af5b91e60e12c7">00106</a> <span class="keywordtype">void</span> <a class="code" href="classecho_client.html#a663f6630b217330dc1af5b91e60e12c7">echoClient::disconnected</a>()
<a name="l00107"></a>00107 {
<a name="l00108"></a>00108     <a class="code" href="client_8cpp.html#a66a21a3ed677f69961d8280482c5285a" title="use removeAllNodes() and stop() on exit">removeAllNodes</a>();
<a name="l00109"></a>00109     <a class="code" href="client_8cpp.html#a8c528baf37154d347366083f0f816846" title="use removeAllNodes() and stop() on exit">stop</a>();
<a name="l00110"></a>00110 }
<a name="l00111"></a>00111 
<a name="l00112"></a><a class="code" href="classecho_client.html#afad1d550dcbd59454dd5689cb81e8587">00112</a> <span class="keywordtype">void</span> <a class="code" href="classecho_client.html#afad1d550dcbd59454dd5689cb81e8587">echoClient::ReadText</a>(QString in_msg, QString&amp; out_msg)
<a name="l00113"></a>00113 {
<a name="l00114"></a>00114         <span class="keywordtype">char</span> id_cstr[32];
<a name="l00115"></a>00115         QStringList inputList = in_msg.split(<span class="stringliteral">&quot;,&quot;</span>);              <span class="comment">//split on ;</span>
<a name="l00116"></a>00116         <span class="keywordflow">if</span> (!<a class="code" href="classecho_client.html#ad93c4fa294b214bd51bf379a101fc4c8">connected_to_bss</a>) 
<a name="l00117"></a>00117         {
<a name="l00118"></a>00118                 sendPacket(QXmppMessage(<span class="stringliteral">&quot;cmmanager&quot;</span>, <span class="stringliteral">&quot;bpserver@srv-beaming&quot;</span>, <span class="stringliteral">&quot;CM_CLIENT_NOT_CONNECTED&quot;</span>));
<a name="l00119"></a>00119                 <span class="keywordflow">return</span>;
<a name="l00120"></a>00120         } 
<a name="l00124"></a>00124     <span class="keywordflow">if</span> (in_msg.startsWith(<span class="stringliteral">&quot;BP_LOGIN_USER&quot;</span>))
<a name="l00125"></a>00125     {
<a name="l00126"></a>00126                 QString bpid = <span class="stringliteral">&quot;&quot;</span>;
<a name="l00127"></a>00127                 bpid = inputList[1].split(<span class="stringliteral">&quot;=&quot;</span>)[1]; <span class="comment">//split on = and save the id and send back as cmid</span>
<a name="l00128"></a>00128                 sprintf(id_cstr,<span class="stringliteral">&quot;%s&quot;</span>,bpid.toStdString().c_str()); 
<a name="l00129"></a>00129         <span class="keywordflow">if</span> (<a class="code" href="client_8cpp.html#a5364594f37cc7c791454572fb81af6e3">addRocketBoxAvatar</a>(id_cstr,<span class="stringliteral">&quot;m001.cfg&quot;</span>))
<a name="l00130"></a>00130                 {
<a name="l00131"></a>00131                          <span class="comment">//inform BP of successful login as AVATAR has been added </span>
<a name="l00132"></a>00132                          <span class="comment">//CM_LOGIN_USER_RES,bpid={bpid},cmid={cmid}</span>
<a name="l00133"></a>00133                         std::cout &lt;&lt; <span class="stringliteral">&quot;AVATAR &quot;</span> &lt;&lt; id_cstr &lt;&lt; <span class="stringliteral">&quot; added&quot;</span> &lt;&lt; std::endl;
<a name="l00134"></a>00134                         out_msg = <span class="stringliteral">&quot;CM_LOGIN_USER_RES,bpid=&quot;</span> + bpid + <span class="stringliteral">&quot;,cmid=&quot;</span> + bpid;
<a name="l00135"></a>00135                 } <span class="keywordflow">else</span>
<a name="l00136"></a>00136                 {
<a name="l00137"></a>00137                         <span class="comment">//if xmpp client was unable to connect to Beaming Scene Service, inform BP</span>
<a name="l00138"></a>00138                         <span class="comment">//CM_LOGIN_USER_FAILURE,id={bpid},fname={first name},lname={last name},error={error}</span>
<a name="l00139"></a>00139             out_msg = <span class="stringliteral">&quot;CM_LOGIN_USER_FAILURE,id=&quot;</span> + bpid + <span class="stringliteral">&quot;,fname=&quot;</span> + inputList[2].split(<span class="stringliteral">&quot;=&quot;</span>)[1] + <span class="stringliteral">&quot;,lname=&quot;</span> + inputList[3].split(<span class="stringliteral">&quot;=&quot;</span>)[1] + <span class="stringliteral">&quot;,error=USER_NOT_ADDED&quot;</span>;
<a name="l00140"></a>00140                 }
<a name="l00141"></a>00141                 <span class="keywordflow">return</span>;
<a name="l00142"></a>00142     }
<a name="l00143"></a>00143     <span class="keywordflow">else</span> <span class="keywordflow">if</span> (in_msg.startsWith(<span class="stringliteral">&quot;BP_LOGOFF_USER&quot;</span>))
<a name="l00144"></a>00144     <span class="comment">/*</span>
<a name="l00145"></a>00145 <span class="comment">     * BP_LOGOFF_USER,id={cmid}</span>
<a name="l00146"></a>00146 <span class="comment">     */</span>
<a name="l00147"></a>00147     {
<a name="l00148"></a>00148                 sprintf(id_cstr,<span class="stringliteral">&quot;%s&quot;</span>,inputList[1].split(<span class="stringliteral">&quot;=&quot;</span>)[1].toStdString().c_str());
<a name="l00149"></a>00149                 <a class="code" href="client_8cpp.html#a4daffd5dce4f1b7d588c096e8c5cd0e7" title="Deletes all 123 nodes for the specified RocketBox AVATAR id.">deleteRocketBoxAvatar</a>(id_cstr);
<a name="l00150"></a>00150         <span class="keywordflow">return</span>;
<a name="l00151"></a>00151     }
<a name="l00152"></a>00152     <span class="keywordflow">else</span> <span class="keywordflow">if</span> (in_msg.startsWith(<span class="stringliteral">&quot;BP_USER_POSITION&quot;</span>))
<a name="l00153"></a>00153     <span class="comment">/*</span>
<a name="l00154"></a>00154 <span class="comment">     * BP_USER_POSITION,id={cmid},x={x},y={y},z={z},ax={ax},ay={ay},az={az},aw={aw}</span>
<a name="l00155"></a>00155 <span class="comment">     */</span>
<a name="l00156"></a>00156     <span class="comment">// Pelvis is the only joint currently used as the user&#39;s position. </span>
<a name="l00157"></a>00157     {
<a name="l00158"></a>00158                 sprintf(id_cstr,<span class="stringliteral">&quot;%s&quot;</span>,inputList[1].split(<span class="stringliteral">&quot;=&quot;</span>)[1].toStdString().c_str());
<a name="l00159"></a>00159                 <span class="comment">//printf(&quot;%s\n&quot;,id_cstr);</span>
<a name="l00160"></a>00160                 <span class="comment">//updates root position which is 0 in the Rocketbox Avatar format</span>
<a name="l00161"></a>00161         <a class="code" href="client_8cpp.html#aa7db119a47bec78a32f84652bb2412c2">updateRocketBoxAvatar</a>(id_cstr,<span class="stringliteral">&quot;0&quot;</span>,inputList[2].split(<span class="stringliteral">&quot;=&quot;</span>)[1].toFloat(),
<a name="l00162"></a>00162                         inputList[3].split(<span class="stringliteral">&quot;=&quot;</span>)[1].toFloat(),inputList[4].split(<span class="stringliteral">&quot;=&quot;</span>)[1].toFloat(),
<a name="l00163"></a>00163                         inputList[5].split(<span class="stringliteral">&quot;=&quot;</span>)[1].toFloat(),inputList[6].split(<span class="stringliteral">&quot;=&quot;</span>)[1].toFloat(),
<a name="l00164"></a>00164                         inputList[7].split(<span class="stringliteral">&quot;=&quot;</span>)[1].toFloat(),inputList[8].split(<span class="stringliteral">&quot;=&quot;</span>)[1].toFloat());
<a name="l00165"></a>00165                 printf(<span class="stringliteral">&quot;%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f\n&quot;</span>,inputList[2].split(<span class="stringliteral">&quot;=&quot;</span>)[1].toFloat(),
<a name="l00166"></a>00166                         inputList[3].split(<span class="stringliteral">&quot;=&quot;</span>)[1].toFloat(),inputList[4].split(<span class="stringliteral">&quot;=&quot;</span>)[1].toFloat(),
<a name="l00167"></a>00167                         inputList[5].split(<span class="stringliteral">&quot;=&quot;</span>)[1].toFloat(),inputList[6].split(<span class="stringliteral">&quot;=&quot;</span>)[1].toFloat(),
<a name="l00168"></a>00168                         inputList[7].split(<span class="stringliteral">&quot;=&quot;</span>)[1].toFloat(),inputList[8].split(<span class="stringliteral">&quot;=&quot;</span>)[1].toFloat());
<a name="l00169"></a>00169                 <span class="keywordflow">return</span>;
<a name="l00170"></a>00170     }
<a name="l00171"></a>00171 
<a name="l00172"></a>00172     <span class="comment">/*</span>
<a name="l00173"></a>00173 <span class="comment">     * BP_RESET,id={cmid}</span>
<a name="l00174"></a>00174 <span class="comment">     */</span>
<a name="l00175"></a>00175     <span class="keywordflow">else</span> <span class="keywordflow">if</span> (in_msg.startsWith(<span class="stringliteral">&quot;BP_RESET&quot;</span>))
<a name="l00176"></a>00176     {
<a name="l00177"></a>00177                 printf(<span class="stringliteral">&quot;Removing all created nodes.\n&quot;</span>);
<a name="l00178"></a>00178                 <a class="code" href="client_8cpp.html#a66a21a3ed677f69961d8280482c5285a" title="use removeAllNodes() and stop() on exit">removeAllNodes</a>();
<a name="l00179"></a>00179                 <span class="keywordflow">return</span>;
<a name="l00180"></a>00180     }
<a name="l00181"></a>00181 
<a name="l00182"></a>00182     <span class="comment">//out_msg = &quot;CM_ERROR,error=unknown message&quot;;</span>
<a name="l00183"></a>00183 }
<a name="l00184"></a>00184 
<a name="l00185"></a>00185 <span class="comment">/*</span>
<a name="l00186"></a>00186 <span class="comment"> * This function should be executed by timer</span>
<a name="l00187"></a>00187 <span class="comment"> */</span>
<a name="l00188"></a><a class="code" href="classecho_client.html#a33fe7ecc07975d1136c6edf01ba14f7e">00188</a> <span class="keywordtype">void</span> <a class="code" href="classecho_client.html#a33fe7ecc07975d1136c6edf01ba14f7e">echoClient::PositionUpdateTimer</a>()
<a name="l00189"></a>00189 {
<a name="l00190"></a>00190         <span class="comment">//Reading AVATAR data</span>
<a name="l00191"></a>00191         <span class="comment">//get information on all connected clients. </span>
<a name="l00192"></a>00192         <span class="keywordtype">char</span> connectedclients[1024];
<a name="l00193"></a>00193         <span class="keywordtype">char</span> *guid, *node, *tmpid;
<a name="l00194"></a>00194         <span class="keywordtype">char</span> allnodes[2048], <a class="code" href="structnode__info.html">node_info</a>[256];
<a name="l00195"></a>00195         <span class="keywordtype">int</span> loop = 0;
<a name="l00196"></a>00196         <span class="keywordtype">float</span> data[7] = {0.f};
<a name="l00197"></a>00197         <span class="keywordtype">char</span> iddata[128];
<a name="l00198"></a>00198         <span class="keywordtype">char</span> <a class="code" href="client_8cpp.html#af53f92900705f7de3c139a05b2f9ef16">ch</a>;
<a name="l00199"></a>00199         <span class="keywordtype">char</span> fname[128], lname[128];
<a name="l00200"></a>00200         <span class="comment">//regularly check incoming connections, pings, etc</span>
<a name="l00201"></a>00201         <a class="code" href="client_8cpp.html#a83f8adca24e250bfb5c9a90a35503ae9">check</a>();
<a name="l00202"></a>00202         <span class="keywordflow">if</span> (kbhit())
<a name="l00203"></a>00203         {
<a name="l00204"></a>00204                 ch=getch();
<a name="l00205"></a>00205                 <span class="keywordflow">if</span> (ch==<span class="charliteral">&#39;q&#39;</span> || ch==<span class="charliteral">&#39;Q&#39;</span> || ch==27)
<a name="l00206"></a>00206                 {
<a name="l00207"></a>00207                         sendPacket(QXmppMessage(<span class="stringliteral">&quot;cmmanager&quot;</span>, <span class="stringliteral">&quot;bpserver@srv-beaming&quot;</span>, <span class="stringliteral">&quot;CM_CLIENT_NOT_CONNECTED&quot;</span>));
<a name="l00208"></a>00208                         printf(<span class="stringliteral">&quot;Quitting.\n&quot;</span>);
<a name="l00209"></a>00209                         <a class="code" href="client_8cpp.html#a66a21a3ed677f69961d8280482c5285a" title="use removeAllNodes() and stop() on exit">removeAllNodes</a>();
<a name="l00210"></a>00210                         <a class="code" href="client_8cpp.html#a8c528baf37154d347366083f0f816846" title="use removeAllNodes() and stop() on exit">stop</a>();
<a name="l00211"></a>00211                         exit(1);
<a name="l00212"></a>00212                 }
<a name="l00213"></a>00213         }
<a name="l00214"></a>00214         <span class="comment">//printf(&quot;number of connected clients %i\t&quot;,getPeersID(connectedclients));</span>
<a name="l00215"></a>00215         <a class="code" href="client_8cpp.html#ae20598e6116c0ec6646fa9a0f886f027">getPeersID</a>(connectedclients);
<a name="l00216"></a>00216         <span class="comment">//printf(&quot;connected clients (getPeersID): %s\n&quot;,connectedclients);</span>
<a name="l00217"></a>00217         <span class="keywordflow">for</span> (guid = strtok (connectedclients, <span class="stringliteral">&quot;;&quot;</span>); guid != NULL;
<a name="l00218"></a>00218            guid = strtok (guid + strlen (guid) + 1, <span class="stringliteral">&quot;;&quot;</span>))
<a name="l00219"></a>00219         {
<a name="l00220"></a>00220                 strncpy (iddata, guid, <span class="keyword">sizeof</span> (iddata));
<a name="l00221"></a>00221                 printf (<span class="stringliteral">&quot;GUID: %s\n&quot;</span>, iddata);
<a name="l00222"></a>00222                 <span class="comment">//for each connected guid in the database, get the nodes information.</span>
<a name="l00223"></a>00223                 <span class="comment">//printf(&quot;Number of nodes %i\n&quot;,getNodesInfo(iddata,allnodes));</span>
<a name="l00224"></a>00224                 <a class="code" href="client_8cpp.html#af9b6a701fc265f98834b4d453718f831">getNodesInfo</a>(iddata,allnodes);
<a name="l00225"></a>00225                 <span class="keywordflow">for</span> (node = strtok (allnodes, <span class="stringliteral">&quot;;&quot;</span>); node != NULL;
<a name="l00226"></a>00226                    node = strtok (node + strlen (node) + 1, <span class="stringliteral">&quot;;&quot;</span>))
<a name="l00227"></a>00227                 {
<a name="l00228"></a>00228                         strncpy (node_info, node, <span class="keyword">sizeof</span> (node_info));
<a name="l00229"></a>00229                         <span class="comment">//printf (&quot; Node: %s\n&quot;, node_info);</span>
<a name="l00230"></a>00230                         <span class="keywordflow">for</span> (tmpid = strtok (node_info, <span class="stringliteral">&quot;,&quot;</span>); tmpid != NULL;
<a name="l00231"></a>00231                            tmpid = strtok (tmpid + strlen (tmpid) + 1, <span class="stringliteral">&quot;,&quot;</span>))
<a name="l00232"></a>00232                         {
<a name="l00233"></a>00233                                 <span class="keyword">static</span> <span class="keywordtype">char</span> avid[128];<span class="comment">//, fname[128];</span>
<a name="l00234"></a>00234                                 <span class="keywordflow">switch</span> (loop) 
<a name="l00235"></a>00235                                 {
<a name="l00236"></a>00236                                 <span class="keywordflow">case</span> 0:<span class="comment">// first token is the avatar id</span>
<a name="l00237"></a>00237                                         <span class="comment">//printf (&quot;  Avatar id: %s\n&quot;, tmpid);</span>
<a name="l00238"></a>00238                                         strncpy(avid,tmpid,<span class="keyword">sizeof</span>(avid));
<a name="l00239"></a>00239                                         <span class="keywordflow">break</span>;
<a name="l00240"></a>00240                                 <span class="keywordflow">case</span> 1:<span class="comment">// second token is the avatar name</span>
<a name="l00241"></a>00241                                         <span class="comment">//printf (&quot;  Avatar name: %s\n&quot;, tmpid);</span>
<a name="l00242"></a>00242                                         <span class="comment">//strncpy(fname,tmpid,sizeof(fname));</span>
<a name="l00243"></a>00243                                         <span class="keywordflow">break</span>;
<a name="l00244"></a>00244                                 <span class="keywordflow">case</span> 2: <span class="comment">//third token is the TYPE</span>
<a name="l00245"></a>00245                                         <span class="keywordflow">if</span> (!strcmp(tmpid,<span class="stringliteral">&quot;AVATAR&quot;</span>)) <span class="comment">//only process if type is AVATAR</span>
<a name="l00246"></a>00246                                         {
<a name="l00247"></a>00247                                                 <span class="comment">//get AVATAR root node &quot;0&quot; </span>
<a name="l00248"></a>00248                                                 <span class="keywordflow">if</span> (<a class="code" href="client_8cpp.html#a142b482930bea3a0a563337dc68540b2">getAvatarSpecificData</a>(iddata,avid,<span class="stringliteral">&quot;0&quot;</span>,data))
<a name="l00249"></a>00249                                                 {
<a name="l00250"></a>00250                                                         <span class="comment">//printf(&quot;   Specific data for 0: %.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f\n&quot;,data[0],data[1],data[2],data[3],data[4],data[5],data[6]);</span>
<a name="l00252"></a>00252 <span class="comment"></span>                                                        <a class="code" href="client_8cpp.html#ad7a848f23c79ed5b15b655fa06c9c105" title="gets the firstname and lastname for the specified avatar">getAvatarName</a>(iddata,avid,fname,lname);
<a name="l00253"></a>00253                                                         printf(<span class="stringliteral">&quot;   Avatar Name: %s %s\n&quot;</span>,fname,lname);
<a name="l00254"></a>00254                                                         <span class="keywordtype">char</span> msg_cstr[128];
<a name="l00255"></a>00255                                                         <span class="comment">//sprintf(msg_cstr,&quot;CM_USER_POSITION,id=%s,fname=%s,lname=lastname,x=%.3f,y=%.3f,z=%.3f,ax=%.3f,ay=%.3f,az=%.3f,aw=%.3f&quot;,iddata,avid,data[0],data[1],data[2],data[3],data[4],data[5],data[6]);</span>
<a name="l00256"></a>00256                                                         sprintf(msg_cstr,<span class="stringliteral">&quot;CM_USER_POSITION,ConnId=%s,id=%s,fname=%s,lname=%s,x=%.3f,y=%.3f,z=%.3f,ax=%.3f,ay=%.3f,az=%.3f,aw=%.3f&quot;</span>,iddata,avid,fname,lname,data[0],data[1],data[2],data[3],data[4],data[5],data[6]);
<a name="l00257"></a>00257                                                         std::string msg_stdstr = msg_cstr;
<a name="l00258"></a>00258                                                         sendPacket(QXmppMessage(<span class="stringliteral">&quot;&quot;</span>, <span class="stringliteral">&quot;bpserver@srv-beaming&quot;</span>, QString::fromStdString(msg_stdstr))); 
<a name="l00259"></a>00259                                                 }
<a name="l00260"></a>00260                                         } <span class="comment">//else </span>
<a name="l00261"></a>00261                                                 <span class="comment">//printf(&quot;   %s - Not AVATAR\t&quot;,tmpid);</span>
<a name="l00262"></a>00262                                         <span class="keywordflow">break</span>;
<a name="l00263"></a>00263                                 }
<a name="l00264"></a>00264                                 loop++;
<a name="l00265"></a>00265                         }
<a name="l00266"></a>00266                         loop=0;
<a name="l00267"></a>00267                 }
<a name="l00268"></a>00268         }
<a name="l00269"></a>00269 }
</pre></div></div><!-- contents -->
</div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Defines</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="echo_client_8cpp.html">echoClient.cpp</a>      </li>

    <li class="footer">Generated on Thu Feb 7 2013 15:21:31 for Beaming Scene Service by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
