<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>Beaming Audio: Classes/rakcli.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript">
$(document).ready(initResizable);
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css"/>
</head>
<body onload='searchBox.OnSelectItem(0);'>
<!-- Generated by Doxygen 1.7.3 -->
<script type="text/javascript"><!--
var searchBox = new SearchBox("searchBox", "search",false,'Search');
--></script>
<div id="top">
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="BEAMING_LOGO2.jpg"></td>
  <td style="padding-left: 0.5em;">
   <div id="projectname">Beaming Audio&#160;<span id="projectnumber">0.9</span></div>
   <div id="projectbrief">Audio Client-Server for BEAMING</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.html"><span>Related&#160;Pages</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
      <li id="searchli">
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
      <li><a href="globals.html"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('rakcli_8cpp.html','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<h1>Classes/rakcli.cpp</h1>  </div>
</div>
<div class="contents">
<a href="rakcli_8cpp.html">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 
<a name="l00002"></a>00002 
<a name="l00003"></a>00003 
<a name="l00004"></a>00004 
<a name="l00005"></a>00005 <span class="preprocessor">#include &quot;<a class="code" href="rakcli_8h.html" title="Defines the RakCli class containing the overall interface for connecting and identifying to an Audio ...">rakcli.h</a>&quot;</span>
<a name="l00006"></a>00006 <span class="preprocessor">#include &lt;RakNetworkFactory.h&gt;</span>
<a name="l00007"></a>00007 
<a name="l00008"></a>00008 <span class="comment">// constructor with initialization</span>
<a name="l00009"></a><a class="code" href="class_rak_cli.html#a00bdaed2aca425e1c1f387059db736f6">00009</a> <a class="code" href="class_rak_cli.html#a00bdaed2aca425e1c1f387059db736f6" title="Constructor of the Audio Client class.">RakCli::RakCli</a>(<a class="code" href="class_audio_interface.html" title="Interface for asynchronous communication between audio modules.">AudioInterface</a> *interface, QObject *parent) : QThread(parent),
<a name="l00010"></a>00010         bDoRun(true),
<a name="l00011"></a>00011         bReconnect(false),
<a name="l00012"></a>00012         audioIF(interface),
<a name="l00013"></a>00013         audioReliability(UNRELIABLE_SEQUENCED)
<a name="l00014"></a>00014 {
<a name="l00015"></a>00015     <span class="comment">// setup RakNet interface class</span>
<a name="l00016"></a>00016     peer=RakNetworkFactory::GetRakPeerInterface();
<a name="l00017"></a>00017 
<a name="l00018"></a>00018     <span class="comment">//finish the raknet setup</span>
<a name="l00019"></a>00019 
<a name="l00020"></a>00020     SocketDescriptor socketDescriptor(0, 0);
<a name="l00021"></a>00021     peer-&gt;Startup(1,10,&amp;socketDescriptor,1); <span class="comment">// set up for a single outgoing connection</span>
<a name="l00022"></a>00022     start();
<a name="l00023"></a>00023 }
<a name="l00024"></a>00024 
<a name="l00025"></a>00025 <span class="comment">// Destructor</span>
<a name="l00026"></a>00026 RakCli::~RakCli(){
<a name="l00027"></a>00027     bDoRun=<span class="keyword">false</span>; <span class="comment">// stop receiving packets</span>
<a name="l00028"></a>00028     wait(); <span class="comment">// wait untill no more packets are received</span>
<a name="l00029"></a>00029 
<a name="l00030"></a>00030     <span class="keywordflow">if</span> (peer-&gt;IsActive()) {
<a name="l00031"></a>00031         peer-&gt;Shutdown(300);
<a name="l00032"></a>00032     }
<a name="l00033"></a>00033     <span class="comment">// destroy the RakNet interface setup on creation</span>
<a name="l00034"></a>00034     RakNetworkFactory::DestroyRakPeerInterface(peer);
<a name="l00035"></a>00035 }
<a name="l00036"></a>00036 
<a name="l00037"></a>00037 
<a name="l00038"></a><a class="code" href="class_rak_cli.html#a1e92e491f024d0add9b772fd97342461">00038</a> <span class="keywordtype">bool</span> <a class="code" href="class_rak_cli.html#a1e92e491f024d0add9b772fd97342461" title="Connect to a server - the main function required to use this class.">RakCli::ConnectToServer</a>(<a class="code" href="rakinfo_8h.html#a3c17bff6fe46b8320aaff27c1fbac19c" title="tClientType is an enum for defining our internal (audio) client types">tClientType</a> type, <span class="keyword">const</span> <span class="keywordtype">char</span> *host, <span class="keywordtype">unsigned</span> <span class="keywordtype">short</span> port,QString name){
<a name="l00039"></a>00039     myType = type;
<a name="l00040"></a>00040     <span class="keywordflow">if</span>(name.isEmpty()){
<a name="l00041"></a>00041         myName = tr(<a class="code" href="rakinfo_8h.html#afcf889820a49d13605ea469a5799b4e3">ClientTypeText</a>[myType]);
<a name="l00042"></a>00042     } <span class="keywordflow">else</span> {
<a name="l00043"></a>00043         myName = name;
<a name="l00044"></a>00044     }
<a name="l00045"></a>00045     serverAddr=QString::fromAscii(host);
<a name="l00046"></a>00046     serverPort=port;
<a name="l00047"></a>00047 
<a name="l00048"></a>00048     <span class="keywordtype">bool</span> retval = peer-&gt;Connect(host,port,0,0,0);
<a name="l00049"></a>00049     peer-&gt;SetOccasionalPing(<span class="keyword">true</span>);
<a name="l00050"></a>00050     <span class="keywordflow">if</span>(retval){
<a name="l00051"></a>00051         emit <a class="code" href="class_rak_cli.html#a26034a0d56aa197fe2328001f5692da6" title="A Qt Signal for a general message interface.">message</a>(tr(<span class="stringliteral">&quot;Connection to %1:%2&quot;</span>).arg(host,QString::number(port)),<span class="keyword">false</span>);
<a name="l00052"></a>00052     } <span class="keywordflow">else</span> {
<a name="l00053"></a>00053         emit <a class="code" href="class_rak_cli.html#a26034a0d56aa197fe2328001f5692da6" title="A Qt Signal for a general message interface.">message</a>(tr(<span class="stringliteral">&quot;Failed to connect to %1:%2&quot;</span>).arg(host,QString::number(port)),<span class="keyword">true</span>);
<a name="l00054"></a>00054     }
<a name="l00055"></a>00055     <span class="keywordflow">return</span> retval;
<a name="l00056"></a>00056 
<a name="l00057"></a>00057 }
<a name="l00058"></a>00058 
<a name="l00059"></a><a class="code" href="class_rak_cli.html#adb9ce1989d290b2eb16dff0ba8bd1f28">00059</a> <span class="keywordtype">void</span> <a class="code" href="class_rak_cli.html#adb9ce1989d290b2eb16dff0ba8bd1f28" title="Disconnect from server we are connected to.">RakCli::Disconnect</a>(){
<a name="l00060"></a>00060     bReconnect=<span class="keyword">false</span>;
<a name="l00061"></a>00061     <span class="keywordflow">if</span>(<a class="code" href="class_rak_cli.html#aded7a39a959da8d8041d54db95f7d45e" title="Test if we are currently connected to an Audio Server.">isConnected</a>()){
<a name="l00062"></a>00062         peer-&gt;CloseConnection(peer-&gt;GetSystemAddressFromIndex(0),<span class="keyword">true</span>);
<a name="l00063"></a>00063     }
<a name="l00064"></a>00064     emit <a class="code" href="class_rak_cli.html#acf69a9a30fea432df3a6a3a6d7a2cb9f" title="A Qt Signal emitted when the client has been disconnected.">disconnected</a>();
<a name="l00065"></a>00065 }
<a name="l00066"></a>00066 
<a name="l00067"></a>00067 
<a name="l00068"></a><a class="code" href="class_rak_cli.html#aded7a39a959da8d8041d54db95f7d45e">00068</a> <span class="keywordtype">bool</span> <a class="code" href="class_rak_cli.html#aded7a39a959da8d8041d54db95f7d45e" title="Test if we are currently connected to an Audio Server.">RakCli::isConnected</a>(){
<a name="l00069"></a>00069     <span class="keywordtype">unsigned</span> <span class="keywordtype">short</span> numsys;
<a name="l00070"></a>00070     peer-&gt;GetConnectionList(0,&amp;numsys);
<a name="l00071"></a>00071     <span class="keywordflow">return</span> numsys;
<a name="l00072"></a>00072 }
<a name="l00073"></a>00073 
<a name="l00074"></a>00074 
<a name="l00075"></a><a class="code" href="class_rak_cli.html#a7e216105226b643c182137b6d77f0bc9">00075</a> <a class="code" href="rakinfo_8h.html#a3c17bff6fe46b8320aaff27c1fbac19c" title="tClientType is an enum for defining our internal (audio) client types">tClientType</a> <a class="code" href="class_rak_cli.html#a7e216105226b643c182137b6d77f0bc9" title="Test which client type we are connected as.">RakCli::clientType</a>(){
<a name="l00076"></a>00076     <span class="keywordflow">return</span> myType;
<a name="l00077"></a>00077 }
<a name="l00078"></a>00078 
<a name="l00079"></a>00079 <span class="keywordtype">void</span> RakCli::run(){ <span class="comment">// QThread overload - TODO: create 2 separate threads - one for receiving and one for sending, since they CAN run independently!</span>
<a name="l00080"></a>00080     <span class="keywordflow">while</span> (bDoRun) { <span class="comment">// Is only stoppped by the desctructor</span>
<a name="l00081"></a>00081        <span class="keywordflow">if</span>( ((myType==<a class="code" href="rakinfo_8h.html#a3c17bff6fe46b8320aaff27c1fbac19ca87fd49d0542fa58a1d282e2d02537511">AUDIO_VISITOR</a>) | (myType == <a class="code" href="rakinfo_8h.html#a3c17bff6fe46b8320aaff27c1fbac19caab0b4e85be005591a8e5470c96699c86">AUDIO_LOCAL</a>) | (myType == <a class="code" href="rakinfo_8h.html#a3c17bff6fe46b8320aaff27c1fbac19ca2e394db8fadb9012b09142a0de7ffcef">AUDIO_AR_LOCAL</a>) | (myType == <a class="code" href="rakinfo_8h.html#a3c17bff6fe46b8320aaff27c1fbac19ca10c640771ca6b67327fd79fd10577c1d">AUDIO_CUSTOM</a>) | (myType==<a class="code" href="rakinfo_8h.html#a3c17bff6fe46b8320aaff27c1fbac19ca11641dcaecf6e966b16477a15140c025">AUDIO_PROXY</a>)) ){ <span class="comment">// Only transmit if we are a Visitor, Local or Proxy</span>
<a name="l00082"></a>00082            sendAudio();
<a name="l00083"></a>00083        }
<a name="l00084"></a>00084        receivePacket();
<a name="l00085"></a>00085        usleep(1000); <span class="comment">// a maximum of 1 ms of sleep between (attempted) transmissions and receptions</span>
<a name="l00086"></a>00086        <span class="keywordflow">if</span>(bReconnect){
<a name="l00087"></a>00087            <span class="keywordflow">if</span>(peer-&gt;Connect(serverAddr.toAscii().data(),serverPort,0,0,0)){
<a name="l00088"></a>00088                emit <a class="code" href="class_rak_cli.html#a26034a0d56aa197fe2328001f5692da6" title="A Qt Signal for a general message interface.">message</a>(tr(<span class="stringliteral">&quot;Connection to %1:%2&quot;</span>).arg(serverAddr,QString::number(serverPort)),<span class="keyword">false</span>);
<a name="l00089"></a>00089            } <span class="keywordflow">else</span> {
<a name="l00090"></a>00090                emit <a class="code" href="class_rak_cli.html#a26034a0d56aa197fe2328001f5692da6" title="A Qt Signal for a general message interface.">message</a>(tr(<span class="stringliteral">&quot;Failed to connect to %1:%2&quot;</span>).arg(serverAddr,QString::number(serverPort)),<span class="keyword">true</span>);
<a name="l00091"></a>00091                msleep(200);
<a name="l00092"></a>00092            }
<a name="l00093"></a>00093        }
<a name="l00094"></a>00094     }
<a name="l00097"></a>00097 }
<a name="l00098"></a>00098 
<a name="l00099"></a>00099 <span class="keywordtype">void</span> RakCli::identify(RakNetGUID guid){
<a name="l00100"></a>00100     QByteArray datagram(1,(MessageID)<a class="code" href="rakinfo_8h.html#a89d6c6b7b4358189be5c421d8ced50cea944ec816a7f2f69b4d323b8d95488702">ID_AAU_CLIENTTYPE</a>); <span class="comment">// Identify ourselves....</span>
<a name="l00101"></a>00101     datagram.append((MessageID)myType);
<a name="l00102"></a>00102     <span class="keywordflow">if</span>( (myType==<a class="code" href="rakinfo_8h.html#a3c17bff6fe46b8320aaff27c1fbac19ca3659746e6afa35c80147e5aecf362b76">AUDIO_AVATAR</a>)|(myType==<a class="code" href="rakinfo_8h.html#a3c17bff6fe46b8320aaff27c1fbac19ca45fdad03ce6b227ee2e0377af19693af">AUDIO_SPECTATOR</a>)|(myType==<a class="code" href="rakinfo_8h.html#a3c17bff6fe46b8320aaff27c1fbac19ca023a6a8a9abd2e44fa1322d64b9fe005">AUDIO_GUID_LISTENER</a>)){ <span class="comment">// for the types without input, get name from ConnectToServer()-call</span>
<a name="l00103"></a>00103         datagram.append(myName.toAscii());
<a name="l00104"></a>00104         datagram.append(QChar::Null); <span class="comment">// remember to manually append null-termination to strings</span>
<a name="l00105"></a>00105     } <span class="keywordflow">else</span> { <span class="comment">// for the others, loop through the input identifications</span>
<a name="l00106"></a>00106         <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=0; i&lt;audioIF-&gt;<a class="code" href="class_audio_interface.html#a9cee063cdbec8d17af8588b0486be515" title="Get the number of Capture channels.">nChnCapture</a>(); i++){
<a name="l00107"></a>00107             datagram.append(audioIF-&gt;<a class="code" href="class_audio_interface.html#a91e40a8c965ba6217312acc15ca08fc4" title="Get the ID associated to a particular Capture channel.">captureID</a>(i).toAscii());
<a name="l00108"></a>00108             datagram.append(QChar::Null);
<a name="l00109"></a>00109         }
<a name="l00110"></a>00110     }
<a name="l00111"></a>00111     peer-&gt;Send(datagram.data(),datagram.size(),MEDIUM_PRIORITY,RELIABLE,0,guid,<span class="keyword">false</span>);
<a name="l00112"></a>00112     emit <a class="code" href="class_rak_cli.html#a26034a0d56aa197fe2328001f5692da6" title="A Qt Signal for a general message interface.">message</a>(tr(<span class="stringliteral">&quot;datagram size: %1 %2&quot;</span>).arg(QString::number(datagram.size()),QString::number(audioIF-&gt;<a class="code" href="class_audio_interface.html#a9cee063cdbec8d17af8588b0486be515" title="Get the number of Capture channels.">nChnCapture</a>())));
<a name="l00113"></a>00113     emit <a class="code" href="class_rak_cli.html#a26034a0d56aa197fe2328001f5692da6" title="A Qt Signal for a general message interface.">message</a>(tr(<span class="stringliteral">&quot;Identifying to server as %1&quot;</span>).arg(tr(<a class="code" href="rakinfo_8h.html#a7e898d6e6f8e4ee4dc0de97ec6ca3138">ClientTypeTextArticle</a>[myType])));
<a name="l00114"></a>00114 }
<a name="l00115"></a>00115 
<a name="l00116"></a>00116 <span class="keywordtype">void</span> RakCli::receivePacket(){
<a name="l00117"></a>00117     Packet *p=peer-&gt;Receive();
<a name="l00118"></a>00118     <span class="keywordtype">int</span> off;
<a name="l00119"></a>00119     ring_buffer_size_t length; <span class="comment">// just because we cannot define it inside the switch case even though it&#39;s only used in one case...</span>
<a name="l00120"></a>00120     <span class="keywordflow">while</span> (p) {
<a name="l00121"></a>00121         <span class="keywordflow">switch</span> (p-&gt;data[0]) {
<a name="l00122"></a>00122             <span class="keywordflow">case</span> ID_CONNECTION_REQUEST_ACCEPTED: <span class="comment">// RakPeer - In a client/server environment, our connection request to the server has been accepted.</span>
<a name="l00123"></a>00123                 bReconnect=<span class="keyword">false</span>;
<a name="l00124"></a>00124                 emit <a class="code" href="class_rak_cli.html#a26034a0d56aa197fe2328001f5692da6" title="A Qt Signal for a general message interface.">message</a>(tr(<span class="stringliteral">&quot;Anonymous connection to server accepted - identifying&quot;</span>));
<a name="l00125"></a>00125                 identify(p-&gt;guid);
<a name="l00126"></a>00126                 <span class="keywordflow">break</span>;
<a name="l00127"></a>00127             <span class="keywordflow">case</span> ID_ALREADY_CONNECTED: <span class="comment">// RakPeer - Sent a connect request to a system we are currently connected to.</span>
<a name="l00128"></a>00128                 emit <a class="code" href="class_rak_cli.html#a26034a0d56aa197fe2328001f5692da6" title="A Qt Signal for a general message interface.">message</a>(tr(<span class="stringliteral">&quot;The client is already connected - attempting to reconnect&quot;</span>));
<a name="l00129"></a>00129                 <span class="keywordflow">break</span>;
<a name="l00130"></a>00130             <span class="keywordflow">case</span> ID_NO_FREE_INCOMING_CONNECTIONS: <span class="comment">// RakPeer - The system we attempted to connect to is not accepting new connections.</span>
<a name="l00131"></a>00131             <span class="keywordflow">case</span> ID_CONNECTION_ATTEMPT_FAILED: <span class="comment">// RakPeer - Sent to the player when a connection request cannot be completed due to inability to connect.</span>
<a name="l00132"></a>00132                 <span class="keywordflow">if</span>(bReconnect){
<a name="l00133"></a>00133                     msleep(200); <span class="comment">// wait for a little while before attempting to reconnect again</span>
<a name="l00134"></a>00134                 } <span class="keywordflow">else</span> {
<a name="l00135"></a>00135                     emit <a class="code" href="class_rak_cli.html#acf69a9a30fea432df3a6a3a6d7a2cb9f" title="A Qt Signal emitted when the client has been disconnected.">disconnected</a>();
<a name="l00136"></a>00136                     emit <a class="code" href="class_rak_cli.html#a26034a0d56aa197fe2328001f5692da6" title="A Qt Signal for a general message interface.">message</a>(tr(<span class="stringliteral">&quot;Connection to server failed&quot;</span>));
<a name="l00137"></a>00137                 }
<a name="l00138"></a>00138                 <span class="keywordflow">break</span>;
<a name="l00139"></a>00139             <span class="keywordflow">case</span> ID_CONNECTION_LOST: <span class="comment">// RakPeer - Reliable packets cannot be delivered to the system specified in Packet::systemAddress. The connection to that system has been closed.</span>
<a name="l00140"></a>00140                 emit <a class="code" href="class_rak_cli.html#a26034a0d56aa197fe2328001f5692da6" title="A Qt Signal for a general message interface.">message</a>(tr(<span class="stringliteral">&quot;The connection to %1 is lost&quot;</span>).arg(p-&gt;systemAddress.ToString(<span class="keyword">true</span>)),1);
<a name="l00141"></a>00141                 bReconnect=<span class="keyword">true</span>;
<a name="l00142"></a>00142                 <span class="keywordflow">break</span>;
<a name="l00143"></a>00143             <span class="keywordflow">case</span> ID_DISCONNECTION_NOTIFICATION: <span class="comment">// RakPeer - The system specified in Packet::systemAddress has disconnected from us. For the client, this would mean the server has shutdown.</span>
<a name="l00144"></a>00144                 emit <a class="code" href="class_rak_cli.html#acf69a9a30fea432df3a6a3a6d7a2cb9f" title="A Qt Signal emitted when the client has been disconnected.">disconnected</a>();
<a name="l00145"></a>00145                 emit <a class="code" href="class_rak_cli.html#a26034a0d56aa197fe2328001f5692da6" title="A Qt Signal for a general message interface.">message</a>(tr(<span class="stringliteral">&quot;Disconnected from %1&quot;</span>).arg(p-&gt;systemAddress.ToString(<span class="keyword">true</span>)),0);
<a name="l00146"></a>00146                 <span class="keywordflow">break</span>;
<a name="l00147"></a>00147             <span class="keywordflow">case</span> ID_MODIFIED_PACKET: <span class="comment">// RakPeer - A packet has been tampered with in transit. The sender is contained in Packet::systemAddress.</span>
<a name="l00148"></a>00148                 emit <a class="code" href="class_rak_cli.html#a26034a0d56aa197fe2328001f5692da6" title="A Qt Signal for a general message interface.">message</a>(tr(<span class="stringliteral">&quot;The packet has been tampered with in transit&quot;</span>),1); <span class="comment">// SKO has never seen this using his LAN</span>
<a name="l00149"></a>00149                 <span class="keywordflow">break</span>;
<a name="l00150"></a>00150             <span class="keywordflow">case</span> <a class="code" href="rakinfo_8h.html#a89d6c6b7b4358189be5c421d8ced50cea944ec816a7f2f69b4d323b8d95488702">ID_AAU_CLIENTTYPE</a>: <span class="comment">// Our own personal ID&#39;s</span>
<a name="l00151"></a>00151                 <span class="comment">// shouldn&#39;t actually reach the client?</span>
<a name="l00152"></a>00152                 emit <a class="code" href="class_rak_cli.html#a26034a0d56aa197fe2328001f5692da6" title="A Qt Signal for a general message interface.">message</a>(tr(<span class="stringliteral">&quot;%1 Identifies as %2 - we won&#39;t use this info for anything though&quot;</span>).arg(p-&gt;systemAddress.ToString(<span class="keyword">true</span>),tr(<a class="code" href="rakinfo_8h.html#a7e898d6e6f8e4ee4dc0de97ec6ca3138">ClientTypeTextArticle</a>[p-&gt;data[1]])),0);
<a name="l00153"></a>00153             <span class="keywordflow">case</span> <a class="code" href="rakinfo_8h.html#a89d6c6b7b4358189be5c421d8ced50ceaf2efb077e05044fb869e868c542b3e3d" title="The Audio packet type is used when the transmitted data is audio.">ID_AAU_AUDIO</a>:
<a name="l00154"></a>00154 <span class="preprocessor">#ifdef MEASURE_LATENCY</span>
<a name="l00155"></a>00155 <span class="preprocessor"></span>    audioIF-&gt;latNetRecvStart.append(audioIF-&gt;latencyTimer.elapsed());
<a name="l00156"></a>00156 <span class="preprocessor">#endif // MEASURE_LATENCY</span>
<a name="l00157"></a>00157 <span class="preprocessor"></span>                <span class="comment">// Audio arrived for playback - let&#39;s add it to the buffer...</span>
<a name="l00158"></a>00158                 off=qstrlen((<span class="keywordtype">char</span>*)(p-&gt;data+1))+ 2; <span class="comment">// offset before data starts: 1 byte for ID_AAU_AUDIO + length of string + &#39;\0&#39;</span>
<a name="l00159"></a>00159                 length=(p-&gt;length-off)/<span class="keyword">sizeof</span>(<span class="keywordtype">signed</span> <span class="keywordtype">short</span>); <span class="comment">// get the data length of the packet (without RakNet and stream ID&#39;s)</span>
<a name="l00160"></a>00160                 audioIF-&gt;<a class="code" href="class_audio_interface.html#a7aab1fc9ee96f0b2f30e097b8ba9d271" title="Write to an Output channel.">writeOutput</a>(reinterpret_cast&lt;signed short *&gt;(p-&gt;data+off),length,QString::fromAscii((<span class="keywordtype">char</span>*)p-&gt;data+1)); <span class="comment">// write data to the available buffer, matching this ID</span>
<a name="l00161"></a>00161 <span class="preprocessor">#ifdef MEASURE_LATENCY</span>
<a name="l00162"></a>00162 <span class="preprocessor"></span>    audioIF-&gt;latNetRecvEnd.append(audioIF-&gt;latencyTimer.elapsed());
<a name="l00163"></a>00163     audioIF-&gt;latNetRecvSamples.append(length);
<a name="l00164"></a>00164 <span class="preprocessor">#endif // MEASURE_LATENCY</span>
<a name="l00165"></a>00165 <span class="preprocessor"></span>                <span class="keywordflow">break</span>;
<a name="l00166"></a>00166             <span class="keywordflow">default</span>:
<a name="l00167"></a>00167                 emit <a class="code" href="class_rak_cli.html#a26034a0d56aa197fe2328001f5692da6" title="A Qt Signal for a general message interface.">message</a>(tr(<span class="stringliteral">&quot;Unknown Raknet ID: %1&quot;</span>).arg((<span class="keywordtype">int</span>)p-&gt;data[0]),1);
<a name="l00168"></a>00168                 <span class="keywordflow">break</span>;
<a name="l00169"></a>00169         }
<a name="l00170"></a>00170 
<a name="l00171"></a>00171 
<a name="l00172"></a>00172         <span class="comment">// Done with the packet handling, so we are safe to remove the message</span>
<a name="l00173"></a>00173         <span class="comment">// NOTE: We should make sure we really are done using it before doing this!</span>
<a name="l00174"></a>00174         <span class="comment">// The only issue will probably be when getting user data, where further handling (outside class) is needed</span>
<a name="l00175"></a>00175         peer-&gt;DeallocatePacket(p);
<a name="l00176"></a>00176         p=peer-&gt;Receive(); <span class="comment">// read next packet</span>
<a name="l00177"></a>00177      }
<a name="l00178"></a>00178 }
<a name="l00179"></a>00179 
<a name="l00180"></a>00180 
<a name="l00181"></a>00181 
<a name="l00182"></a>00182 
<a name="l00183"></a>00183 
<a name="l00184"></a>00184 <span class="comment">// Encode and send data to the specified server</span>
<a name="l00190"></a><a class="code" href="rakcli_8cpp.html#a5faf1a47d0611ceea03904443d37f280">00190</a> <span class="comment"></span><span class="preprocessor">#define AAU_MAX_PACKETSIZE 1024</span>
<a name="l00191"></a>00191 <span class="preprocessor"></span><span class="keywordtype">void</span> RakCli::sendAudio(){
<a name="l00192"></a>00192     <span class="keyword">static</span> <span class="keywordtype">signed</span> <span class="keywordtype">short</span> audio[<a class="code" href="rakcli_8cpp.html#a5faf1a47d0611ceea03904443d37f280" title="The maximum size of a packet that should be sent.">AAU_MAX_PACKETSIZE</a>]; <span class="comment">// temp for transmission - static is just to avoid reallocation all the time...</span>
<a name="l00193"></a>00193 
<a name="l00194"></a>00194     <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=0; i&lt;audioIF-&gt;<a class="code" href="class_audio_interface.html#a9cee063cdbec8d17af8588b0486be515" title="Get the number of Capture channels.">nChnCapture</a>() ; i++) { <span class="comment">// transmit all channels</span>
<a name="l00195"></a>00195         <span class="comment">// get input from buffer and transmit it (if there is anything to transmit)</span>
<a name="l00196"></a>00196         <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> length = audioIF-&gt;<a class="code" href="class_audio_interface.html#a55a997d0ba7d7b5eef8b924ce2a2aeed" title="Read from a Capture channel.">readCapture</a>(audio,<a class="code" href="rakcli_8cpp.html#a5faf1a47d0611ceea03904443d37f280" title="The maximum size of a packet that should be sent.">AAU_MAX_PACKETSIZE</a>, i); <span class="comment">// read whatever is available - the legth returned tells how many samples we read</span>
<a name="l00197"></a>00197         <span class="keywordflow">while</span>( length &gt; 0 ){ <span class="comment">// As long as there is something to transmit - do that in chucks of maximum the defined size</span>
<a name="l00198"></a>00198 <span class="preprocessor">#ifdef MEASURE_LATENCY</span>
<a name="l00199"></a>00199 <span class="preprocessor"></span>            audioIF-&gt;latNetSendSamples.append(length);<span class="comment">// keep length out of time measurement</span>
<a name="l00200"></a>00200             audioIF-&gt;latNetSendStart.append(audioIF-&gt;latencyTimer.elapsed());
<a name="l00201"></a>00201 <span class="preprocessor">#endif // MEASURE_LATENCY</span>
<a name="l00202"></a>00202 <span class="preprocessor"></span>            QByteArray datagram(1,(MessageID)<a class="code" href="rakinfo_8h.html#a89d6c6b7b4358189be5c421d8ced50ceaf2efb077e05044fb869e868c542b3e3d" title="The Audio packet type is used when the transmitted data is audio.">ID_AAU_AUDIO</a>); <span class="comment">// set the Raknet identifier</span>
<a name="l00203"></a>00203             datagram.append(audioIF-&gt;<a class="code" href="class_audio_interface.html#a91e40a8c965ba6217312acc15ca08fc4" title="Get the ID associated to a particular Capture channel.">captureID</a>(i).toAscii()); <span class="comment">// add our ID</span>
<a name="l00204"></a>00204             datagram.append(QChar::Null); <span class="comment">// and make sure it&#39;s null-terminated</span>
<a name="l00205"></a>00205             datagram.append(reinterpret_cast&lt;char const *&gt;(audio),length*<span class="keyword">sizeof</span>(<span class="keywordtype">signed</span> <span class="keywordtype">short</span>)); <span class="comment">// append the data we read</span>
<a name="l00206"></a>00206             peer-&gt;Send(datagram.data(),datagram.size(),HIGH_PRIORITY,audioReliability,0,peer-&gt;GetGUIDFromIndex(0),<span class="keyword">false</span>); <span class="comment">// Send the packet...</span>
<a name="l00207"></a>00207             length = audioIF-&gt;<a class="code" href="class_audio_interface.html#a55a997d0ba7d7b5eef8b924ce2a2aeed" title="Read from a Capture channel.">readCapture</a>(audio,<a class="code" href="rakcli_8cpp.html#a5faf1a47d0611ceea03904443d37f280" title="The maximum size of a packet that should be sent.">AAU_MAX_PACKETSIZE</a>, i); <span class="comment">// read the next part of the buffer if anything is available</span>
<a name="l00208"></a>00208 <span class="preprocessor">#ifdef MEASURE_LATENCY</span>
<a name="l00209"></a>00209 <span class="preprocessor"></span>            audioIF-&gt;latNetSendEnd.append(audioIF-&gt;latencyTimer.elapsed());
<a name="l00210"></a>00210 <span class="preprocessor">#endif // MEASURE_LATENCY</span>
<a name="l00211"></a>00211 <span class="preprocessor"></span>        }
<a name="l00212"></a>00212     }
<a name="l00213"></a>00213 
<a name="l00214"></a>00214 
<a name="l00215"></a>00215 }
<a name="l00216"></a>00216 
<a name="l00217"></a>00217 <span class="comment">// Priority otions are: IMMEDIATE_PRIORITY, HIGH_PRIORITY, MEDIUM_PRIORITY, LOW_PRIORITY</span>
<a name="l00218"></a>00218 <span class="comment">// IMMEDIATE is sent ASAP, HIGH and below are sent every 10 ms (defined in peer-&gt;startup command) in a prioritized manenr and combined if possible, saving bandwidth</span>
<a name="l00219"></a>00219 
<a name="l00220"></a>00220 <span class="comment">// Relaiability options are by example, assuming we send off 1,2,3,4,5,6 and it arrived like 2,5,1,4,3,6:</span>
<a name="l00221"></a>00221 <span class="comment">// UNRELIABLE - 5, 1, 4, 6</span>
<a name="l00222"></a>00222 <span class="comment">// UNRELIABLE_SEQUENCED - 5, 6</span>
<a name="l00223"></a>00223 <span class="comment">// RELIABLE - 2, 5, 1, 4, 3, 6</span>
<a name="l00224"></a>00224 <span class="comment">// RELIABLE_ORDERED - 1, 2, 3, 4, 5, 6</span>
<a name="l00225"></a>00225 <span class="comment">// RELIABLE_SEQUENCED - 2, 5, 6</span>
<a name="l00226"></a>00226 
<a name="l00227"></a>00227 <span class="comment">// generally RELIABLE takes way more time, as  ack&#39;s and resends are done, adding latency...</span>
<a name="l00228"></a>00228 <span class="comment">// I&#39;m not sure whether SEQUENCED is actually necessary - we have to test both with and without CELT to find out...</span>
<a name="l00229"></a>00229 <span class="comment">// The last parameter determines whether we broadcast to all except the system address (true) or only to those...</span>
</pre></div></div>
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="rakcli_8cpp.html">rakcli.cpp</a>      </li>
      <li class="footer">Generated on Tue Apr 16 2013 14:18:01 for Beaming Audio by&#160;
<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.3 </li>
    </ul>
  </div>
<!--- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Defines</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>


</body>
</html>
